{"version":3,"sources":["../node_modules/react-bootstrap/esm/ListGroupItem.js","../node_modules/react-bootstrap/esm/Table.js","../node_modules/react-bootstrap/esm/ListGroup.js","components/customSpinner/multiSquare/multiSquareLoader.js","components/customSpinner/multiSquare/multiSquareLoader.module.scss","../node_modules/react-bootstrap/esm/PageItem.js","../node_modules/react-bootstrap/esm/Pagination.js","components/pagination/pagination.jsx","../node_modules/react-bootstrap/esm/InputGroup.js","components/examBuilder/card/card.jsx","components/examBuilder/examSpec.jsx","components/examBuilder/filterQuestionsBySearch.jsx","components/examBuilder/filter.jsx","components/examBuilder/selectedQuestionsPreview.jsx","container/examBuilder/component/examBuilderAction.jsx","container/examBuilder/component/questionList.jsx","utils/questionUtils.js","container/examBuilder/component/copyPasteQuestionIds.jsx","container/examBuilder/examBuilder.js","container/examBuilder/editExam.js"],"names":["ListGroupItem","React","forwardRef","_ref","ref","bsPrefix","active","disabled","className","variant","action","as","eventKey","onClick","props","_objectWithoutPropertiesLoose","useBootstrapPrefix","handleClick","useCallback","event","preventDefault","stopPropagation","createElement","AbstractNavItem","_extends","makeEventKey","href","classNames","defaultProps","displayName","Table","striped","bordered","borderless","hover","size","responsive","decoratedBsPrefix","classes","table","responsiveClass","ListGroup","horizontalVariant","_useUncontrolled","useUncontrolled","activeKey","horizontal","_useUncontrolled$as","controlledProps","AbstractNav","Item","MultiSquareLoader","Styles","content","loader","module","exports","PageItem","style","activeLabel","children","Component","SafeAnchor","createButton","name","defaultValue","label","_class","_temp","_React$Component","apply","this","arguments","_inheritsLoose","prototype","render","_this$props","First","Prev","Ellipsis","Next","Last","Pagination","pagination","itemsCount","pageSize","onPageHandler","currentPage","pageCount","Math","ceil","items","number","push","key","width","height","InputGroup","_ref$as","InputGroupAppend","createWithBsPrefix","InputGroupPrepend","InputGroupText","Text","Radio","type","Checkbox","Append","Prepend","ExamCard","header","headerBgColor","showHeader","Card","Header","Body","centeredStyle","position","top","left","transform","zIndex","ExamSpec","categories","courses","selectedQuestionIds","editExamSpec","useState","editExamId","setEditExamId","Date","startDate","setStartDate","endDate","setEndDate","forceEditTime","setForceEditTime","dispatch","useDispatch","loading","useSelector","state","examPaper","successMsg","success","errorMsg","error","initialValues","title","toString","description","categoryType","categoryIds","courseType","courseIds","singleQuestionMark","questionStemLength","penaltyMark","timeLimit","useEffect","console","log","Spinner","animation","role","validate","onSubmit","onSubmitHandler","enableReinitialize","errors","handleChange","handleSubmit","values","Alert","onClose","resetLoader","dismissible","Badge","questions","length","JSON","stringify","Form","Group","controlId","Label","Control","placeholder","onChange","value","multiple","map","categorySlug","slug","replace","id","selected","date","showTimeSelect","minDate","dateFormat","color","Button","onLoadingLoader","postExamProfile","alert","validator","isLength","min","max","isInt","isNumeric","FilterQuestionsBySearch","handleSearch","qTypeSearchRef","useRef","FormControl","aria-label","aria-describedby","current","Filter","handleSwitch","categoryParamId","qTypeState","searchRegxErrorMsg","Check","SelectedQuestionsPreview","show","handleClose","questionCart","removeQuestionsFromCartHandler","selectedQuestions","setSelectedQuestions","deleteQuestionHandler","filter","q","axios","get","process","Array","from","then","data","isArray","catch","e","Modal","onHide","closeButton","Title","question","index","qText","qType","categoryId","cursor","Footer","ExamBuilderAction","actionHandleChange","QuestionList","showStem","questionCartAddHandler","questionCartDelHandler","showStemHandler","filteredQuestionslength","questionSelectOnChangeHandler","isChecked","target","checked","parseInt","FormCheck","tagObj","tagLine","tags","split","forEach","tag","includes","trim","tagsToObj","inline","has","generalFeedback","stems","fbStem","book","author","operator","programme","session","year","onMouseEnter","onMouseLeave","stem","ind","qStem","aStem","rel","CopyPasteQuestionIds","massQIdsHandler","addToQuestionCartHandler","qId","join","navigator","clipboard","writeText","styles","bottom","right","getCategoryParamId","search","URLSearchParams","ExamPaper","filteredQuestions","questionCartshow","Set","massQIds","copyPasteShow","handleQuestionCartShow","setState","handleQuestionCartShowClose","add","delete","paginate","ids","categoryChangeHandler","onGetQuestionByCategoryLoader","history","location","pathname","qTypeSwitchFilterHandler","questionsFilterMethod","searchFilterHandler","text","ques","rs","RegExp","test","message","page","addPageNumberQueryValue","onFetchCategoryLoader","onFetchCoursesLoader","onGetQuestionLoader","preProps","editExam","RoutesConfig","ExamBuilder","metaInfo","Row","Col","lg","category","preState","getPageNumberQueryValue","connect","auth","api","fetchCategory","fetchCourseLoader","getQuestionLoader","getQuestionByCategoryLoader","withPageNumberQueryToRoute","EditExam","editExamHandleClose","exam","setExam","Axios","res"],"mappings":"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","file":"static/js/34.b36fc6b3.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\nimport AbstractNavItem from './AbstractNavItem';\nimport { makeEventKey } from './SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  variant: null,\n  active: false,\n  disabled: false\n};\nvar ListGroupItem = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      active = _ref.active,\n      disabled = _ref.disabled,\n      className = _ref.className,\n      variant = _ref.variant,\n      action = _ref.action,\n      as = _ref.as,\n      eventKey = _ref.eventKey,\n      onClick = _ref.onClick,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"active\", \"disabled\", \"className\", \"variant\", \"action\", \"as\", \"eventKey\", \"onClick\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (onClick) onClick(event);\n  }, [disabled, onClick]);\n  return React.createElement(AbstractNavItem, _extends({\n    ref: ref\n  }, props, {\n    eventKey: makeEventKey(eventKey, props.href) // eslint-disable-next-line\n    ,\n    as: as || (action ? props.href ? 'a' : 'button' : 'div'),\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, active && 'active', disabled && 'disabled', variant && bsPrefix + \"-\" + variant, action && bsPrefix + \"-action\")\n  }));\n});\nListGroupItem.defaultProps = defaultProps;\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport warning from 'warning';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractNav from './AbstractNav';\nimport ListGroupItem from './ListGroupItem';\nvar defaultProps = {\n  variant: null,\n  horizontal: null\n};\nvar ListGroup = React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      className = _useUncontrolled.className,\n      bsPrefix = _useUncontrolled.bsPrefix,\n      variant = _useUncontrolled.variant,\n      horizontal = _useUncontrolled.horizontal,\n      _useUncontrolled$as = _useUncontrolled.as,\n      as = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"className\", \"bsPrefix\", \"variant\", \"horizontal\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group');\n  var horizontalVariant;\n\n  if (horizontal) {\n    horizontalVariant = horizontal === true ? 'horizontal' : \"horizontal-\" + horizontal;\n  } else {\n    horizontalVariant = null;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(!(horizontal && variant === 'flush'), '`variant=\"flush\"` and `horizontal` should not be used together.') : void 0;\n  return React.createElement(AbstractNav, _extends({\n    ref: ref\n  }, controlledProps, {\n    as: as,\n    className: classNames(className, bsPrefix, variant && bsPrefix + \"-\" + variant, horizontalVariant && bsPrefix + \"-\" + horizontalVariant)\n  }));\n});\nListGroup.defaultProps = defaultProps;\nListGroup.displayName = 'ListGroup';\nListGroup.Item = ListGroupItem;\nexport default ListGroup;","import React from 'react'\r\nimport Styles from './multiSquareLoader.module.scss'\r\n\r\nexport default function MultiSquareLoader() {\r\n  return (\r\n    <div className={Styles.content}>\r\n      <span className={Styles.loader}></span>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"multiSquareLoader_loader__1g3Mz\",\"pgfill\":\"multiSquareLoader_pgfill__O6PE3\"};","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\n/* eslint-disable react/no-multi-comp */\nimport classNames from 'classnames';\nimport React from 'react';\nimport SafeAnchor from './SafeAnchor';\nvar defaultProps = {\n  active: false,\n  disabled: false,\n  activeLabel: '(current)'\n};\nvar PageItem = React.forwardRef(function (_ref, ref) {\n  var active = _ref.active,\n      disabled = _ref.disabled,\n      className = _ref.className,\n      style = _ref.style,\n      activeLabel = _ref.activeLabel,\n      children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"active\", \"disabled\", \"className\", \"style\", \"activeLabel\", \"children\"]);\n\n  var Component = active || disabled ? 'span' : SafeAnchor;\n  return React.createElement(\"li\", {\n    ref: ref,\n    style: style,\n    className: classNames(className, 'page-item', {\n      active: active,\n      disabled: disabled\n    })\n  }, React.createElement(Component, _extends({\n    className: \"page-link\",\n    disabled: disabled\n  }, props), children, active && activeLabel && React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, activeLabel)));\n});\nPageItem.defaultProps = defaultProps;\nPageItem.displayName = 'PageItem';\nexport default PageItem;\n\nfunction createButton(name, defaultValue, label) {\n  var _class, _temp;\n\n  if (label === void 0) {\n    label = name;\n  }\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inheritsLoose(_class, _React$Component);\n\n    function _class() {\n      return _React$Component.apply(this, arguments) || this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          props = _objectWithoutPropertiesLoose(_this$props, [\"children\"]);\n\n      delete props.active;\n      return React.createElement(PageItem, props, React.createElement(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, children || defaultValue), React.createElement(\"span\", {\n        className: \"sr-only\"\n      }, label));\n    };\n\n    return _class;\n  }(React.Component), _class.displayName = name, _temp;\n}\n\nexport var First = createButton('First', '«');\nexport var Prev = createButton('Prev', '‹', 'Previous');\nexport var Ellipsis = createButton('Ellipsis', '…', 'More');\nexport var Next = createButton('Next', '›');\nexport var Last = createButton('Last', '»');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport PageItem, { First, Prev, Ellipsis, Next, Last } from './PageItem';\n\n/**\n * @property {PageItem} Item\n * @property {PageItem} First\n * @property {PageItem} Prev\n * @property {PageItem} Ellipsis\n * @property {PageItem} Next\n * @property {PageItem} Last\n */\nvar Pagination = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      children = _ref.children,\n      size = _ref.size,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"children\", \"size\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'pagination');\n  return React.createElement(\"ul\", _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix, size && decoratedBsPrefix + \"-\" + size)\n  }), children);\n});\nPagination.First = First;\nPagination.Prev = Prev;\nPagination.Ellipsis = Ellipsis;\nPagination.Item = PageItem;\nPagination.Next = Next;\nPagination.Last = Last;\nexport default Pagination;","import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\n\r\nconst pagination = ({ itemsCount, pageSize, onPageHandler, currentPage }) => {\r\n  const pageCount = Math.ceil(itemsCount / pageSize)\r\n  if (pageCount === 1) return null\r\n  const items = []\r\n  for (let number = 1; number <= pageCount; number++) {\r\n    items.push(\r\n      <Pagination.Item\r\n        key={number}\r\n        onClick={() => {\r\n          onPageHandler(number)\r\n        }}\r\n        active={number === currentPage}\r\n        className='my-2 mr-2 text-center'\r\n        style={{ width: '40px', height: '30px' }}\r\n      >\r\n        {number}\r\n      </Pagination.Item>\r\n    )\r\n  }\r\n  return (\r\n    <Pagination className='justify-content-start align-content-start flex-wrap'>\r\n      {items}\r\n    </Pagination>\r\n  )\r\n}\r\n\r\nexport default pagination\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"size\", \"className\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size)\n  }));\n});\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return React.createElement(InputGroupText, null, React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return React.createElement(InputGroupText, null, React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst ExamCard = ({ header, children, headerBgColor, showHeader }) => {\r\n  return (\r\n    <Card className='mt-5'>\r\n      {showHeader && (\r\n        <Card.Header\r\n          className={'text-center font-weight-bold bg-' + headerBgColor}\r\n        >\r\n          {header}\r\n        </Card.Header>\r\n      )}\r\n      <Card.Body>{children}</Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ExamCard\r\n","import { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Alert, Badge, Button, Form, Spinner } from 'react-bootstrap'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { FaEdit, FaRegCalendarAlt } from 'react-icons/fa'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n//import { useFormik } from \"formik\";\r\nimport validator from 'validator'\r\nimport {\r\n  onLoadingLoader,\r\n  postExamProfile,\r\n  resetLoader\r\n} from '../../store/examPaper'\r\nimport ExamCard from './card/card'\r\n\r\nconst centeredStyle = {\r\n  // styling to display server response in middle of screen\r\n  position: 'fixed',\r\n  top: '50%',\r\n  left: '50%',\r\n  /* bring your own prefixes */\r\n  transform: 'translate(-50%, -50%)',\r\n  zIndex: '1000'\r\n}\r\n\r\nconst ExamSpec = ({\r\n  categories,\r\n  courses,\r\n  selectedQuestionIds,\r\n  editExamSpec\r\n}) => {\r\n  const [editExamId, setEditExamId] = useState(null)\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [endDate, setEndDate] = useState(new Date())\r\n  const [forceEditTime, setForceEditTime] = useState(false) // for forcely set exam time to old days\r\n  const dispatch = useDispatch()\r\n  const loading = useSelector((state) => state.examPaper.loading)\r\n  const successMsg = useSelector((state) => state.examPaper.success)\r\n  const errorMsg = useSelector((state) => state.examPaper.error)\r\n  const initialValues = {\r\n    title: editExamSpec ? editExamSpec.title : '',\r\n    type: editExamSpec ? editExamSpec.type.toString() : '0',\r\n    description: editExamSpec ? editExamSpec.description : '',\r\n    categoryType: editExamSpec ? editExamSpec.categoryIds : [],\r\n    courseType: editExamSpec ? editExamSpec.courseIds : [],\r\n    singleQuestionMark: editExamSpec\r\n      ? editExamSpec.singleQuestionMark.toString()\r\n      : '1',\r\n    questionStemLength: editExamSpec\r\n      ? editExamSpec.questionStemLength.toString()\r\n      : '5',\r\n    penaltyMark: editExamSpec ? editExamSpec.penaltyMark.toString() : '0',\r\n    timeLimit: editExamSpec ? editExamSpec.timeLimit.toString() : '40'\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (editExamSpec) {\r\n      setStartDate(new Date(editExamSpec.startDate))\r\n      setEndDate(new Date(editExamSpec.endDate))\r\n    }\r\n  }, [editExamSpec])\r\n  console.log(editExamId)\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <Spinner\r\n          animation='border'\r\n          role='status'\r\n          variant='dark'\r\n          className='content-center'\r\n        ></Spinner>\r\n      )}\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validate={validate}\r\n        onSubmit={onSubmitHandler(\r\n          startDate,\r\n          endDate,\r\n          selectedQuestionIds,\r\n          dispatch,\r\n          editExamId\r\n        )}\r\n        enableReinitialize\r\n      >\r\n        {({ errors, handleChange, handleSubmit, values }) => (\r\n          <ExamCard header='Exam Specification' showHeader={true}>\r\n            {successMsg && (\r\n              <Alert //\r\n                variant={'success'}\r\n                className='text-center'\r\n                style={centeredStyle}\r\n                onClose={() => dispatch(resetLoader())}\r\n                dismissible\r\n              >\r\n                <Badge>{successMsg.title}</Badge>\r\n                <span>{successMsg.description}</span>\r\n                <Badge>({successMsg.questions.length})</Badge>\r\n              </Alert>\r\n            )}\r\n            {errorMsg && (\r\n              <Alert //\r\n                variant={'danger'}\r\n                className='text-center'\r\n                style={centeredStyle}\r\n                onClose={() => dispatch(resetLoader())}\r\n                dismissible\r\n              >\r\n                {JSON.stringify(errorMsg)}\r\n              </Alert>\r\n            )}\r\n            <Form>\r\n              <Form.Group controlId='title'>\r\n                <Form.Label>Title</Form.Label>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='Enter title'\r\n                  name='title'\r\n                  onChange={handleChange}\r\n                  value={values.title}\r\n                />\r\n              </Form.Group>\r\n              {errors.title ? (\r\n                <div className='alert alert-danger'>{errors.title}</div>\r\n              ) : null}\r\n              <Form.Group controlId='type'>\r\n                <Form.Label>Exam Type</Form.Label>\r\n                <Form.Control\r\n                  as='select'\r\n                  name='type'\r\n                  value={values.type}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value='0'>Assignment</option>\r\n                  <option value='1'>Weekly</option>\r\n                  <option value='2'>Monthly</option>\r\n                  <option value='3'>Assesment</option>\r\n                  <option value='4'>Term</option>\r\n                  <option value='5'>Test</option>\r\n                  <option value='6'>Final</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group controlId='categoryType'>\r\n                <Form.Label>Category Type</Form.Label>\r\n                <Form.Control\r\n                  as='select'\r\n                  multiple\r\n                  name='categoryType'\r\n                  onChange={handleChange}\r\n                  value={values.categoryType}\r\n                  //value={categories[0] && categories[0].id}\r\n                  // eslint-disable-next-line react/jsx-no-comment-textnodes\r\n                >\r\n                  // eslint-disable-next-line react/prop-types //\r\n                  eslint-disable-next-line react/prop-types\r\n                  {categories.map((value) => {\r\n                    //console.log(categories[0].id);\r\n                    let categorySlug = value.slug.replace(/_/g, ' / ')\r\n                    if (value.name !== 'Uncategorized')\r\n                      return <option value={value.id}>{categorySlug}</option>\r\n                    else return <></>\r\n                  })}\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='courseType'>\r\n                <Form.Label>Course Type</Form.Label>\r\n                <Form.Control\r\n                  as='select'\r\n                  multiple\r\n                  name='courseType'\r\n                  onChange={handleChange}\r\n                  value={values.courseType}\r\n                  //value={categories[0] && categories[0].id}\r\n                  // eslint-disable-next-line react/jsx-no-comment-textnodes\r\n                >\r\n                  // eslint-disable-next-line react/prop-types //\r\n                  eslint-disable-next-line react/prop-types\r\n                  {courses &&\r\n                    courses.map((value) => (\r\n                      <option value={value.id}>{value.title}</option>\r\n                    ))}\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='description'>\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control\r\n                  type='textarea'\r\n                  placeholder='description'\r\n                  name='description'\r\n                  onChange={handleChange}\r\n                  value={values.description}\r\n                />\r\n              </Form.Group>\r\n              {errors.description ? (\r\n                <div className='alert alert-danger'>{errors.description}</div>\r\n              ) : null}\r\n              <div>\r\n                <div className='my-3'>\r\n                  <p>Start Date</p>\r\n                  <DatePicker\r\n                    selected={startDate}\r\n                    onChange={(date) => setStartDate(date)}\r\n                    showTimeSelect\r\n                    minDate={\r\n                      editExamSpec ? null : forceEditTime ? null : new Date()\r\n                    }\r\n                    dateFormat='Pp'\r\n                  />\r\n                  <FaRegCalendarAlt size='1.7rem' />\r\n                </div>\r\n                <div className='my-3'>\r\n                  <p>End Date</p>\r\n                  <DatePicker\r\n                    selected={endDate}\r\n                    onChange={(date) => setEndDate(date)}\r\n                    showTimeSelect\r\n                    minDate={\r\n                      editExamSpec ? null : forceEditTime ? null : new Date()\r\n                    }\r\n                    dateFormat='Pp'\r\n                  />\r\n                  <FaRegCalendarAlt size='1.7rem' />\r\n                </div>\r\n                <p>\r\n                  <FaEdit\r\n                    color='red'\r\n                    onClick={() => {\r\n                      setForceEditTime(!forceEditTime)\r\n                    }}\r\n                  />\r\n                </p>\r\n              </div>\r\n              <Form.Group controlId='singleQuestionMark'>\r\n                <Form.Label>Single Question Mark</Form.Label>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='1'\r\n                  name='singleQuestionMark'\r\n                  onChange={handleChange}\r\n                  value={values.singleQuestionMark}\r\n                />\r\n                <Form.Text className='text-muted'>\r\n                  ** It is value for the question, not for the single stem.\r\n                </Form.Text>\r\n              </Form.Group>\r\n              {errors.singleQuestionMark ? (\r\n                <div className='alert alert-danger'>\r\n                  {errors.singleQuestionMark}\r\n                </div>\r\n              ) : null}\r\n              <Form.Group controlId='questionStemLength'>\r\n                <Form.Label>Question Stem Length</Form.Label>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='5'\r\n                  name='questionStemLength'\r\n                  onChange={handleChange}\r\n                  value={values.questionStemLength}\r\n                />\r\n              </Form.Group>\r\n              {errors.questionStemLength ? (\r\n                <div className='alert alert-danger'>\r\n                  {errors.questionStemLength}\r\n                </div>\r\n              ) : null}\r\n              <Form.Group controlId='penaltyMark'>\r\n                <Form.Label>Penalty Mark</Form.Label>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='0'\r\n                  name='penaltyMark'\r\n                  onChange={handleChange}\r\n                  value={values.penaltyMark}\r\n                />\r\n                <Form.Text className='text-muted'>\r\n                  ** It is value for single stem, not for the question.\r\n                </Form.Text>\r\n              </Form.Group>\r\n              {errors.penaltyMark ? (\r\n                <div className='alert alert-danger'>{errors.penaltyMark}</div>\r\n              ) : null}\r\n              <Form.Group controlId='timeLimit'>\r\n                <Form.Label>Time Limit(Minutes)</Form.Label>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='40'\r\n                  name='timeLimit'\r\n                  value={values.timeLimit}\r\n                  onChange={handleChange}\r\n                />\r\n              </Form.Group>\r\n              {errors.timeLimit ? (\r\n                <div className='alert alert-danger'>{errors.timeLimit}</div>\r\n              ) : null}\r\n            </Form>\r\n            <Button\r\n              onClick={() => {\r\n                setEditExamId(editExamSpec.id)\r\n                handleSubmit()\r\n              }}\r\n            >\r\n              Submit\r\n            </Button>\r\n            <Button\r\n              className='ml-2'\r\n              onClick={() => {\r\n                setEditExamId(null)\r\n                handleSubmit()\r\n              }}\r\n            >\r\n              Create A New Exam\r\n            </Button>\r\n          </ExamCard>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ExamSpec\r\n\r\nfunction onSubmitHandler(\r\n  startDate,\r\n  endDate,\r\n  selectedQuestionIds,\r\n  dispatch,\r\n  editExamId\r\n) {\r\n  return (values) => {\r\n    if (selectedQuestionIds.length > 0) {\r\n      values.startDate = startDate\r\n      values.endDate = endDate\r\n      dispatch(onLoadingLoader())\r\n      dispatch(postExamProfile(values, selectedQuestionIds, editExamId))\r\n    } else {\r\n      alert('Their is no selected Question')\r\n    }\r\n  }\r\n}\r\n\r\nconst validate = (values) => {\r\n  const errors = {}\r\n  if (!values.title) {\r\n    errors.title = 'Required'\r\n  } else if (!validator.isLength(values.title, { min: 5, max: 50 })) {\r\n    errors.title = 'Title should be between 5-50 characters'\r\n  }\r\n  if (!values.description) {\r\n    errors.description = 'Required'\r\n  } else if (!validator.isLength(values.description, { min: 15, max: 255 })) {\r\n    errors.description = 'Description should be between 15-255 characters'\r\n  }\r\n  if (!values.singleQuestionMark) {\r\n    errors.singleQuestionMark = 'Required'\r\n  } else if (!validator.isInt(values.singleQuestionMark)) {\r\n    errors.singleQuestionMark = 'Single Question Mark should be Integer value'\r\n  }\r\n  if (!values.questionStemLength) {\r\n    errors.questionStemLength = 'Required'\r\n  } else if (!validator.isNumeric(values.questionStemLength)) {\r\n    errors.questionStemLength = 'Question stem length should be Numeric value'\r\n  }\r\n  if (!values.penaltyMark) {\r\n    errors.penaltyMark = 'Required'\r\n  } else if (!validator.isNumeric(values.penaltyMark)) {\r\n    errors.penaltyMark = 'penalty Mark should be Numeric value'\r\n  }\r\n  if (!values.timeLimit) {\r\n    errors.timeLimit = 'Required'\r\n  } else if (!validator.isInt(values.timeLimit)) {\r\n    errors.timeLimit = 'Timelimit Mark should be Interger Value'\r\n  }\r\n  return errors\r\n}\r\n","import React, { useRef } from 'react'\r\nimport { FormControl, InputGroup } from 'react-bootstrap'\r\n\r\nexport default function FilterQuestionsBySearch({ handleSearch }) {\r\n  const qTypeSearchRef = useRef()\r\n  return (\r\n    <div className='mt-4'>\r\n      <p>Search</p>\r\n      <InputGroup className='mb-3'>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text id='qTypeSearch'>qType Search</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl\r\n          placeholder='hypokalemia'\r\n          aria-label='qTypeSearch'\r\n          aria-describedby='qTypeSearch'\r\n          ref={qTypeSearchRef}\r\n          onChange={() => {\r\n            handleSearch(qTypeSearchRef.current.value)\r\n          }}\r\n        />\r\n      </InputGroup>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport FilterQuestionsBySearch from './filterQuestionsBySearch'\r\nimport ExamCard from './card/card'\r\n\r\nconst Filter = ({\r\n  handleChange,\r\n  handleSwitch,\r\n  categories,\r\n  categoryParamId,\r\n  qTypeState,\r\n  handleSearch,\r\n  searchRegxErrorMsg\r\n}) => {\r\n  return (\r\n    <ExamCard header='Filter' showHeader={true}>\r\n      <Form.Group controlId='formGridParent'>\r\n        <Form.Label>Category</Form.Label>\r\n        <Form.Control\r\n          as='select'\r\n          name='categoryId'\r\n          onChange={handleChange}\r\n          value={categoryParamId}\r\n        >\r\n          <option value='top'>Top...</option>\r\n          {categories.map((value) => {\r\n            let categorySlug = value.slug.replace(/_/g, ' / ')\r\n            return <option value={value.id}>{categorySlug}</option>\r\n          })}\r\n        </Form.Control>\r\n      </Form.Group>\r\n      <Form.Check\r\n        name='sbaOnly'\r\n        type='switch'\r\n        id='sba-only-switch'\r\n        label='Only SBA'\r\n        onChange={handleSwitch}\r\n        disabled={qTypeState === 'matrix'}\r\n      />\r\n      <Form.Check\r\n        name='matrixOnly'\r\n        type='switch'\r\n        id='matrix-only-switch'\r\n        label='Only Matrix'\r\n        onChange={handleSwitch}\r\n        disabled={qTypeState === 'sba'}\r\n      />\r\n      <FilterQuestionsBySearch handleSearch={handleSearch} />\r\n      <p className='text-danger'>{searchRegxErrorMsg}</p>\r\n    </ExamCard>\r\n  )\r\n}\r\n\r\nexport default Filter\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Badge, Button, ListGroup, Modal } from 'react-bootstrap'\r\nimport { FaTimes } from 'react-icons/fa'\r\nimport ExamCard from './card/card'\r\n\r\nconst SelectedQuestionsPreview = ({\r\n  show,\r\n  handleClose,\r\n  questionCart,\r\n  removeQuestionsFromCartHandler\r\n}) => {\r\n  const [selectedQuestions, setSelectedQuestions] = useState(null)\r\n  useEffect(() => {\r\n    if (questionCart.size > 0) {\r\n      axios\r\n        .get(\r\n          `${process.env.REACT_APP_SITE_URL}/questions/${Array.from(\r\n            questionCart\r\n          )}`\r\n        )\r\n        .then(({ data }) => {\r\n          // {} | [{}]\r\n          console.log(data)\r\n          if (Array.isArray(data)) {\r\n            setSelectedQuestions(data)\r\n          } else setSelectedQuestions([data])\r\n        })\r\n        .catch((e) => console.log(e))\r\n    }\r\n  }, [questionCart])\r\n\r\n  function deleteQuestionHandler(id) {\r\n    if (selectedQuestions) {\r\n      setSelectedQuestions(selectedQuestions.filter((q) => q.id !== id))\r\n    }\r\n  }\r\n  return (\r\n    <Modal show={show} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Selected Questions Preview</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <ExamCard header='Selected Questions Preview' showHeader={false}>\r\n          {\r\n            <ListGroup className='my-2'>\r\n              {selectedQuestions &&\r\n                (Array.isArray(selectedQuestions) ? (\r\n                  selectedQuestions.map((question, index) => (\r\n                    <ListGroup.Item key={index} variant={'success'}>\r\n                      <span>{`${index + 1}. `}</span>\r\n                      <Badge className='mr-2'>{`${question.title}`}</Badge>\r\n                      <span className='mr-2'>{`${question.qText}`}</span>\r\n                      <Badge className='mr-2'>{`Id No. ${question.id}`}</Badge>\r\n                      <Badge className='mr-2'>{`${question.qType}`}</Badge>\r\n                      <Badge className='mr-2'>{`CategoryId No. ${question.categoryId}`}</Badge>\r\n                      <Badge\r\n                        variant='danger'\r\n                        onClick={() => {\r\n                          deleteQuestionHandler(question.id)\r\n                        }}\r\n                        style={{ cursor: 'pointer' }}\r\n                      >\r\n                        <FaTimes />\r\n                      </Badge>\r\n                    </ListGroup.Item>\r\n                  ))\r\n                ) : (\r\n                  <ListGroup.Item>\r\n                    {`${selectedQuestions.title} --> ${selectedQuestions.qText}`}{' '}\r\n                    <Badge\r\n                      variant='danger ml-2'\r\n                      onClick={() => {\r\n                        deleteQuestionHandler(selectedQuestions.id)\r\n                      }}\r\n                      style={{ cursor: 'pointer' }}\r\n                    >\r\n                      <FaTimes />\r\n                    </Badge>\r\n                  </ListGroup.Item>\r\n                ))}\r\n            </ListGroup>\r\n          }\r\n        </ExamCard>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button\r\n          variant='danger'\r\n          onClick={() => {\r\n            removeQuestionsFromCartHandler(\r\n              selectedQuestions\r\n                ? selectedQuestions.length > 0\r\n                  ? selectedQuestions.map((q) => q.id)\r\n                  : null\r\n                : null\r\n            )\r\n          }}\r\n        >\r\n          Apply Changes\r\n        </Button>\r\n        <Button variant='secondary' onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default SelectedQuestionsPreview\r\n","import React from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport ExamCard from '../../../components/examBuilder/card/card'\r\n\r\nexport default function ExamBuilderAction({ actionHandleChange }) {\r\n  return (\r\n    <ExamCard showHeader={true} header='Action' headerBgColor='light'>\r\n      <Form.Group controlId='formGridParent'>\r\n        <Form.Label>Actions</Form.Label>\r\n        <Form.Control as='select' name='action' onChange={actionHandleChange}>\r\n          <option value=''>Select...</option>\r\n          <option value='mAll'>Mark All</option>\r\n          <option value='uAll'>UnMark All</option>\r\n          <option value='mPQ'>Mark The On Page's Questiones </option>\r\n          <option value='uPQ'>UnMark The On Page's Questiones</option>\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </ExamCard>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Badge, Form, FormCheck, ListGroup, Table } from 'react-bootstrap'\r\nimport Pagination from '../../../components/pagination/pagination'\r\nimport { FaChevronCircleDown, FaEdit, FaRegCheckCircle } from 'react-icons/fa'\r\nimport { tagsToObj } from '../../../utils/questionUtils'\r\n\r\nexport default function QuestionList({\r\n  questions,\r\n  showStem,\r\n  questionCartAddHandler,\r\n  questionCartDelHandler,\r\n  showStemHandler,\r\n  questionCart,\r\n  pageSize,\r\n  currentPage,\r\n  onPageHandler,\r\n  filteredQuestionslength\r\n}) {\r\n  function questionSelectOnChangeHandler(event) {\r\n    const isChecked = event.target.checked\r\n    const value = parseInt(event.target.value) // convert string value to number\r\n    if (isChecked) {\r\n      questionCartAddHandler(value)\r\n    } else {\r\n      questionCartDelHandler(value)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <FormCheck>\r\n        <ListGroup className='my-2'>\r\n          {questions.length < 1 && (\r\n            <p className='text-danger'>No Question in this category.</p>\r\n          )}\r\n          {questions.map((question, index) => {\r\n            const tagObj = tagsToObj(question.tags)\r\n            return (\r\n              <ListGroup.Item\r\n                key={question.id}\r\n                variant={index % 2 === 0 ? 'dark' : 'light'}\r\n              >\r\n                {\r\n                  <Form.Check\r\n                    //ref={this.state.input}\r\n                    inline\r\n                    type='checkbox'\r\n                    value={question.id}\r\n                    onChange={questionSelectOnChangeHandler}\r\n                    checked={questionCart.has(question.id)}\r\n                  />\r\n                }\r\n                <span className='mr-2'>\r\n                  {index + 1 + pageSize * (currentPage - 1)}.\r\n                </span>\r\n                <Badge className='mr-2'>{question.title}</Badge>\r\n                <span>{question.qText}</span>\r\n                <Badge className='ml-2'>{question.qType}</Badge>\r\n                {question.generalFeedback && (\r\n                  <Badge className='ml-2'>\r\n                    GF: <FaRegCheckCircle className='ml-1' color='green' />\r\n                  </Badge>\r\n                )}\r\n                {question.stems[0].fbStem && (\r\n                  <Badge className='ml-2'>\r\n                    FbStem: <FaRegCheckCircle className='ml-1' color='green' />\r\n                  </Badge>\r\n                )}\r\n                <Badge className='ml-2'>Id No. {question.id}</Badge>\r\n                {tagObj?.book && <Badge>Book: {tagObj?.book}</Badge>}\r\n                {tagObj?.author && <Badge>Author: {tagObj?.author}</Badge>}\r\n                {tagObj?.operator && (\r\n                  <Badge>Operator: {tagObj?.operator}</Badge>\r\n                )}\r\n                {tagObj?.programme && (\r\n                  <Badge>\r\n                    Programme:{' '}\r\n                    {tagObj?.programme +\r\n                      '-' +\r\n                      tagObj?.session +\r\n                      '-' +\r\n                      tagObj?.year}\r\n                  </Badge>\r\n                )}\r\n                <span\r\n                  onMouseEnter={() => {\r\n                    showStemHandler(question.id)\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    showStemHandler(null)\r\n                  }}\r\n                >\r\n                  <FaChevronCircleDown />\r\n                </span>\r\n                {showStem === question.id && (\r\n                  <div className='question-stems-container'>\r\n                    <Table striped bordered hover variant='dark'>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>#</th>\r\n                          <th>qStem</th>\r\n                          <th>aStem</th>\r\n                          <th>fbSten</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {question.stems.map((stem, ind) => (\r\n                          <tr>\r\n                            <td>{ind + 1}</td>\r\n                            <td>{stem.qStem}</td>\r\n                            <td>{stem.aStem}</td>\r\n                            <td>{stem.fbStem}</td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </Table>\r\n                  </div>\r\n                )}\r\n                <span className='ml-2'>\r\n                  <a\r\n                    href={`/question?action=edit&questionId=${question.id}`}\r\n                    target='_blank'\r\n                    rel='noreferrer'\r\n                  >\r\n                    <FaEdit />\r\n                  </a>\r\n                </span>\r\n              </ListGroup.Item>\r\n            )\r\n          })}\r\n        </ListGroup>\r\n      </FormCheck>\r\n      <Pagination\r\n        itemsCount={filteredQuestionslength}\r\n        pageSize={pageSize}\r\n        currentPage={currentPage}\r\n        onPageHandler={onPageHandler}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","export const tagsToObj = (tagLine) => {\r\n  if (typeof tagLine !== 'string' || tagLine === '') return null\r\n  const tags = tagLine.split(',') // spliting comman seperated tags\r\n  const tagObj = {} // an exmpty tagObj\r\n  //iterating the tags\r\n  tags.forEach((tag) => {\r\n    //checking wheter tag has ':'\r\n    if (tag.includes(':')) {\r\n      const items = tag.split(':') // spliting by ':' --> Left used for key and right is the value\r\n      tagObj[items[0]] = items[1]\r\n    } else tagObj[tag.trim()] = tag.trim() // here key value is same\r\n  })\r\n  return tagObj\r\n}\r\n","import React from 'react'\r\nimport { Alert, Button, Form } from 'react-bootstrap'\r\n\r\nexport default function CopyPasteQuestionIds({\r\n  massQIdsHandler,\r\n  addToQuestionCartHandler,\r\n  questionCart\r\n}) {\r\n  function questionCartConvertToString() {\r\n    return Array.from(questionCart)\r\n      .map((qId) => qId)\r\n      .join(',')\r\n  }\r\n  return (\r\n    <div>\r\n      <div className='my-3'>\r\n        <Form>\r\n          <Form.Group controlId='massQIds'>\r\n            <Form.Label>\r\n              Enter Question's Ids (Comma seperated Values)\r\n            </Form.Label>\r\n            <Form.Control\r\n              type='text'\r\n              name=' massQIds'\r\n              placeholder='12,3,25,103,...'\r\n              onChange={massQIdsHandler}\r\n            />\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n\r\n      <div className='d-flex justify-content-center align-items-center'>\r\n        <Button\r\n          onClick={addToQuestionCartHandler}\r\n          className='mr-5 mb-2 mb-sm-0'\r\n        >\r\n          Add Comma Seperated Questions to Cart\r\n        </Button>\r\n      </div>\r\n      <div className='my-3'>\r\n        <Alert className='d-flex justify-content-between' variant='success'>\r\n          <span className='mr-3 overflow-auto'>\r\n            {Array.from(questionCart)\r\n              .map((qId) => qId)\r\n              .join(',')}\r\n          </span>\r\n          <Button\r\n            variant='primary'\r\n            onClick={() => {\r\n              navigator.clipboard.writeText(questionCartConvertToString())\r\n            }}\r\n          >\r\n            Copy\r\n          </Button>\r\n        </Alert>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Alert, Button, Col, Row } from 'react-bootstrap'\r\nimport { FaCopy, FaShoppingBasket } from 'react-icons/fa'\r\nimport { connect } from 'react-redux'\r\nimport ExamSpec from '../../components/examBuilder/examSpec'\r\nimport Filter from '../../components/examBuilder/filter'\r\nimport SelectedQuestionsPreview from '../../components/examBuilder/selectedQuestionsPreview'\r\nimport MetaInfo from '../../components/seo/metainfo'\r\nimport { RoutesConfig } from '../../config/routes.config'\r\nimport { fetchCategory } from '../../store/category'\r\nimport { fetchCourseLoader } from '../../store/courses'\r\nimport {\r\n  getQuestionByCategoryLoader,\r\n  getQuestionLoader\r\n} from '../../store/question'\r\nimport { paginate } from '../../utils/paginate'\r\nimport MultiSquareLoader from '../../components/customSpinner/multiSquare/multiSquareLoader'\r\nimport ExamBuilderAction from './component/examBuilderAction'\r\nimport QuestionList from './component/questionList'\r\nimport CopyPasteQuestionIds from './component/copyPasteQuestionIds'\r\nimport { withPageNumberQueryToRoute } from '../../utils/usePageNumberQueryToRoute'\r\n\r\nconst styles = {\r\n  questionCart: {\r\n    position: 'fixed',\r\n    bottom: '50px',\r\n    right: '20px',\r\n    width: '50px',\r\n    height: '35px',\r\n    zIndex: '99'\r\n  }\r\n}\r\n\r\nfunction getCategoryParamId(search) {\r\n  return new URLSearchParams(search, [search]).get('categoryId')\r\n}\r\nclass ExamPaper extends Component {\r\n  state = {\r\n    filteredQuestions: [], //questions filtered by filter section\r\n    questionCartshow: false, // show the question's cart modal\r\n    questionCart: new Set(), // the question cart\r\n    massQIds: [], //\r\n    pageSize: 10, //for paginate - amaount of questions per page\r\n    currentPage: 1, // for paginate - the current page number\r\n    qTypeState: 'all', // type of qTypeState at filter section - all, sba, matrix\r\n    search: null, // search text\r\n    searchRegxErrorMsg: null,\r\n    showStem: null, // show the stems of question\r\n    copyPasteShow: false // show the copyPasteQuestionIds element\r\n  }\r\n  static getDerivedStateFromProps(props, state) {\r\n    return {\r\n      currentPage: props.getPageNumberQueryValue\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    const categoryParamId = getCategoryParamId(this.props.location.search)\r\n    this.props.onFetchCategoryLoader()\r\n    this.props.onFetchCoursesLoader()\r\n    if (categoryParamId) {\r\n      this.props.onGetQuestionByCategoryLoader(categoryParamId)\r\n    } else {\r\n      this.props.onGetQuestionLoader()\r\n    }\r\n  }\r\n  componentDidUpdate(preProps) {\r\n    if (preProps.editExam !== this.props.editExam) {\r\n      this.setState({\r\n        questionCart: new Set(\r\n          this.props.editExam.questions.map((qId) => parseInt(qId))\r\n        )\r\n      })\r\n    }\r\n    if (preProps.question.questions !== this.props.question.questions) {\r\n      this.setState({\r\n        filteredQuestions: this.props.question.questions\r\n      })\r\n      this.questionsFilterMethod()\r\n    }\r\n  }\r\n\r\n  handleQuestionCartShow = () => {\r\n    //show question's cart modal show state\r\n    this.setState({ questionCartshow: true })\r\n  }\r\n  handleQuestionCartShowClose = () => {\r\n    //hide question's cart modal show state\r\n    this.setState({ questionCartshow: false })\r\n  }\r\n\r\n  //action to manipulate question at mass amount\r\n  actionHandleChange = (event) => {\r\n    const value = event.target.value\r\n    this.setState((state) => {\r\n      switch (value) {\r\n        case 'mAll':\r\n          this.state.filteredQuestions.forEach((q) =>\r\n            state.questionCart.add(q.id)\r\n          )\r\n          break\r\n        case 'uAll':\r\n          this.state.filteredQuestions.forEach((q) => {\r\n            state.questionCart.delete(q.id)\r\n          })\r\n          break\r\n        case 'mPQ':\r\n          paginate(\r\n            state.filteredQuestions,\r\n            state.currentPage,\r\n            state.pageSize\r\n          ).forEach((q) => {\r\n            state.questionCart.add(q.id)\r\n          })\r\n\r\n          break\r\n        case 'uPQ':\r\n          paginate(\r\n            state.filteredQuestions,\r\n            state.currentPage,\r\n            state.pageSize\r\n          ).forEach((q) => {\r\n            state.questionCart.delete(q.id)\r\n          })\r\n          break\r\n        default:\r\n          break\r\n      }\r\n      return { questionCart: state.questionCart }\r\n    })\r\n  }\r\n\r\n  removeQuestionsFromCartHandler = (ids) => {\r\n    if (ids) {\r\n      this.setState({ questionCart: new Set(ids) })\r\n    } else this.setState({ questionCart: new Set() })\r\n  }\r\n\r\n  categoryChangeHandler = ({ target }) => {\r\n    // the category controller\r\n    this.props.onGetQuestionByCategoryLoader(target.value)\r\n    this.setState({\r\n      currentPage: 1\r\n    })\r\n    this.props.history.replace(\r\n      `${this.props.location.pathname}?categoryId=${target.value}`\r\n    )\r\n  }\r\n\r\n  qTypeSwitchFilterHandler = ({ target }) => {\r\n    if (target.name === 'sbaOnly') {\r\n      if (target.checked) {\r\n        this.setState({ qTypeState: 'sba' })\r\n      } else {\r\n        this.setState({ qTypeState: 'all' })\r\n      }\r\n    } else {\r\n      if (target.checked) {\r\n        this.setState({ qTypeState: 'matrix' })\r\n      } else {\r\n        this.setState({ qTypeState: 'all' })\r\n      }\r\n    }\r\n    this.questionsFilterMethod()\r\n  }\r\n\r\n  searchFilterHandler = (text) => {\r\n    this.setState({\r\n      search: text,\r\n      searchRegxErrorMsg: null,\r\n      filteredQuestions: this.props.question.questions\r\n    })\r\n    this.questionsFilterMethod()\r\n  }\r\n\r\n  questionsFilterMethod = () => {\r\n    this.setState((state) => {\r\n      let filteredQuestions = []\r\n      //switch to change questions based on qType\r\n      switch (state.qTypeState) {\r\n        case 'sba':\r\n          filteredQuestions = state.filteredQuestions.filter(\r\n            (ques) => ques.qType === 'sba'\r\n          )\r\n          break\r\n        case 'matrix':\r\n          filteredQuestions = state.filteredQuestions.filter(\r\n            (ques) => ques.qType === 'matrix'\r\n          )\r\n          break\r\n        default:\r\n          filteredQuestions = this.props.question.questions\r\n          break\r\n      }\r\n\r\n      //switch to change questions based on search\r\n      if (state.search) {\r\n        try {\r\n          const rs = new RegExp(state.search, 'i')\r\n          filteredQuestions = filteredQuestions.filter((ques) =>\r\n            rs.test(ques.qText)\r\n          )\r\n        } catch (error) {\r\n          this.setState({ searchRegxErrorMsg: error.message })\r\n          console.log(error)\r\n        }\r\n      }\r\n      return { filteredQuestions: filteredQuestions }\r\n    })\r\n  }\r\n\r\n  onPageHandler = (page) => {\r\n    // for pagination\r\n    this.props.addPageNumberQueryValue(page)\r\n    this.setState({ currentPage: page })\r\n  }\r\n\r\n  render() {\r\n    const questions = paginate(\r\n      this.state.filteredQuestions,\r\n      this.state.currentPage,\r\n      this.state.pageSize\r\n    )\r\n\r\n    return (\r\n      <>\r\n        <MetaInfo {...RoutesConfig.ExamBuilder.metaInfo} />\r\n        {/* Preview questions cart section starts*/}\r\n        {this.state.questionCartshow && (\r\n          <SelectedQuestionsPreview\r\n            questionCart={this.state.questionCart}\r\n            removeQuestionsFromCartHandler={this.removeQuestionsFromCartHandler}\r\n            show={this.state.questionCartshow}\r\n            handleClose={this.handleQuestionCartShowClose}\r\n          />\r\n        )}\r\n        <div style={styles.questionCart}>\r\n          <Button\r\n            onClick={this.handleQuestionCartShow}\r\n            title='Questions Busket'\r\n          >\r\n            <FaShoppingBasket size={'2rem'} />\r\n          </Button>\r\n          <span\r\n            className='bg-danger text-white p-1 text-center'\r\n            style={{ position: 'absolute', top: '-15px', right: '-10px' }}\r\n          >\r\n            {this.state.questionCart.size}\r\n          </span>\r\n        </div>\r\n        {/* Preview questions cart section ends*/}\r\n\r\n        <Row>\r\n          <Col lg={4}>\r\n            <Alert variant={'primary'} className='text-center mt-3'>\r\n              Total number of Question is :{this.state.filteredQuestions.length}\r\n            </Alert>\r\n\r\n            <Filter\r\n              handleChange={this.categoryChangeHandler}\r\n              categories={this.props.category.categories}\r\n              categoryParamId={getCategoryParamId(this.props.location.search)}\r\n              handleSwitch={this.qTypeSwitchFilterHandler}\r\n              qTypeState={this.state.qTypeState}\r\n              handleSearch={this.searchFilterHandler}\r\n              searchRegxErrorMsg={this.state.searchRegxErrorMsg}\r\n            />\r\n            <ExamBuilderAction actionHandleChange={this.actionHandleChange} />\r\n            <ExamSpec\r\n              categories={this.props.category.categories}\r\n              courses={this.props.courses.courses}\r\n              selectedQuestionIds={Array.from(this.state.questionCart)}\r\n              editExamSpec={this.props.editExam}\r\n            />\r\n          </Col>\r\n          <Col lg={8}>\r\n            <div className='text-center mb-2'>\r\n              <FaCopy\r\n                size='1.4rem'\r\n                style={{ cursor: 'pointer' }}\r\n                onClick={() => {\r\n                  this.setState({ copyPasteShow: !this.state.copyPasteShow })\r\n                }}\r\n              />\r\n            </div>\r\n            {this.props.question.loading && <MultiSquareLoader />}\r\n            {this.state.copyPasteShow && (\r\n              <CopyPasteQuestionIds\r\n                massQIdsHandler={(e) => {\r\n                  this.setState({\r\n                    massQIds: e.target.value.split(',')\r\n                  })\r\n                }}\r\n                addToQuestionCartHandler={() => {\r\n                  this.setState((preState) => {\r\n                    this.state.massQIds.forEach((id) => {\r\n                      if (typeof parseInt(id) === 'number') {\r\n                        preState.questionCart.add(parseInt(id))\r\n                      }\r\n                    })\r\n                    return { questionCart: preState.questionCart }\r\n                  })\r\n                }}\r\n                questionCart={this.state.questionCart}\r\n              />\r\n            )}\r\n\r\n            <QuestionList\r\n              questions={questions}\r\n              showStem={this.state.showStem}\r\n              questionCartAddHandler={(value) => {\r\n                this.setState((preState) => ({\r\n                  questionCart: preState.questionCart.add(value)\r\n                }))\r\n              }}\r\n              questionCartDelHandler={(value) => {\r\n                this.setState((preState) => {\r\n                  // Set.delete() method returns boolean wheter it deletes or not\r\n                  if (preState.questionCart.delete(value)) {\r\n                    return { questionCart: preState.questionCart }\r\n                  }\r\n                })\r\n              }}\r\n              questionCart={this.state.questionCart}\r\n              showStemHandler={(value) => {\r\n                this.setState({ showStem: value })\r\n              }}\r\n              currentPage={this.state.currentPage}\r\n              pageSize={this.state.pageSize}\r\n              onPageHandler={this.onPageHandler}\r\n              filteredQuestionslength={this.state.filteredQuestions.length}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchCategoryLoader: () => dispatch(fetchCategory()),\r\n    onFetchCoursesLoader: () => dispatch(fetchCourseLoader()),\r\n    onGetQuestionLoader: () => dispatch(getQuestionLoader()),\r\n    onGetQuestionByCategoryLoader: (id) => {\r\n      if (id === 'top') {\r\n        dispatch(getQuestionLoader())\r\n      } else {\r\n        dispatch(getQuestionByCategoryLoader(id))\r\n      }\r\n    }\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.auth,\r\n    question: state.question,\r\n    category: state.category,\r\n    api: state.api,\r\n    courses: state.courses\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withPageNumberQueryToRoute(ExamPaper))\r\n","import Axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport ExamBuilder from './examBuilder'\r\n\r\nexport default function EditExam({ editExamId, editExamHandleClose }) {\r\n  const [exam, setExam] = useState(null)\r\n  useEffect(() => {\r\n    Axios.get(`${process.env.REACT_APP_SITE_URL}/exams/${editExamId}`)\r\n      .then((res) => {\r\n        setExam(res.data)\r\n      })\r\n      .catch((e) => console.log(e))\r\n  }, [editExamId])\r\n  return (\r\n    <div>\r\n      <Modal show={editExamId} onHide={editExamHandleClose} size='xl'>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <ExamBuilder editExam={exam} />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={editExamHandleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}