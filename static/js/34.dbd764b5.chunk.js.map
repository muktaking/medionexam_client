{"version":3,"sources":["config/routes.config.js","config/env.config.js","components/seo/metainfo.js","utils/queryRouter.js","../node_modules/react-bootstrap/esm/Table.js","components/result/timeline.js","container/reports/lineCharts.js","container/reports/pieCharts.js","container/reports/reports.js"],"names":["RoutesConfig","Home","metaInfo","title","description","Exams","Dashboard","Course","Reports","Profile","Settings","Category","Question","CourseBuilder","RoutineBuilder","ExamBuilder","ExamEdit","Login","Signup","AUTHOR_NAME","process","_defaultTitle","_defaultDescription","MetaInfo","meta","defer","lang","Helmet","htmlAttributes","titleTemplate","name","content","property","concat","useQuery","search","useLocation","React","useMemo","URLSearchParams","Table","forwardRef","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","createElement","_extends","responsiveClass","type","Timeline","useState","userDashExamInfo","setUserDashExamInfo","useEffect","axios","get","then","response","status","data","catch","e","console","log","userExamStat","map","examStat","examTitles","_","examType","marks","stat","value","averageScore","totalMark","lastAttemptTimes","Accordion","ind","Card","Header","Toggle","as","Button","eventKey","Badge","style","fontSize","Collapse","Body","id","key","data-date","moment","format","LineCharts","labels","dataSetFirst","dataSetSec","datasets","label","fill","borderColor","backgroundColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","min","max","PieCharts","hoverOffset","loading","setLoading","isActive","setIsActive","courses","setCourses","examStats","setExamStats","examDetails","setExamDetails","advancedAnalyTics","setAdvancedAnalyTics","showTimeline","setShowTimeline","examActivityStat","setExamActivityStat","query","userId","queryCourseId","res","courseSelectHandler","courseId","target","error","Row","Col","sm","Form","Control","custom","onChange","course","selected","Check","length","exams","examId","onClick","examTitle","score","reduce","previousValue","currentValue","Number","toFixed","attemptNumbers","to","colSpan","totalScore","totalWrongScore","totalPenaltyScore","totalRightStems","totalWrongStems","totalRightSbaQuestions","totalWrongSbaQuestions","attemptTime","i","singleQuestionMark","questions","questionStemLength"],"mappings":"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","file":"static/js/34.dbd764b5.chunk.js","sourcesContent":["export const RoutesConfig = {\r\n  Home: {\r\n    metaInfo: {\r\n      title: 'Online Exam Platform',\r\n      description:\r\n        'Online Exam Platform - participate into exam from anywhere anytime with extensive solve immediately. Question and answer is authentic with help of talented mentor.'\r\n    }\r\n  },\r\n  Exams: {\r\n    metaInfo: {\r\n      title: 'Lists Of Exams',\r\n      description:\r\n        'Lists of all available exams. Participate into the exams. Test your skill and find the gap.'\r\n    }\r\n  },\r\n  Dashboard: {\r\n    metaInfo: {\r\n      title: 'Dashboard',\r\n      description:\r\n        'Get all contents at one place. Your routine, reports, activity, featured & latest exam and many more.'\r\n    }\r\n  },\r\n  Course: {\r\n    metaInfo: {\r\n      title: 'Course',\r\n      description:\r\n        'Enroll for your desire courses and prepare for upcoming exams.'\r\n    }\r\n  },\r\n  Reports: {\r\n    metaInfo: {\r\n      title: 'Reports',\r\n      description:\r\n        'In depth reports all of your exam. Take a look and get the gap.'\r\n    }\r\n  },\r\n  Profile: {\r\n    metaInfo: {\r\n      title: 'Profile',\r\n      description: 'Update the profile and get a better user exprience.'\r\n    }\r\n  },\r\n  Settings: {\r\n    metaInfo: {\r\n      title: 'Settings'\r\n    }\r\n  },\r\n  Category: {\r\n    metaInfo: {\r\n      title: 'CategoryBuilder'\r\n    }\r\n  },\r\n  Question: {\r\n    metaInfo: {\r\n      title: 'QuestionBuilder'\r\n    }\r\n  },\r\n  CourseBuilder: {\r\n    metaInfo: {\r\n      title: 'CourseBuilder'\r\n    }\r\n  },\r\n  RoutineBuilder: {\r\n    metaInfo: {\r\n      title: 'RoutineBuilder'\r\n    }\r\n  },\r\n  ExamBuilder: {\r\n    metaInfo: {\r\n      title: 'ExamBuilder'\r\n    }\r\n  },\r\n  ExamEdit: {\r\n    metaInfo: {\r\n      title: 'ExamEdit'\r\n    }\r\n  },\r\n  Login: {\r\n    metaInfo: {\r\n      title: 'Login',\r\n      description: 'Login to access the app.'\r\n    }\r\n  },\r\n  Signup: {\r\n    metaInfo: {\r\n      title: 'Signup',\r\n      description: 'To use the app fully, You have to signup '\r\n    }\r\n  }\r\n}\r\n","export const APP_NAME = process.env.REACT_APP_NAME\r\nexport const DEFAULT_LOCALE = process.env.REACT_APP_LANG\r\nexport const BASE_URL = process.env.REACT_APP_BASE_URL\r\nexport const AUTHOR_NAME = process.env.REACT_APP_AUTHOR_NAME\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport {\r\n  APP_NAME,\r\n  AUTHOR_NAME,\r\n  BASE_URL,\r\n  DEFAULT_LOCALE\r\n} from '../../config/env.config'\r\nimport { RoutesConfig } from '../../config/routes.config'\r\n\r\nconst { title: _defaultTitle, description: _defaultDescription } =\r\n  RoutesConfig.Home.metaInfo\r\n\r\nconst MetaInfo = ({\r\n  meta = [],\r\n  defer = false,\r\n  lang = DEFAULT_LOCALE,\r\n  title = _defaultTitle,\r\n  description = _defaultDescription\r\n}) => (\r\n  <Helmet\r\n    defer={defer}\r\n    title={title}\r\n    htmlAttributes={{ lang }}\r\n    titleTemplate={`%s | ${APP_NAME}`}\r\n    meta={[\r\n      {\r\n        name: 'description',\r\n        content: description\r\n      },\r\n      {\r\n        property: 'og:description',\r\n        content: description\r\n      },\r\n      {\r\n        property: 'og:title',\r\n        content: title\r\n      },\r\n      {\r\n        property: 'og:type',\r\n        content: 'website'\r\n      },\r\n      {\r\n        property: 'og:image',\r\n        content: `${BASE_URL}/logo.png`\r\n      },\r\n      {\r\n        name: 'author',\r\n        content: AUTHOR_NAME\r\n      }\r\n    ].concat(meta)}\r\n  />\r\n)\r\n\r\nexport default MetaInfo\r\n","import React from 'react'\r\nimport { useLocation } from 'react-router'\r\n\r\nexport function useQuery() {\r\n  const { search } = useLocation()\r\n  return React.useMemo(() => new URLSearchParams(search), [search])\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;","import axios from 'axios'\r\nimport * as moment from 'dayjs'\r\nimport * as _ from 'lodash'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Accordion, Badge, Button, Card } from 'react-bootstrap'\r\nimport './timeline.css'\r\n\r\nconst type = [\r\n  'Assignment',\r\n  'Weekly',\r\n  'Monthly',\r\n  'Assesment',\r\n  'Term',\r\n  'Test',\r\n  'Final'\r\n]\r\n\r\nexport default function Timeline() {\r\n  const [userDashExamInfo, setUserDashExamInfo] = useState([])\r\n  useEffect(() => {\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/dashboard')\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          setUserDashExamInfo(response.data)\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }, [])\r\n\r\n  const userExamStat = userDashExamInfo.map((examStat) => {\r\n    return {\r\n      examTitles: _.map(examStat.userExamStat.examTitles, 'title'),\r\n      examType: _.map(examStat.userExamStat.examTitles, 'type'),\r\n      marks: _.map(\r\n        examStat.userExamStat.stat,\r\n        (value) => `Mark: ${value.averageScore} Out of ${value.totalMark}`\r\n      ),\r\n      lastAttemptTimes: _.map(examStat.userExamStat.stat, 'lastAttemptTime')\r\n    }\r\n  })\r\n\r\n  // const examTitles = userExamStat ? _.map(userExamStat.examTitles, 'title') : []\r\n  // const examType = userExamStat ? _.map(userExamStat.examTitles, 'type') : []\r\n  // const marks = userExamStat\r\n  //   ? _.map(\r\n  //       userExamStat.stat,\r\n  //       (value) => `Mark: ${value.averageScore} Out of ${value.totalMark}`\r\n  //     )\r\n  //   : []\r\n  // const lastAttemptTimes = userExamStat\r\n  //   ? _.map(userExamStat.stat, 'lastAttemptTime')\r\n  //   : []\r\n\r\n  return (\r\n    <Accordion>\r\n      {userExamStat.map(\r\n        ({ examTitles, examType, marks, lastAttemptTimes }, ind) => (\r\n          <Card>\r\n            <Card.Header>\r\n              <Accordion.Toggle as={Button} variant='link' eventKey={ind}>\r\n                Exams Under{' '}\r\n                <Badge variant='primary' style={{ fontSize: '1rem' }}>\r\n                  {userDashExamInfo[ind].title}\r\n                </Badge>{' '}\r\n                Course\r\n              </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey={ind}>\r\n              <Card.Body>\r\n                <div className='container'>\r\n                  <div className='row'>\r\n                    <div className='col-md-12'>\r\n                      <div className='card'>\r\n                        <div className='card-body'>\r\n                          <div id='content'>\r\n                            <ul className='timeline'>\r\n                              {examTitles.map((value, ind) => (\r\n                                <li\r\n                                  key={value}\r\n                                  className='event'\r\n                                  data-date={moment(\r\n                                    lastAttemptTimes[ind]\r\n                                  ).format('DD-MMM-YYYY, h:mm a')}\r\n                                >\r\n                                  <h3>{value}</h3>\r\n                                  <p className='text-danger'>\r\n                                    {type[examType[ind]]}\r\n                                  </p>\r\n                                  <p className='text-secondary'>{marks[ind]}</p>\r\n                                </li>\r\n                              ))}\r\n                            </ul>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        )\r\n      )}\r\n    </Accordion>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nexport default function LineCharts({ labels, dataSetFirst, dataSetSec }) {\r\n  const options = {\r\n    responsive: true, // Instruct chart js to respond nicely.\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            beginAtZero: false,\r\n            min: 0,\r\n            max: 100\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n  const data = {\r\n    labels: [...labels],\r\n    datasets: [\r\n      {\r\n        label: 'Score(Percentage)', // Name the series\r\n        data: [...dataSetFirst], // Specify the data values array\r\n        fill: false,\r\n        borderColor: '#2196f3', // Add custom color border (Line)\r\n        backgroundColor: '#2196f3', // Add custom color background (Points and Fill)\r\n        borderWidth: 3 // Specify bar border width\r\n      },\r\n      {\r\n        label: 'Wrong Score(Percentage)', // Name the series\r\n        data: [...dataSetSec], // Specify the data values array\r\n        fill: false,\r\n        borderColor: '#FF8C33', // Add custom color border (Line)\r\n        backgroundColor: '#FF8C33', // Add custom color background (Points and Fill)\r\n        borderWidth: 2 // Specify bar border width\r\n        //type: 'bar'\r\n      }\r\n    ]\r\n  }\r\n  return (\r\n    <>\r\n      <Line data={data} options={options} />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Pie } from 'react-chartjs-2'\r\n\r\nexport default function PieCharts({ labels, dataSetFirst }) {\r\n  const options = {\r\n    responsive: true // Instruct chart js to respond nicely.\r\n    // scales: {\r\n    //   yAxes: [\r\n    //     {\r\n    //       ticks: {\r\n    //         beginAtZero: false,\r\n    //         min: 0,\r\n    //         max: 100\r\n    //       }\r\n    //     }\r\n    //   ]\r\n    // }\r\n  }\r\n  const data = {\r\n    labels: [...labels],\r\n    datasets: [\r\n      {\r\n        label: 'Score(Percentage)', // Name the series\r\n        data: [...dataSetFirst], // Specify the data values array\r\n        backgroundColor: ['#2196f3', '#FF4533', '#706564'], // Add custom color background (Points and Fill)\r\n        hoverOffset: 4\r\n      }\r\n    ]\r\n  }\r\n  return (\r\n    <>\r\n      <Pie data={data} options={options} />\r\n    </>\r\n  )\r\n}\r\n","import axios from 'axios'\r\n//import moment from 'moment'\r\nimport * as moment from 'dayjs'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Badge, Button, Col, Form, Row, Table } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport Timeline from '../../components/result/timeline'\r\nimport MetaInfo from '../../components/seo/metainfo'\r\nimport { RoutesConfig } from '../../config/routes.config'\r\nimport LineCharts from './lineCharts'\r\nimport PieCharts from './pieCharts'\r\nimport CircleLoader from '../../components/customSpinner/circleLoader/circleLoader'\r\nimport { useQuery } from '../../utils/queryRouter'\r\n\r\nexport default function Reports() {\r\n  const [loading, setLoading] = useState(false)\r\n  const [isActive, setIsActive] = useState(null)\r\n  const [courses, setCourses] = useState([])\r\n  const [examStats, setExamStats] = useState([])\r\n  const [examDetails, setExamDetails] = useState(null)\r\n  const [advancedAnalyTics, setAdvancedAnalyTics] = useState(false)\r\n  const [showTimeline, setShowTimeline] = useState(false)\r\n  // const [examTitle, setExamTitle] = useState('')\r\n  // const [examTotalMark, setExamTotalMark] = useState(0)\r\n  const [examActivityStat, setExamActivityStat] = useState([])\r\n  let query = useQuery()\r\n  const userId = query.get('userId')\r\n  const queryCourseId = query.get('courseId')\r\n\r\n  useEffect(() => {\r\n    //admin uses userId to get respective user's reports\r\n    if (userId) {\r\n      axios\r\n        .get(\r\n          process.env.REACT_APP_SITE_URL + '/courses/enrolled/courses/' + userId\r\n        )\r\n        .then((res) => {\r\n          setCourses(res.data)\r\n        })\r\n        .catch((e) => {\r\n          console.log(e)\r\n        })\r\n      return\r\n    }\r\n    //will get all courses enrolled by user's\r\n    if (queryCourseId) {\r\n      courseSelectHandler(null, queryCourseId)\r\n    }\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/courses/enrolled/courses')\r\n      .then((res) => {\r\n        setCourses(res.data)\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }, [])\r\n\r\n  const courseSelectHandler = (e, courseId = null) => {\r\n    setLoading(true)\r\n    //userId will used for admin to get respective user's reports; then, couseId to get only specific course's reports\r\n    axios\r\n      .get(\r\n        process.env.REACT_APP_SITE_URL +\r\n          '/userExamProfile/courses/' +\r\n          (userId\r\n            ? `${userId}_${e.target.value}`\r\n            : courseId\r\n            ? courseId\r\n            : e.target.value)\r\n      )\r\n      .then((res) => {\r\n        //console.log(res.data)\r\n        setLoading(false)\r\n        setExamStats(res.data)\r\n        setExamDetails(null)\r\n        setAdvancedAnalyTics(false)\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  const getExamDetailsById = (examId, courseId) => {\r\n    setLoading(true)\r\n    axios\r\n      .get(\r\n        process.env.REACT_APP_SITE_URL +\r\n          '/exams/reports/filterby?examId=' +\r\n          examId +\r\n          '&courseId=' +\r\n          courseId\r\n      )\r\n      .then((res) => {\r\n        //console.log(res.data)\r\n        setLoading(false)\r\n        setExamDetails(res.data)\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <MetaInfo {...RoutesConfig.Reports.metaInfo} />\r\n      {loading && <CircleLoader />}\r\n      <h3>Reports</h3>\r\n      <Row>\r\n        <Col sm={3}>\r\n          <Form.Control\r\n            as='select'\r\n            className='mr-sm-2'\r\n            id='inlineFormCustomSelect'\r\n            custom\r\n            onChange={courseSelectHandler}\r\n          >\r\n            <option>Select Course</option>\r\n            {courses.map((course) => (\r\n              <option\r\n                selected={queryCourseId && queryCourseId}\r\n                value={course.id}\r\n              >\r\n                {course.title}\r\n              </option>\r\n            ))}\r\n          </Form.Control>\r\n\r\n          <p className='mt-4 mr-1 pl-3'>\r\n            <span className='text-info'>Steps</span>\r\n            <br />\r\n            <span>1. First Select A Course</span>\r\n            <br />\r\n            <span>2. Then click on any</span>{' '}\r\n            <Badge variant='info' className='px-3 py-1 text-info'>\r\n              -\r\n            </Badge>{' '}\r\n            <span>colored 'Exam Title' cell to get details</span>\r\n            <br />\r\n            <span>\r\n              3. Switched to 'Advanced Analytics' to get in depth view\r\n            </span>\r\n          </p>\r\n          <hr />\r\n          <div>\r\n            <p>More Options</p>\r\n            <Form.Check\r\n              type='switch'\r\n              id='custom-switch-timeline'\r\n              label='Show Timeline'\r\n              onChange={() => {\r\n                setShowTimeline(!showTimeline)\r\n              }}\r\n            />\r\n          </div>\r\n        </Col>\r\n        <Col sm={9}>\r\n          {showTimeline && (\r\n            <div className='mb-3'>\r\n              <h4>\r\n                Timeline <Badge>(Click title to expand)</Badge>\r\n              </h4>\r\n              <Timeline />\r\n              <hr />\r\n            </div>\r\n          )}\r\n          <h4>Exams Reports</h4>\r\n          <Table striped bordered hover responsive size='sm'>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>Exam Title</th>\r\n                <th>Avg Score</th>\r\n                <th>Total Mark</th>\r\n                <th>Attempt</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {examStats.length > 0 &&\r\n              examStats[0].courses.length > 0 &&\r\n              examStats[0].courses[0].exams.length > 0 ? (\r\n                examStats[0].courses[0].exams.map((examStat, ind) => (\r\n                  <tr\r\n                    className={\r\n                      isActive === examStat.examId ? 'bg-info text-white' : ''\r\n                    }\r\n                  >\r\n                    <td>{ind + 1}</td>\r\n                    <td\r\n                      onClick={() => {\r\n                        setIsActive(examStat.examId)\r\n                        getExamDetailsById(\r\n                          examStat.examId,\r\n                          examStats[0].courses[0].id\r\n                        )\r\n                        // setExamTitle(examStat.examTitle)\r\n                        // setExamTotalMark(examStat.totalMark)\r\n                        setExamActivityStat(examStat.examActivityStat)\r\n                      }}\r\n                      className='bg-info text-white'\r\n                    >\r\n                      {examStat.examTitle}\r\n                    </td>\r\n                    <td>\r\n                      {(\r\n                        examStat.score.reduce(\r\n                          (previousValue, currentValue) =>\r\n                            Number(previousValue) + Number(currentValue)\r\n                        ) / examStat.score.length\r\n                      ).toFixed(2)}\r\n                    </td>\r\n                    <td>{examStat.totalMark}</td>\r\n                    <td>{examStat.attemptNumbers}</td>\r\n                    <td>\r\n                      <div className='mb-1'>\r\n                        <Link\r\n                          to={`/reports/actions?courseId=${examStats[0].courses[0].courseId}&examId=${examStat.examId}&answers=0`}\r\n                        >\r\n                          <Button size='sm'>Questions</Button>\r\n                        </Link>\r\n                      </div>\r\n                      <div>\r\n                        <Link\r\n                          to={`/reports/actions?courseId=${examStats[0].courses[0].courseId}&examId=${examStat.examId}&answers=1`}\r\n                        >\r\n                          <Button size='sm'>Answers</Button>\r\n                        </Link>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan={7} className='text-danger text-center'>\r\n                    You do not take part any exam under the course.\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </Table>\r\n          <div className='bg-light pl-3 py-2 my-3'>\r\n            {examDetails && (\r\n              <>\r\n                <h3 className='text-center text-info my-2'>\r\n                  In Depth about: {examDetails.title}{' '}\r\n                </h3>\r\n                <Form.Check\r\n                  type='switch'\r\n                  id='custom-switch'\r\n                  label='Advanced Analytics'\r\n                  onChange={() => {\r\n                    setAdvancedAnalyTics(!advancedAnalyTics)\r\n                  }}\r\n                />\r\n                <Table striped bordered hover responsive className='mt-2'>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>#</th>\r\n                      <th>Score</th>\r\n                      <th>Wrong Score</th>\r\n                      <th>Penalty Score</th>\r\n                      <th>Total Right Stems Number</th>\r\n                      <th>Total Wrong Stems Number</th>\r\n                      <th>Total Right Sba Questions (only Sba) </th>\r\n                      <th>Total Wrong Sba Questions (only Sba) </th>\r\n                      <th>Attempt Time</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {examActivityStat.map((stat, ind) => (\r\n                      <tr>\r\n                        <td>{ind + 1}</td>\r\n                        <td>{stat.totalScore}</td>\r\n                        <td>{stat.totalWrongScore}</td>\r\n                        <td>{stat.totalPenaltyScore}</td>\r\n                        <td>{stat.totalRightStems}</td>\r\n                        <td>{stat.totalWrongStems}</td>\r\n                        <td>{stat.totalRightSbaQuestions}</td>\r\n                        <td>{stat.totalWrongSbaQuestions}</td>\r\n                        <td>\r\n                          {moment(stat.attemptTime).format(\r\n                            'DD-MMM-YYYY, h:mm a'\r\n                          )}\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </Table>\r\n                <p className='text-center'>Table: Summary View</p>\r\n                <hr />\r\n                {advancedAnalyTics && (\r\n                  <>\r\n                    <h5>Score Analytics</h5>\r\n                    <LineCharts\r\n                      labels={examActivityStat.map(\r\n                        (stat, i) => `Attempt No.${i + 1}`\r\n                      )}\r\n                      dataSetFirst={examActivityStat.map((stat) =>\r\n                        (\r\n                          (stat.totalScore * 100) /\r\n                          (examDetails.singleQuestionMark *\r\n                            examDetails.questions.length)\r\n                        ).toFixed(2)\r\n                      )}\r\n                      dataSetSec={examActivityStat.map((stat) =>\r\n                        (\r\n                          (stat.totalWrongScore * 100) /\r\n                          (examDetails.singleQuestionMark *\r\n                            examDetails.questions.length)\r\n                        ).toFixed(2)\r\n                      )}\r\n                    />\r\n                    <p className='text-center'>Fig: Score Analytics</p>\r\n                    <hr />\r\n                    <div>\r\n                      <h5>Stems Analytics</h5>\r\n                      <div className='row'>\r\n                        {examActivityStat.map((stat) => (\r\n                          <div className='col-lg-6 col-md-12 mb-3'>\r\n                            <PieCharts\r\n                              labels={['Right', 'Wrong', 'UnTouched']}\r\n                              dataSetFirst={[\r\n                                stat.totalRightStems,\r\n                                stat.totalWrongStems,\r\n                                examDetails.questionStemLength *\r\n                                  examDetails.questions.length -\r\n                                  (stat.totalRightStems + stat.totalWrongStems)\r\n                              ]}\r\n                            />\r\n                            <p className='text-center'>\r\n                              Fig: Stems Analytics at\r\n                              {' ' +\r\n                                moment(stat.attemptTime).format(\r\n                                  'DD-MMM-YY, h:mm a'\r\n                                )}\r\n                            </p>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}