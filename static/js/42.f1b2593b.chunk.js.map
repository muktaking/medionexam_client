{"version":3,"sources":["../node_modules/react-bootstrap/esm/ListGroupItem.js","../node_modules/react-bootstrap/esm/ListGroup.js","../node_modules/react-bootstrap/esm/PageItem.js","../node_modules/react-bootstrap/esm/Pagination.js","components/pagination/pagination.jsx","components/examBuilder/card/card.jsx","components/examBuilder/examSpec.jsx","components/examBuilder/filter.jsx","components/examBuilder/selectedQuestionsPreview.jsx","container/examBuilder/examBuilder.js","container/examBuilder/editExam.js"],"names":["ListGroupItem","React","forwardRef","_ref","ref","bsPrefix","active","disabled","className","variant","action","as","eventKey","onClick","props","_objectWithoutPropertiesLoose","useBootstrapPrefix","handleClick","useCallback","event","preventDefault","stopPropagation","createElement","AbstractNavItem","_extends","makeEventKey","href","classNames","defaultProps","displayName","ListGroup","horizontalVariant","_useUncontrolled","useUncontrolled","activeKey","horizontal","_useUncontrolled$as","controlledProps","AbstractNav","Item","PageItem","style","activeLabel","children","Component","SafeAnchor","createButton","name","defaultValue","label","_class","_temp","_React$Component","apply","this","arguments","_inheritsLoose","prototype","render","_this$props","First","Prev","Ellipsis","Next","Last","Pagination","size","decoratedBsPrefix","pagination","itemsCount","pageSize","onPageHandler","currentPage","pageCount","Math","ceil","items","number","push","key","width","height","card","header","headerBgColor","showHeader","Card","Header","Body","centeredStyle","position","top","left","transform","zIndex","ExamSpec","categories","courses","selectedQuestionIds","editExamSpec","useState","hideMsg","setHideMsg","Date","startDate","setStartDate","endDate","setEndDate","forceEditTime","setForceEditTime","dispatch","useDispatch","loading","useSelector","state","examPaper","successMsg","success","errorMsg","error","initialValues","title","type","toString","description","categoryType","categoryIds","courseType","courseIds","singleQuestionMark","questionStemLength","penaltyMark","timeLimit","useEffect","Spinner","animation","role","validate","onSubmit","onSubmitHandler","id","enableReinitialize","errors","handleChange","handleSubmit","values","Alert","onClose","dismissible","questions","length","JSON","stringify","Form","Group","controlId","Label","Control","placeholder","onChange","value","multiple","map","categorySlug","slug","replace","selected","date","showTimeSelect","minDate","dateFormat","color","Text","Button","editExamId","onLoadingLoader","postExamProfile","alert","validator","isLength","min","max","isInt","isNumeric","filter","handleSwitch","qTypeState","Check","SelectedQuestionsPreview","selectedQuestions","selectedQuestionsHandler","question","index","qText","Badge","cursor","ExamPaper","show","massQIds","handleShow","setState","handleClose","checkHandleChange","e","isChecked","target","checked","actionHandleChange","forEach","paginate","onGetQuestionByCategoryLoader","page","onFetchCategoryLoader","onFetchCoursesLoader","onGetQuestionLoader","preProps","editExam","editQuestions","q","quesByQType","ques","qType","checkedQuestionIds","Object","keys","isNaN","RoutesConfig","ExamBuilder","metaInfo","Modal","onHide","closeButton","Title","Footer","bottom","right","Row","Col","lg","category","FormCheck","inline","generalFeedback","stems","fbStem","split","join","navigator","clipboard","writeText","connect","auth","api","fetchCategory","fetchCourseLoader","getQuestionLoader","getQuestionByCategoryLoader","EditExam","editExamHandleClose","exam","setExam","Axios","get","process","then","res","data","catch","console","log"],"mappings":"6GAAA,gFAYIA,EAAgBC,IAAMC,YAAW,SAAUC,EAAMC,GACnD,IAAIC,EAAWF,EAAKE,SAChBC,EAASH,EAAKG,OACdC,EAAWJ,EAAKI,SAChBC,EAAYL,EAAKK,UACjBC,EAAUN,EAAKM,QACfC,EAASP,EAAKO,OACdC,EAAKR,EAAKQ,GACVC,EAAWT,EAAKS,SAChBC,EAAUV,EAAKU,QACfC,EAAQC,YAA8BZ,EAAM,CAAC,WAAY,SAAU,WAAY,YAAa,UAAW,SAAU,KAAM,WAAY,YAEvIE,EAAWW,YAAmBX,EAAU,mBACxC,IAAIY,EAAcC,uBAAY,SAAUC,GACtC,GAAIZ,EAGF,OAFAY,EAAMC,sBACND,EAAME,kBAIJR,GAASA,EAAQM,KACpB,CAACZ,EAAUM,IACd,OAAOZ,IAAMqB,cAAcC,IAAiBC,YAAS,CACnDpB,IAAKA,GACJU,EAAO,CACRF,SAAUa,YAAab,EAAUE,EAAMY,MAEvCf,GAAIA,IAAOD,EAASI,EAAMY,KAAO,IAAM,SAAW,OAClDb,QAASI,EACTT,UAAWmB,IAAWnB,EAAWH,EAAUC,GAAU,SAAUC,GAAY,WAAYE,GAAWJ,EAAW,IAAMI,EAASC,GAAUL,EAAW,iBAGrJL,EAAc4B,aArCK,CACjBnB,QAAS,KACTH,QAAQ,EACRC,UAAU,GAmCZP,EAAc6B,YAAc,gBACb7B,O,iCC9Cf,kGAaI8B,EAAY7B,IAAMC,YAAW,SAAUY,EAAOV,GAChD,IAYI2B,EAZAC,EAAmBC,YAAgBnB,EAAO,CAC5CoB,UAAW,aAET1B,EAAYwB,EAAiBxB,UAC7BH,EAAW2B,EAAiB3B,SAC5BI,EAAUuB,EAAiBvB,QAC3B0B,EAAaH,EAAiBG,WAC9BC,EAAsBJ,EAAiBrB,GACvCA,OAA6B,IAAxByB,EAAiC,MAAQA,EAC9CC,EAAkBtB,YAA8BiB,EAAkB,CAAC,YAAa,WAAY,UAAW,aAAc,OAYzH,OAVA3B,EAAWW,YAAmBX,EAAU,cAItC0B,EADEI,GACiC,IAAfA,EAAsB,aAAe,cAAgBA,EAErD,KAIflC,IAAMqB,cAAcgB,IAAad,YAAS,CAC/CpB,IAAKA,GACJiC,EAAiB,CAClB1B,GAAIA,EACJH,UAAWmB,IAAWnB,EAAWH,EAAUI,GAAWJ,EAAW,IAAMI,EAASsB,GAAqB1B,EAAW,IAAM0B,SAG1HD,EAAUF,aAjCS,CACjBnB,QAAS,KACT0B,WAAY,MAgCdL,EAAUD,YAAc,YACxBC,EAAUS,KAAOvC,IACF8B,O,gHChCXU,EAAWvC,IAAMC,YAAW,SAAUC,EAAMC,GAC9C,IAAIE,EAASH,EAAKG,OACdC,EAAWJ,EAAKI,SAChBC,EAAYL,EAAKK,UACjBiC,EAAQtC,EAAKsC,MACbC,EAAcvC,EAAKuC,YACnBC,EAAWxC,EAAKwC,SAChB7B,EAAQC,YAA8BZ,EAAM,CAAC,SAAU,WAAY,YAAa,QAAS,cAAe,aAExGyC,EAAYtC,GAAUC,EAAW,OAASsC,IAC9C,OAAO5C,IAAMqB,cAAc,KAAM,CAC/BlB,IAAKA,EACLqC,MAAOA,EACPjC,UAAWmB,IAAWnB,EAAW,YAAa,CAC5CF,OAAQA,EACRC,SAAUA,KAEXN,IAAMqB,cAAcsB,EAAWpB,YAAS,CACzChB,UAAW,YACXD,SAAUA,GACTO,GAAQ6B,EAAUrC,GAAUoC,GAAezC,IAAMqB,cAAc,OAAQ,CACxEd,UAAW,WACVkC,QAELF,EAASZ,aA7BU,CACjBtB,QAAQ,EACRC,UAAU,EACVmC,YAAa,aA2BfF,EAASX,YAAc,WACRW,QAEf,SAASM,EAAaC,EAAMC,EAAcC,GACxC,IAAIC,EAAQC,EAMZ,YAJc,IAAVF,IACFA,EAAQF,GAGHI,EAAQD,EAEf,SAAUE,GAGR,SAASF,IACP,OAAOE,EAAiBC,MAAMC,KAAMC,YAAcD,KAkBpD,OArBAE,YAAeN,EAAQE,GAMVF,EAAOO,UAEbC,OAAS,WACd,IAAIC,EAAcL,KAAKxC,MACnB6B,EAAWgB,EAAYhB,SACvB7B,EAAQC,YAA8B4C,EAAa,CAAC,aAGxD,cADO7C,EAAMR,OACNL,IAAMqB,cAAckB,EAAU1B,EAAOb,IAAMqB,cAAc,OAAQ,CACtE,cAAe,QACdqB,GAAYK,GAAe/C,IAAMqB,cAAc,OAAQ,CACxDd,UAAW,WACVyC,KAGEC,EAtBT,CAuBEjD,IAAM2C,WAAYM,EAAOrB,YAAckB,EAAMI,EAG1C,IAAIS,EAAQd,EAAa,QAAS,QAC9Be,EAAOf,EAAa,OAAQ,SAAK,YACjCgB,EAAWhB,EAAa,WAAY,SAAK,QACzCiB,EAAOjB,EAAa,OAAQ,UAC5BkB,EAAOlB,EAAa,OAAQ,QCjEnCmB,EAAahE,IAAMC,YAAW,SAAUC,EAAMC,GAChD,IAAIC,EAAWF,EAAKE,SAChBG,EAAYL,EAAKK,UACjBmC,EAAWxC,EAAKwC,SAChBuB,EAAO/D,EAAK+D,KACZpD,EAAQC,YAA8BZ,EAAM,CAAC,WAAY,YAAa,WAAY,SAElFgE,EAAoBnD,YAAmBX,EAAU,cACrD,OAAOJ,IAAMqB,cAAc,KAAME,YAAS,CACxCpB,IAAKA,GACJU,EAAO,CACRN,UAAWmB,IAAWnB,EAAW2D,EAAmBD,GAAQC,EAAoB,IAAMD,KACpFvB,MAENsB,EAAWL,MAAQA,EACnBK,EAAWJ,KAAOA,EAClBI,EAAWH,SAAWA,EACtBG,EAAW1B,KAAOC,EAClByB,EAAWF,KAAOA,EAClBE,EAAWD,KAAOA,EACHC,QCNAG,IA1BI,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,WAAYC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YACnDC,EAAYC,KAAKC,KAAKN,EAAaC,GACzC,GAAkB,IAAdG,EAAiB,OAAO,KAE5B,IADA,IAAMG,EAAQ,GAH6D,WAIlEC,GACPD,EAAME,KACJ,kBAAC,EAAWvC,KAAZ,CACEwC,IAAKF,EACLhE,QAAS,WACP0D,EAAcM,IAEhBvE,OAAQuE,IAAWL,EACnBhE,UAAU,wBACViC,MAAO,CAAEuC,MAAO,OAAQC,OAAQ,SAE/BJ,KAXEA,EAAS,EAAGA,GAAUJ,EAAWI,IAAW,EAA5CA,GAeT,OACE,kBAAC,EAAD,CAAYrE,UAAU,uDACnBoE,M,+SCNQM,EAfF,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,OAAQxC,EAA0C,EAA1CA,SAAUyC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WAC/C,OACE,kBAACC,EAAA,EAAD,CAAM9E,UAAU,QACb6E,GACC,kBAACC,EAAA,EAAKC,OAAN,CACE/E,UAAW,mCAAqC4E,GAE/CD,GAGL,kBAACG,EAAA,EAAKE,KAAN,KAAY7C,MCDZ8C,EAAgB,CAEpBC,SAAU,QACVC,IAAK,MACLC,KAAM,MAENC,UAAW,wBACXC,OAAQ,QA8RKC,EA3RE,SAAC,GAKX,IAJLC,EAII,EAJJA,WACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,oBACAC,EACI,EADJA,aACI,EAC0BC,oBAAS,GADnC,mBACGC,EADH,KACYC,EADZ,OAE8BF,mBAAS,IAAIG,MAF3C,mBAEGC,EAFH,KAEcC,EAFd,OAG0BL,mBAAS,IAAIG,MAHvC,mBAGGG,EAHH,KAGYC,EAHZ,OAIsCP,oBAAS,GAJ/C,mBAIGQ,EAJH,KAIkBC,EAJlB,KAKEC,EAAWC,cACXC,EAAUC,aAAY,SAACC,GAAD,OAAWA,EAAMC,UAAUH,WACjDI,EAAaH,aAAY,SAACC,GAAD,OAAWA,EAAMC,UAAUE,WACpDC,EAAWL,aAAY,SAACC,GAAD,OAAWA,EAAMC,UAAUI,SAClDC,EAAgB,CACpBC,MAAOtB,EAAeA,EAAasB,MAAQ,GAC3CC,KAAMvB,EAAeA,EAAauB,KAAKC,WAAa,IACpDC,YAAazB,EAAeA,EAAayB,YAAc,GACvDC,aAAc1B,EAAeA,EAAa2B,YAAc,GACxDC,WAAY5B,EAAeA,EAAa6B,UAAY,GACpDC,mBAAoB9B,EAChBA,EAAa8B,mBAAmBN,WAChC,IACJO,mBAAoB/B,EAChBA,EAAa+B,mBAAmBP,WAChC,IACJQ,YAAahC,EAAeA,EAAagC,YAAYR,WAAa,IAClES,UAAWjC,EAAeA,EAAaiC,UAAUT,WAAa,MAUhE,OAPAU,qBAAU,WACJlC,IACFM,EAAa,IAAIF,KAAKJ,EAAaK,YACnCG,EAAW,IAAIJ,KAAKJ,EAAaO,aAElC,CAACP,IAGF,oCACGa,GACC,kBAACsB,EAAA,EAAD,CACEC,UAAU,SACVC,KAAK,SACL/H,QAAQ,OACRD,UAAU,mBAGd,kBAAC,IAAD,CACEgH,cAAeA,EACfiB,SAAUA,EACVC,SAAUC,EACRnC,EACAE,EACAR,EACAY,EACAR,EACAH,GAAgBA,EAAayC,IAE/BC,oBAAkB,IAEjB,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,aAAcC,EAAvC,EAAuCA,OAAvC,OACC,kBAAC,EAAD,CAAU9D,OAAO,qBAAqBE,YAAY,GAC/CgB,GAAWe,GACV,kBAAC8B,EAAA,EAAD,CACEzI,QAAS,UACTD,UAAU,cACViC,MAAOgD,EACP0D,QAAS,kBAAM7C,GAAW,IAC1B8C,aAAW,GAEVhC,EAAWK,MACV,aACAL,EAAWQ,YACX,aACAR,EAAWiC,UAAUC,OACrB,cAGLjD,GAAWiB,GACV,kBAAC4B,EAAA,EAAD,CACEzI,QAAS,UACTD,UAAU,cACViC,MAAOgD,EACP0D,QAAS,kBAAM7C,GAAW,IAC1B8C,aAAW,GAEVG,KAAKC,UAAUlC,IAGpB,kBAACmC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,SACpB,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CACEnC,KAAK,OACLoC,YAAY,cACZ/G,KAAK,QACLgH,SAAUhB,EACViB,MAAOf,EAAOxB,SAGjBqB,EAAOrB,MACN,yBAAKjH,UAAU,sBAAsBsI,EAAOrB,OAC1C,KACJ,kBAACgC,EAAA,EAAKC,MAAN,CAAYC,UAAU,QACpB,kBAACF,EAAA,EAAKG,MAAN,kBACA,kBAACH,EAAA,EAAKI,QAAN,CACElJ,GAAG,SACHoC,KAAK,OACLiH,MAAOf,EAAOvB,KACdqC,SAAUhB,GAEV,4BAAQiB,MAAM,KAAd,cACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,WAGJ,kBAACP,EAAA,EAAKC,MAAN,CAAYC,UAAU,gBACpB,kBAACF,EAAA,EAAKG,MAAN,sBACA,kBAACH,EAAA,EAAKI,QAAN,CACElJ,GAAG,SACHsJ,UAAQ,EACRlH,KAAK,eACLgH,SAAUhB,EACViB,MAAOf,EAAOpB,cALhB,4FAWG7B,EAAWkE,KAAI,SAACF,GAEf,IAAIG,EAAeH,EAAMI,KAAKC,QAAQ,KAAM,OAC5C,MAAmB,kBAAfL,EAAMjH,KACD,4BAAQiH,MAAOA,EAAMpB,IAAKuB,GACvB,0CAKlB,kBAACV,EAAA,EAAKC,MAAN,CAAYC,UAAU,cACpB,kBAACF,EAAA,EAAKG,MAAN,oBACA,kBAACH,EAAA,EAAKI,QAAN,CACElJ,GAAG,SACHsJ,UAAQ,EACRlH,KAAK,aACLgH,SAAUhB,EACViB,MAAOf,EAAOlB,YALhB,4FAWG9B,GACCA,EAAQiE,KAAI,SAACF,GAAD,OACV,4BAAQA,MAAOA,EAAMpB,IAAKoB,EAAMvC,YAKxC,kBAACgC,EAAA,EAAKC,MAAN,CAAYC,UAAU,eACpB,kBAACF,EAAA,EAAKG,MAAN,oBACA,kBAACH,EAAA,EAAKI,QAAN,CACEnC,KAAK,WACLoC,YAAY,cACZ/G,KAAK,cACLgH,SAAUhB,EACViB,MAAOf,EAAOrB,eAGjBkB,EAAOlB,YACN,yBAAKpH,UAAU,sBAAsBsI,EAAOlB,aAC1C,KACJ,6BACE,yBAAKpH,UAAU,QACb,yCACA,kBAAC,IAAD,CACE8J,SAAU9D,EACVuD,SAAU,SAACQ,GAAD,OAAU9D,EAAa8D,IACjCC,gBAAc,EACdC,QACEtE,EAAe,KAAOS,EAAgB,KAAO,IAAIL,KAEnDmE,WAAW,OAEb,kBAAC,IAAD,CAAkBxG,KAAK,YAEzB,yBAAK1D,UAAU,QACb,uCACA,kBAAC,IAAD,CACE8J,SAAU5D,EACVqD,SAAU,SAACQ,GAAD,OAAU5D,EAAW4D,IAC/BC,gBAAc,EACdC,QACEtE,EAAe,KAAOS,EAAgB,KAAO,IAAIL,KAEnDmE,WAAW,OAEb,kBAAC,IAAD,CAAkBxG,KAAK,YAEzB,2BACE,kBAAC,IAAD,CACEyG,MAAM,MACN9J,QAAS,WACPgG,GAAkBD,QAK1B,kBAAC6C,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBACpB,kBAACF,EAAA,EAAKG,MAAN,6BACA,kBAACH,EAAA,EAAKI,QAAN,CACEnC,KAAK,OACLoC,YAAY,IACZ/G,KAAK,qBACLgH,SAAUhB,EACViB,MAAOf,EAAOhB,qBAEhB,kBAACwB,EAAA,EAAKmB,KAAN,CAAWpK,UAAU,cAArB,8DAIDsI,EAAOb,mBACN,yBAAKzH,UAAU,sBACZsI,EAAOb,oBAER,KACJ,kBAACwB,EAAA,EAAKC,MAAN,CAAYC,UAAU,sBACpB,kBAACF,EAAA,EAAKG,MAAN,6BACA,kBAACH,EAAA,EAAKI,QAAN,CACEnC,KAAK,OACLoC,YAAY,IACZ/G,KAAK,qBACLgH,SAAUhB,EACViB,MAAOf,EAAOf,sBAGjBY,EAAOZ,mBACN,yBAAK1H,UAAU,sBACZsI,EAAOZ,oBAER,KACJ,kBAACuB,EAAA,EAAKC,MAAN,CAAYC,UAAU,eACpB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CACEnC,KAAK,OACLoC,YAAY,IACZ/G,KAAK,cACLgH,SAAUhB,EACViB,MAAOf,EAAOd,cAEhB,kBAACsB,EAAA,EAAKmB,KAAN,CAAWpK,UAAU,cAArB,0DAIDsI,EAAOX,YACN,yBAAK3H,UAAU,sBAAsBsI,EAAOX,aAC1C,KACJ,kBAACsB,EAAA,EAAKC,MAAN,CAAYC,UAAU,aACpB,kBAACF,EAAA,EAAKG,MAAN,4BACA,kBAACH,EAAA,EAAKI,QAAN,CACEnC,KAAK,OACLoC,YAAY,KACZ/G,KAAK,YACLiH,MAAOf,EAAOb,UACd2B,SAAUhB,KAGbD,EAAOV,UACN,yBAAK5H,UAAU,sBAAsBsI,EAAOV,WAC1C,MAEN,kBAACyC,EAAA,EAAD,CAAQhK,QAASmI,GAAjB,iBAUZ,SAASL,EACPnC,EACAE,EACAR,EACAY,EACAR,EACAwE,GAEA,OAAO,SAAC7B,GACF/C,EAAoBoD,OAAS,GAC/BL,EAAOzC,UAAYA,EACnByC,EAAOvC,QAAUA,EACjBI,EAASiE,eACTzE,GAAW,GACXQ,EAASkE,YAAgB/B,EAAQ/C,EAAqB4E,KAEtDG,MAAM,kCAKZ,IAAMxC,EAAW,SAACQ,GAChB,IAAMH,EAAS,GA+Bf,OA9BKG,EAAOxB,MAEAyD,IAAUC,SAASlC,EAAOxB,MAAO,CAAE2D,IAAK,EAAGC,IAAK,OAC1DvC,EAAOrB,MAAQ,2CAFfqB,EAAOrB,MAAQ,WAIZwB,EAAOrB,YAEAsD,IAAUC,SAASlC,EAAOrB,YAAa,CAAEwD,IAAK,GAAIC,IAAK,QACjEvC,EAAOlB,YAAc,mDAFrBkB,EAAOlB,YAAc,WAIlBqB,EAAOhB,mBAEAiD,IAAUI,MAAMrC,EAAOhB,sBACjCa,EAAOb,mBAAqB,gDAF5Ba,EAAOb,mBAAqB,WAIzBgB,EAAOf,mBAEAgD,IAAUK,UAAUtC,EAAOf,sBACrCY,EAAOZ,mBAAqB,gDAF5BY,EAAOZ,mBAAqB,WAIzBe,EAAOd,YAEA+C,IAAUK,UAAUtC,EAAOd,eACrCW,EAAOX,YAAc,wCAFrBW,EAAOX,YAAc,WAIlBc,EAAOb,UAEA8C,IAAUI,MAAMrC,EAAOb,aACjCU,EAAOV,UAAY,2CAFnBU,EAAOV,UAAY,WAIdU,GC5TM0C,EAxCA,SAAC,GAA4D,IAA1DzC,EAAyD,EAAzDA,aAAc0C,EAA2C,EAA3CA,aAAczF,EAA6B,EAA7BA,WAAY0F,EAAiB,EAAjBA,WACxD,OACE,kBAAC,EAAD,CAAUvG,OAAO,SAASE,YAAY,GACpC,kBAACoE,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CACElJ,GAAG,SACHqC,aAAa,MACbD,KAAK,aACLgH,SAAUhB,GAEV,4BAAQxI,UAAQ,EAACyJ,MAAM,OAAvB,UAGChE,EAAWkE,KAAI,SAACF,GACf,IAAIG,EAAeH,EAAMI,KAAKC,QAAQ,KAAM,OAC5C,OAAO,4BAAQL,MAAOA,EAAMpB,IAAKuB,SAIvC,kBAACV,EAAA,EAAKkC,MAAN,CACE5I,KAAK,UACL2E,KAAK,SACLkB,GAAG,kBACH3F,MAAM,WACN8G,SAAU0B,EACVlL,SAAyB,WAAfmL,IAEZ,kBAACjC,EAAA,EAAKkC,MAAN,CACE5I,KAAK,aACL2E,KAAK,SACLkB,GAAG,qBACH3F,MAAM,cACN8G,SAAU0B,EACVlL,SAAyB,QAAfmL,OCLHE,EA5BkB,SAAC,GAG3B,IAFLC,EAEI,EAFJA,kBACAC,EACI,EADJA,yBAEA,OACE,kBAAC,EAAD,CAAU3G,OAAO,6BAA6BE,YAAY,GAEtD,kBAACvD,EAAA,EAAD,CAAWtB,UAAU,QAClBqL,EAAkB3B,KAAI,SAAC6B,EAAUC,GAAX,OACrB,kBAAClK,EAAA,EAAUS,KAAX,CAAgBwC,IAAKiH,EAAOvL,QAAS,WAArC,UACMuL,EAAQ,EADd,aACoBD,EAAStE,MAD7B,mBAC0CsE,EAASE,OACjD,kBAACC,EAAA,EAAD,CACEzL,QAAQ,cACRI,QAAS,WACPiL,EAAyBC,EAASnD,KAEpCnG,MAAO,CAAE0J,OAAQ,YAEjB,kBAAC,KAAD,e,4DCMVC,E,2MACJlF,MAAQ,CACNmF,MAAM,EACNR,kBAAmB,GACnBS,SAAU,GACVhI,SAAU,GACVE,YAAa,EACbkH,WAAY,O,EAuCda,WAAa,WAEX,EAAKC,SAAS,CAAEH,MAAM,K,EAExBI,YAAc,WAEZ,EAAKD,SAAS,CAAEH,MAAM,K,EAGxBK,kBAAoB,SAACC,EAAGZ,GACtB,IAAMa,EAAYD,EAAEE,OAAOC,QACrB9C,EAAQ2C,EAAEE,OAAO7C,MAEnB4C,EACF,EAAKJ,SAAL,eACGxC,EAAQ,CACP8C,SAAS,EACTlE,GAAImD,EAASnD,GACbnB,MAAOsE,EAAStE,MAChBwE,MAAOF,EAASE,SAIpB,EAAKO,SAAL,eACGxC,EAAQ,CACP8C,SAAS,M,EAMjBC,mBAAqB,SAACJ,GAIpB,QAHAA,EAAIA,EAAEE,QACM7C,OAGV,IAAK,OACH,EAAKlJ,MAAMiL,SAAS1C,UAAU2D,SAAQ,SAACL,GACrC,EAAKH,SAAL,eACGG,EAAE/D,GAAK,CAAEkE,SAAS,EAAMlE,GAAI+D,EAAE/D,GAAInB,MAAOkF,EAAElF,MAAOwE,MAAOU,EAAEV,YAGhE,MACF,IAAK,OACH,EAAKnL,MAAMiL,SAAS1C,UAAU2D,SAAQ,SAACL,GACrC,EAAKH,SAAL,eAAiBG,EAAE/D,GAAK,CAAEkE,SAAS,QAErC,MACF,IAAK,MACHG,YACE,EAAKnM,MAAMiL,SAAS1C,UACpB,EAAKnC,MAAM1C,YACX,EAAK0C,MAAM5C,UACX0I,SAAQ,SAACL,GACT,EAAKH,SAAL,eACGG,EAAE/D,GAAK,CAAEkE,SAAS,EAAMlE,GAAI+D,EAAE/D,GAAInB,MAAOkF,EAAElF,MAAOwE,MAAOU,EAAEV,YAGhE,MACF,IAAK,MACHgB,YACE,EAAKnM,MAAMiL,SAAS1C,UACpB,EAAKnC,MAAM1C,YACX,EAAK0C,MAAM5C,UACX0I,SAAQ,SAACL,GACT,EAAKH,SAAL,eACGG,EAAE/D,GAAK,CAAEkE,SAAS,U,EAS7BhB,yBAA2B,SAAClD,GAC1B,EAAK4D,SAAL,aACEX,kBAAmB,EAAK3E,MAAM2E,kBAAkBL,QAC9C,SAACO,GAAD,OAAcA,EAASnD,IAAMA,MAE9BA,EAAK,CAAEkE,SAAS,M,EAIrB/D,aAAe,SAAC4D,GAEdA,EAAIA,EAAEE,OACN,EAAK/L,MAAMoM,8BAA8BP,EAAE3C,OAC3C,EAAKwC,SAAS,CACZ5D,GAAI+D,EAAE3C,MACNxF,YAAa,K,EAIjBiH,aAAe,SAACkB,GACQ,YAAlBA,EAAEE,OAAO9J,KACP4J,EAAEE,OAAOC,QACX,EAAKN,SAAS,CAAEd,WAAY,QAE5B,EAAKc,SAAS,CAAEd,WAAY,QAG1BiB,EAAEE,OAAOC,QACX,EAAKN,SAAS,CAAEd,WAAY,WAE5B,EAAKc,SAAS,CAAEd,WAAY,S,EAKlCnH,cAAgB,SAAC4I,GAEf,EAAKX,SAAS,CAAEhI,YAAa2I,K,mFApJ7B7J,KAAKxC,MAAMsM,wBACX9J,KAAKxC,MAAMuM,uBACX/J,KAAKxC,MAAMwM,wB,yCAGMC,GAAW,IAAD,OAC3B,GAAIA,EAASC,WAAalK,KAAKxC,MAAM0M,SAAU,CAE7C,IAAMC,EAAgBnK,KAAKxC,MAAM0M,SAASnE,UAAUa,KAAI,SAACyC,GAAO,IAAD,EAC1C,EAAK7L,MAAMiL,SAAS1C,UAAUmC,QAAO,SAACkC,GACvD,OAAOA,EAAE9E,GAAGjB,aAAegF,KADtBZ,EADsD,oBAc7D,OATA,EAAKS,SAAL,eACGG,EAAI,CACHG,SAAS,EACTlE,IAAK+D,EACLlF,MAAOsE,GAAYA,EAAStE,MAC5BwE,MAAOF,GAAYA,EAASE,SAIzB,CACLa,SAAS,EACTlE,IAAK+D,EACLlF,MAAOsE,GAAYA,EAAStE,MAC5BwE,MAAOF,GAAYA,EAASE,UAIhC3I,KAAKkJ,SAAS,CACZX,kBAAmB4B,O,+BAwHf,IAAD,OACDE,EACsB,QAA1BrK,KAAK4D,MAAMwE,WACPpI,KAAKxC,MAAMiL,SAAS1C,UAAUmC,QAAO,SAACoC,GAAD,MAAyB,QAAfA,EAAKC,SAC1B,WAA1BvK,KAAK4D,MAAMwE,WACXpI,KAAKxC,MAAMiL,SAAS1C,UAAUmC,QAC5B,SAACoC,GAAD,MAAyB,WAAfA,EAAKC,SAEjBvK,KAAKxC,MAAMiL,SAAS1C,UAEpBA,EAAY4D,YAChBU,EACArK,KAAK4D,MAAM1C,YACXlB,KAAK4D,MAAM5C,UAGPwJ,EAAqBC,OAAOC,KAAK1K,KAAK4D,OAAOsE,QACjD,SAACzG,GAAD,OAAUkJ,MAAMlJ,IAAQ,EAAKmC,MAAMnC,GAAK+H,WAG1C,OACE,oCACE,kBAAC,IAAaoB,IAAaC,YAAYC,UACvC,kBAACC,EAAA,EAAD,CAAOhC,KAAM/I,KAAK4D,MAAMmF,KAAMiC,OAAQhL,KAAKmJ,aACzC,kBAAC4B,EAAA,EAAM9I,OAAP,CAAcgJ,aAAW,GACvB,kBAACF,EAAA,EAAMG,MAAP,oCAGF,kBAACH,EAAA,EAAM7I,KAAP,KACE,kBAAC,EAAD,CACEqG,kBAAmBvI,KAAK4D,MAAM2E,kBAC9BC,yBAA0BxI,KAAKwI,4BAInC,kBAACuC,EAAA,EAAMI,OAAP,KACE,kBAAC5D,EAAA,EAAD,CAAQpK,QAAQ,YAAYI,QAASyC,KAAKmJ,aAA1C,WAOJ,yBACEhK,MAAO,CACLiD,SAAU,QACVgJ,OAAQ,OACRC,MAAO,OACP3J,MAAO,OACPC,OAAQ,OACRa,OAAQ,OAGV,kBAAC+E,EAAA,EAAD,CAAQhK,QAASyC,KAAKiJ,WAAY9E,MAAM,oBACtC,kBAAC,KAAD,CAAkBvD,KAAM,UAE1B,0BACE1D,UAAU,uCACViC,MAAO,CAAEiD,SAAU,WAAYC,IAAK,QAASgJ,MAAO,UAEnDrL,KAAK4D,MAAM2E,kBAAkBvC,SAIlC,kBAACsF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC5F,EAAA,EAAD,CAAOzI,QAAS,UAAWD,UAAU,oBAArC,gCACgCmN,EAAYrE,QAG5C,kBAAC,EAAD,CACEP,aAAczF,KAAKyF,aACnB/C,WAAY1C,KAAKxC,MAAMiO,SAAS/I,WAChCyF,aAAcnI,KAAKmI,aACnBC,WAAYpI,KAAKoI,aAEnB,kBAAC,EAAD,CACE1F,WAAY1C,KAAKxC,MAAMiO,SAAS/I,WAChCC,QAAS3C,KAAKxC,MAAMmF,QAAQA,QAC5BC,oBAAqB5C,KAAK4D,MAAM2E,kBAAkB3B,KAChD,SAACwD,GAAD,OAAOA,EAAE9E,MAEXzC,aAAc7C,KAAKxC,MAAM0M,YAG7B,kBAACqB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACE,EAAA,EAAD,KACE,kBAAClN,EAAA,EAAD,CAAWtB,UAAU,QAClB6I,EAAUC,OAAS,GAClB,uBAAG9I,UAAU,eAAb,iCAED6I,EAAUa,KAAI,SAAC6B,EAAUC,GAAX,OACb,kBAAClK,EAAA,EAAUS,KAAX,CACEwC,IAAKgH,EAASnD,GACdnI,QAASuL,EAAQ,IAAM,EAAI,OAAS,SAGlC,kBAACvC,EAAA,EAAKkC,MAAN,CAEEsD,QAAM,EACNvH,KAAK,WACLsC,MAAO+B,EAASnD,GAChBmB,SAAU,SAAC4C,GACT,EAAKD,kBAAkBC,EAAGZ,IAE5Be,QACE,EAAK5F,MAAM6E,EAASnD,KACpB,EAAK1B,MAAM6E,EAASnD,IAAIkE,UAI9B,0BAAMtM,UAAU,QACbwL,EACC,EACA,EAAK9E,MAAM5C,UAAY,EAAK4C,MAAM1C,YAAc,GAHpD,KAMA,kBAAC0H,EAAA,EAAD,CAAO1L,UAAU,QAAQuL,EAAStE,OAClC,8BAAOsE,EAASE,OAChB,kBAACC,EAAA,EAAD,CAAO1L,UAAU,QAAQuL,EAAS8B,OACjC9B,EAASmD,iBACR,kBAAChD,EAAA,EAAD,CAAO1L,UAAU,QAAjB,OACM,kBAAC,IAAD,CAAkBA,UAAU,OAAOmK,MAAM,WAGhDoB,EAASoD,MAAM,GAAGC,QACjB,kBAAClD,EAAA,EAAD,CAAO1L,UAAU,QAAjB,UACU,IACR,kBAAC,IAAD,CAAkBA,UAAU,OAAOmK,MAAM,WAG7C,kBAACuB,EAAA,EAAD,CAAO1L,UAAU,QAAjB,UAAgCuL,EAASnD,UAKjD,uBAAGpI,UAAU,cAAb,qCACqC,IACnC,kBAAC0L,EAAA,EAAD,CAAOzL,QAAQ,QAAf,gBAFF,sDAKA,kBAAC,IAAD,CACE4D,WAAYsJ,EAAYrE,OACxBhF,SAAUhB,KAAK4D,MAAM5C,SACrBE,YAAalB,KAAK4D,MAAM1C,YACxBD,cAAejB,KAAKiB,gBAGtB,yBAAK/D,UAAU,QACb,kBAACiJ,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,YACpB,kBAACF,EAAA,EAAKG,MAAN,sDAGA,kBAACH,EAAA,EAAKI,QAAN,CACEnC,KAAK,OACL3E,KAAK,YACL+G,YAAY,kBACZC,SAAU,SAAC4C,GACT,EAAKH,SAAS,CACZF,SAAUK,EAAEE,OAAO7C,MAAMqF,MAAM,KAAKnF,KAAI,SAACyC,GAAD,OAAQA,aAQ5D,yBAAKnM,UAAU,oDACb,kBAACqK,EAAA,EAAD,CACEhK,QAAS,WACP,EAAK2L,SAAS,CACZX,kBAAkB,GAAD,mBACZiC,EAAmB5D,KAAI,SAACtB,GAAD,OAAQ,EAAK1B,MAAM0B,OAD9B,YAEZ,EAAK1B,MAAMoF,cAIpB9L,UAAU,qBATZ,iCAcA,kBAACiJ,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,gBACA,kBAACH,EAAA,EAAKI,QAAN,CACElJ,GAAG,SACHoC,KAAK,SACLgH,SAAUzG,KAAKyJ,oBAEf,6CACA,4BAAQ/C,MAAM,QAAd,YACA,4BAAQA,MAAM,QAAd,cACA,4BAAQA,MAAM,OAAd,kCACA,4BAAQA,MAAM,OAAd,sCAIN,yBAAKxJ,UAAU,QACb,kBAAC0I,EAAA,EAAD,CACE1I,UAAU,iCACVC,QAAQ,WAER,0BAAMD,UAAU,sBACb8C,KAAK4D,MAAM2E,kBAAkB3B,KAAI,SAACwD,GAAD,OAAOA,EAAE9E,MAAI0G,KAAK,MAEtD,kBAACzE,EAAA,EAAD,CACEpK,QAAQ,UACRI,QAAS,WACP0O,UAAUC,UAAUC,UAClB,EAAKvI,MAAM2E,kBAAkB3B,KAAI,SAACwD,GAAD,OAAOA,EAAE9E,MAAI0G,KAAK,QAJzD,iB,GA/WQ1M,aAqZT8M,uBAVS,SAACxI,GACvB,MAAO,CACLyI,KAAMzI,EAAMyI,KACZ5D,SAAU7E,EAAM6E,SAChBgD,SAAU7H,EAAM6H,SAChBa,IAAK1I,EAAM0I,IACX3J,QAASiB,EAAMjB,YAfQ,SAACa,GAC1B,MAAO,CACLsG,sBAAuB,kBAAMtG,EAAS+I,gBACtCxC,qBAAsB,kBAAMvG,EAASgJ,gBACrCxC,oBAAqB,kBAAMxG,EAASiJ,gBACpC7C,8BAA+B,SAACtE,GAAD,OAC7B9B,EAASkJ,YAA4BpH,QAa5B8G,CAA6CtD,I,yJC7a7C,SAAS6D,EAAT,GAAwD,IAApCnF,EAAmC,EAAnCA,WAAYoF,EAAuB,EAAvBA,oBAAuB,EAC5C9J,mBAAS,MADmC,mBAC7D+J,EAD6D,KACvDC,EADuD,KASpE,OAPA/H,qBAAU,WACRgI,IAAMC,IAAN,UAAaC,iCAAb,kBAAqDzF,IAClD0F,MAAK,SAACC,GACLL,EAAQK,EAAIC,SAEbC,OAAM,SAAChE,GAAD,OAAOiE,QAAQC,IAAIlE,QAC3B,CAAC7B,IAEF,6BACE,kBAAC,IAAD,CAAOuB,KAAMvB,EAAYwD,OAAQ4B,EAAqBhM,KAAK,MACzD,kBAAC,IAAMqB,OAAP,CAAcgJ,aAAW,GACvB,kBAAC,IAAMC,MAAP,uBAEF,kBAAC,IAAMhJ,KAAP,KACE,kBAAC,UAAD,CAAagI,SAAU2C,KAEzB,kBAAC,IAAM1B,OAAP,KACE,kBAAC,IAAD,CAAQhO,QAAQ,YAAYI,QAASqP,GAArC","file":"static/js/42.f1b2593b.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\nimport AbstractNavItem from './AbstractNavItem';\nimport { makeEventKey } from './SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  variant: null,\n  active: false,\n  disabled: false\n};\nvar ListGroupItem = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      active = _ref.active,\n      disabled = _ref.disabled,\n      className = _ref.className,\n      variant = _ref.variant,\n      action = _ref.action,\n      as = _ref.as,\n      eventKey = _ref.eventKey,\n      onClick = _ref.onClick,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"active\", \"disabled\", \"className\", \"variant\", \"action\", \"as\", \"eventKey\", \"onClick\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (onClick) onClick(event);\n  }, [disabled, onClick]);\n  return React.createElement(AbstractNavItem, _extends({\n    ref: ref\n  }, props, {\n    eventKey: makeEventKey(eventKey, props.href) // eslint-disable-next-line\n    ,\n    as: as || (action ? props.href ? 'a' : 'button' : 'div'),\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, active && 'active', disabled && 'disabled', variant && bsPrefix + \"-\" + variant, action && bsPrefix + \"-action\")\n  }));\n});\nListGroupItem.defaultProps = defaultProps;\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport warning from 'warning';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractNav from './AbstractNav';\nimport ListGroupItem from './ListGroupItem';\nvar defaultProps = {\n  variant: null,\n  horizontal: null\n};\nvar ListGroup = React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      className = _useUncontrolled.className,\n      bsPrefix = _useUncontrolled.bsPrefix,\n      variant = _useUncontrolled.variant,\n      horizontal = _useUncontrolled.horizontal,\n      _useUncontrolled$as = _useUncontrolled.as,\n      as = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"className\", \"bsPrefix\", \"variant\", \"horizontal\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group');\n  var horizontalVariant;\n\n  if (horizontal) {\n    horizontalVariant = horizontal === true ? 'horizontal' : \"horizontal-\" + horizontal;\n  } else {\n    horizontalVariant = null;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(!(horizontal && variant === 'flush'), '`variant=\"flush\"` and `horizontal` should not be used together.') : void 0;\n  return React.createElement(AbstractNav, _extends({\n    ref: ref\n  }, controlledProps, {\n    as: as,\n    className: classNames(className, bsPrefix, variant && bsPrefix + \"-\" + variant, horizontalVariant && bsPrefix + \"-\" + horizontalVariant)\n  }));\n});\nListGroup.defaultProps = defaultProps;\nListGroup.displayName = 'ListGroup';\nListGroup.Item = ListGroupItem;\nexport default ListGroup;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\n/* eslint-disable react/no-multi-comp */\nimport classNames from 'classnames';\nimport React from 'react';\nimport SafeAnchor from './SafeAnchor';\nvar defaultProps = {\n  active: false,\n  disabled: false,\n  activeLabel: '(current)'\n};\nvar PageItem = React.forwardRef(function (_ref, ref) {\n  var active = _ref.active,\n      disabled = _ref.disabled,\n      className = _ref.className,\n      style = _ref.style,\n      activeLabel = _ref.activeLabel,\n      children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"active\", \"disabled\", \"className\", \"style\", \"activeLabel\", \"children\"]);\n\n  var Component = active || disabled ? 'span' : SafeAnchor;\n  return React.createElement(\"li\", {\n    ref: ref,\n    style: style,\n    className: classNames(className, 'page-item', {\n      active: active,\n      disabled: disabled\n    })\n  }, React.createElement(Component, _extends({\n    className: \"page-link\",\n    disabled: disabled\n  }, props), children, active && activeLabel && React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, activeLabel)));\n});\nPageItem.defaultProps = defaultProps;\nPageItem.displayName = 'PageItem';\nexport default PageItem;\n\nfunction createButton(name, defaultValue, label) {\n  var _class, _temp;\n\n  if (label === void 0) {\n    label = name;\n  }\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inheritsLoose(_class, _React$Component);\n\n    function _class() {\n      return _React$Component.apply(this, arguments) || this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          props = _objectWithoutPropertiesLoose(_this$props, [\"children\"]);\n\n      delete props.active;\n      return React.createElement(PageItem, props, React.createElement(\"span\", {\n        \"aria-hidden\": \"true\"\n      }, children || defaultValue), React.createElement(\"span\", {\n        className: \"sr-only\"\n      }, label));\n    };\n\n    return _class;\n  }(React.Component), _class.displayName = name, _temp;\n}\n\nexport var First = createButton('First', '«');\nexport var Prev = createButton('Prev', '‹', 'Previous');\nexport var Ellipsis = createButton('Ellipsis', '…', 'More');\nexport var Next = createButton('Next', '›');\nexport var Last = createButton('Last', '»');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport PageItem, { First, Prev, Ellipsis, Next, Last } from './PageItem';\n\n/**\n * @property {PageItem} Item\n * @property {PageItem} First\n * @property {PageItem} Prev\n * @property {PageItem} Ellipsis\n * @property {PageItem} Next\n * @property {PageItem} Last\n */\nvar Pagination = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      children = _ref.children,\n      size = _ref.size,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"children\", \"size\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'pagination');\n  return React.createElement(\"ul\", _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix, size && decoratedBsPrefix + \"-\" + size)\n  }), children);\n});\nPagination.First = First;\nPagination.Prev = Prev;\nPagination.Ellipsis = Ellipsis;\nPagination.Item = PageItem;\nPagination.Next = Next;\nPagination.Last = Last;\nexport default Pagination;","import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\n\r\nconst pagination = ({ itemsCount, pageSize, onPageHandler, currentPage }) => {\r\n  const pageCount = Math.ceil(itemsCount / pageSize)\r\n  if (pageCount === 1) return null\r\n  const items = []\r\n  for (let number = 1; number <= pageCount; number++) {\r\n    items.push(\r\n      <Pagination.Item\r\n        key={number}\r\n        onClick={() => {\r\n          onPageHandler(number)\r\n        }}\r\n        active={number === currentPage}\r\n        className='my-2 mr-2 text-center'\r\n        style={{ width: '40px', height: '30px' }}\r\n      >\r\n        {number}\r\n      </Pagination.Item>\r\n    )\r\n  }\r\n  return (\r\n    <Pagination className='justify-content-start align-content-start flex-wrap'>\r\n      {items}\r\n    </Pagination>\r\n  )\r\n}\r\n\r\nexport default pagination\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst card = ({ header, children, headerBgColor, showHeader }) => {\r\n  return (\r\n    <Card className='mt-5'>\r\n      {showHeader && (\r\n        <Card.Header\r\n          className={'text-center font-weight-bold bg-' + headerBgColor}\r\n        >\r\n          {header}\r\n        </Card.Header>\r\n      )}\r\n      <Card.Body>{children}</Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default card\r\n","import { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Alert, Button, Form, Spinner } from 'react-bootstrap'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { FaEdit, FaRegCalendarAlt } from 'react-icons/fa'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n//import { useFormik } from \"formik\";\r\nimport validator from 'validator'\r\nimport { onLoadingLoader, postExamProfile } from '../../store/examPaper'\r\nimport ExamCard from './card/card'\r\n\r\nconst centeredStyle = {\r\n  // styling to display server response in middle of screen\r\n  position: 'fixed',\r\n  top: '50%',\r\n  left: '50%',\r\n  /* bring your own prefixes */\r\n  transform: 'translate(-50%, -50%)',\r\n  zIndex: '1000'\r\n}\r\n\r\nconst ExamSpec = ({\r\n  categories,\r\n  courses,\r\n  selectedQuestionIds,\r\n  editExamSpec\r\n}) => {\r\n  const [hideMsg, setHideMsg] = useState(true)\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [endDate, setEndDate] = useState(new Date())\r\n  const [forceEditTime, setForceEditTime] = useState(false) // for forcely set exam time to old days\r\n  const dispatch = useDispatch()\r\n  const loading = useSelector((state) => state.examPaper.loading)\r\n  const successMsg = useSelector((state) => state.examPaper.success)\r\n  const errorMsg = useSelector((state) => state.examPaper.error)\r\n  const initialValues = {\r\n    title: editExamSpec ? editExamSpec.title : '',\r\n    type: editExamSpec ? editExamSpec.type.toString() : '0',\r\n    description: editExamSpec ? editExamSpec.description : '',\r\n    categoryType: editExamSpec ? editExamSpec.categoryIds : [],\r\n    courseType: editExamSpec ? editExamSpec.courseIds : [],\r\n    singleQuestionMark: editExamSpec\r\n      ? editExamSpec.singleQuestionMark.toString()\r\n      : '1',\r\n    questionStemLength: editExamSpec\r\n      ? editExamSpec.questionStemLength.toString()\r\n      : '5',\r\n    penaltyMark: editExamSpec ? editExamSpec.penaltyMark.toString() : '0',\r\n    timeLimit: editExamSpec ? editExamSpec.timeLimit.toString() : '40'\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (editExamSpec) {\r\n      setStartDate(new Date(editExamSpec.startDate))\r\n      setEndDate(new Date(editExamSpec.endDate))\r\n    }\r\n  }, [editExamSpec])\r\n\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <Spinner\r\n          animation='border'\r\n          role='status'\r\n          variant='dark'\r\n          className='content-center'\r\n        ></Spinner>\r\n      )}\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validate={validate}\r\n        onSubmit={onSubmitHandler(\r\n          startDate,\r\n          endDate,\r\n          selectedQuestionIds,\r\n          dispatch,\r\n          setHideMsg,\r\n          editExamSpec && editExamSpec.id\r\n        )}\r\n        enableReinitialize\r\n      >\r\n        {({ errors, handleChange, handleSubmit, values }) => (\r\n          <ExamCard header='Exam Specification' showHeader={true}>\r\n            {hideMsg && successMsg && (\r\n              <Alert //\r\n                variant={'success'}\r\n                className='text-center'\r\n                style={centeredStyle}\r\n                onClose={() => setHideMsg(false)}\r\n                dismissible\r\n              >\r\n                {successMsg.title +\r\n                  ' --->  ' +\r\n                  successMsg.description +\r\n                  ' --->  ' +\r\n                  successMsg.questions.length +\r\n                  ' questions'}\r\n              </Alert>\r\n            )}\r\n            {hideMsg && errorMsg && (\r\n              <Alert //\r\n                variant={'success'}\r\n                className='text-center'\r\n                style={centeredStyle}\r\n                onClose={() => setHideMsg(false)}\r\n                dismissible\r\n              >\r\n                {JSON.stringify(errorMsg)}\r\n              </Alert>\r\n            )}\r\n            <Form>\r\n              <Form.Group controlId='title'>\r\n                <Form.Label>Title</Form.Label>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='Enter title'\r\n                  name='title'\r\n                  onChange={handleChange}\r\n                  value={values.title}\r\n                />\r\n              </Form.Group>\r\n              {errors.title ? (\r\n                <div className='alert alert-danger'>{errors.title}</div>\r\n              ) : null}\r\n              <Form.Group controlId='type'>\r\n                <Form.Label>Exam Type</Form.Label>\r\n                <Form.Control\r\n                  as='select'\r\n                  name='type'\r\n                  value={values.type}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value='0'>Assignment</option>\r\n                  <option value='1'>Weekly</option>\r\n                  <option value='2'>Monthly</option>\r\n                  <option value='3'>Assesment</option>\r\n                  <option value='4'>Term</option>\r\n                  <option value='5'>Test</option>\r\n                  <option value='6'>Final</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group controlId='categoryType'>\r\n                <Form.Label>Category Type</Form.Label>\r\n                <Form.Control\r\n                  as='select'\r\n                  multiple\r\n                  name='categoryType'\r\n                  onChange={handleChange}\r\n                  value={values.categoryType}\r\n                  //value={categories[0] && categories[0].id}\r\n                  // eslint-disable-next-line react/jsx-no-comment-textnodes\r\n                >\r\n                  // eslint-disable-next-line react/prop-types //\r\n                  eslint-disable-next-line react/prop-types\r\n                  {categories.map((value) => {\r\n                    //console.log(categories[0].id);\r\n                    let categorySlug = value.slug.replace(/_/g, ' / ')\r\n                    if (value.name !== 'Uncategorized')\r\n                      return <option value={value.id}>{categorySlug}</option>\r\n                    else return <></>\r\n                  })}\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='courseType'>\r\n                <Form.Label>Course Type</Form.Label>\r\n                <Form.Control\r\n                  as='select'\r\n                  multiple\r\n                  name='courseType'\r\n                  onChange={handleChange}\r\n                  value={values.courseType}\r\n                  //value={categories[0] && categories[0].id}\r\n                  // eslint-disable-next-line react/jsx-no-comment-textnodes\r\n                >\r\n                  // eslint-disable-next-line react/prop-types //\r\n                  eslint-disable-next-line react/prop-types\r\n                  {courses &&\r\n                    courses.map((value) => (\r\n                      <option value={value.id}>{value.title}</option>\r\n                    ))}\r\n                </Form.Control>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId='description'>\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control\r\n                  type='textarea'\r\n                  placeholder='description'\r\n                  name='description'\r\n                  onChange={handleChange}\r\n                  value={values.description}\r\n                />\r\n              </Form.Group>\r\n              {errors.description ? (\r\n                <div className='alert alert-danger'>{errors.description}</div>\r\n              ) : null}\r\n              <div>\r\n                <div className='my-3'>\r\n                  <p>Start Date</p>\r\n                  <DatePicker\r\n                    selected={startDate}\r\n                    onChange={(date) => setStartDate(date)}\r\n                    showTimeSelect\r\n                    minDate={\r\n                      editExamSpec ? null : forceEditTime ? null : new Date()\r\n                    }\r\n                    dateFormat='Pp'\r\n                  />\r\n                  <FaRegCalendarAlt size='1.7rem' />\r\n                </div>\r\n                <div className='my-3'>\r\n                  <p>End Date</p>\r\n                  <DatePicker\r\n                    selected={endDate}\r\n                    onChange={(date) => setEndDate(date)}\r\n                    showTimeSelect\r\n                    minDate={\r\n                      editExamSpec ? null : forceEditTime ? null : new Date()\r\n                    }\r\n                    dateFormat='Pp'\r\n                  />\r\n                  <FaRegCalendarAlt size='1.7rem' />\r\n                </div>\r\n                <p>\r\n                  <FaEdit\r\n                    color='red'\r\n                    onClick={() => {\r\n                      setForceEditTime(!forceEditTime)\r\n                    }}\r\n                  />\r\n                </p>\r\n              </div>\r\n              <Form.Group controlId='singleQuestionMark'>\r\n                <Form.Label>Single Question Mark</Form.Label>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='1'\r\n                  name='singleQuestionMark'\r\n                  onChange={handleChange}\r\n                  value={values.singleQuestionMark}\r\n                />\r\n                <Form.Text className='text-muted'>\r\n                  ** It is value for the question, not for the single stem.\r\n                </Form.Text>\r\n              </Form.Group>\r\n              {errors.singleQuestionMark ? (\r\n                <div className='alert alert-danger'>\r\n                  {errors.singleQuestionMark}\r\n                </div>\r\n              ) : null}\r\n              <Form.Group controlId='questionStemLength'>\r\n                <Form.Label>Question Stem Length</Form.Label>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='5'\r\n                  name='questionStemLength'\r\n                  onChange={handleChange}\r\n                  value={values.questionStemLength}\r\n                />\r\n              </Form.Group>\r\n              {errors.questionStemLength ? (\r\n                <div className='alert alert-danger'>\r\n                  {errors.questionStemLength}\r\n                </div>\r\n              ) : null}\r\n              <Form.Group controlId='penaltyMark'>\r\n                <Form.Label>Penalty Mark</Form.Label>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='0'\r\n                  name='penaltyMark'\r\n                  onChange={handleChange}\r\n                  value={values.penaltyMark}\r\n                />\r\n                <Form.Text className='text-muted'>\r\n                  ** It is value for single stem, not for the question.\r\n                </Form.Text>\r\n              </Form.Group>\r\n              {errors.penaltyMark ? (\r\n                <div className='alert alert-danger'>{errors.penaltyMark}</div>\r\n              ) : null}\r\n              <Form.Group controlId='timeLimit'>\r\n                <Form.Label>Time Limit(Minutes)</Form.Label>\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder='40'\r\n                  name='timeLimit'\r\n                  value={values.timeLimit}\r\n                  onChange={handleChange}\r\n                />\r\n              </Form.Group>\r\n              {errors.timeLimit ? (\r\n                <div className='alert alert-danger'>{errors.timeLimit}</div>\r\n              ) : null}\r\n            </Form>\r\n            <Button onClick={handleSubmit}>Submit</Button>\r\n          </ExamCard>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ExamSpec\r\n\r\nfunction onSubmitHandler(\r\n  startDate,\r\n  endDate,\r\n  selectedQuestionIds,\r\n  dispatch,\r\n  setHideMsg,\r\n  editExamId\r\n) {\r\n  return (values) => {\r\n    if (selectedQuestionIds.length > 0) {\r\n      values.startDate = startDate\r\n      values.endDate = endDate\r\n      dispatch(onLoadingLoader())\r\n      setHideMsg(true)\r\n      dispatch(postExamProfile(values, selectedQuestionIds, editExamId))\r\n    } else {\r\n      alert('Their is no selected Question')\r\n    }\r\n  }\r\n}\r\n\r\nconst validate = (values) => {\r\n  const errors = {}\r\n  if (!values.title) {\r\n    errors.title = 'Required'\r\n  } else if (!validator.isLength(values.title, { min: 5, max: 50 })) {\r\n    errors.title = 'Title should be between 5-50 characters'\r\n  }\r\n  if (!values.description) {\r\n    errors.description = 'Required'\r\n  } else if (!validator.isLength(values.description, { min: 15, max: 255 })) {\r\n    errors.description = 'Description should be between 15-255 characters'\r\n  }\r\n  if (!values.singleQuestionMark) {\r\n    errors.singleQuestionMark = 'Required'\r\n  } else if (!validator.isInt(values.singleQuestionMark)) {\r\n    errors.singleQuestionMark = 'Single Question Mark should be Integer value'\r\n  }\r\n  if (!values.questionStemLength) {\r\n    errors.questionStemLength = 'Required'\r\n  } else if (!validator.isNumeric(values.questionStemLength)) {\r\n    errors.questionStemLength = 'Question stem length should be Numeric value'\r\n  }\r\n  if (!values.penaltyMark) {\r\n    errors.penaltyMark = 'Required'\r\n  } else if (!validator.isNumeric(values.penaltyMark)) {\r\n    errors.penaltyMark = 'penalty Mark should be Numeric value'\r\n  }\r\n  if (!values.timeLimit) {\r\n    errors.timeLimit = 'Required'\r\n  } else if (!validator.isInt(values.timeLimit)) {\r\n    errors.timeLimit = 'Timelimit Mark should be Interger Value'\r\n  }\r\n  return errors\r\n}\r\n","import React from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport ExamCard from './card/card'\r\n\r\nconst filter = ({ handleChange, handleSwitch, categories, qTypeState }) => {\r\n  return (\r\n    <ExamCard header='Filter' showHeader={true}>\r\n      <Form.Group controlId='formGridParent'>\r\n        <Form.Label>Category</Form.Label>\r\n        <Form.Control\r\n          as='select'\r\n          defaultValue='top'\r\n          name='categoryId'\r\n          onChange={handleChange}\r\n        >\r\n          <option disabled value='top'>\r\n            Top...\r\n          </option>\r\n          {categories.map((value) => {\r\n            let categorySlug = value.slug.replace(/_/g, ' / ')\r\n            return <option value={value.id}>{categorySlug}</option>\r\n          })}\r\n        </Form.Control>\r\n      </Form.Group>\r\n      <Form.Check\r\n        name='sbaOnly'\r\n        type='switch'\r\n        id='sba-only-switch'\r\n        label='Only SBA'\r\n        onChange={handleSwitch}\r\n        disabled={qTypeState === 'matrix'}\r\n      />\r\n      <Form.Check\r\n        name='matrixOnly'\r\n        type='switch'\r\n        id='matrix-only-switch'\r\n        label='Only Matrix'\r\n        onChange={handleSwitch}\r\n        disabled={qTypeState === 'sba'}\r\n      />\r\n    </ExamCard>\r\n  )\r\n}\r\n\r\nexport default filter\r\n","import React from 'react'\r\nimport { Badge, ListGroup } from 'react-bootstrap'\r\nimport { FaTimes } from 'react-icons/fa'\r\nimport ExamCard from './card/card'\r\n\r\nconst SelectedQuestionsPreview = ({\r\n  selectedQuestions,\r\n  selectedQuestionsHandler\r\n}) => {\r\n  return (\r\n    <ExamCard header='Selected Questions Preview' showHeader={false}>\r\n      {\r\n        <ListGroup className='my-2'>\r\n          {selectedQuestions.map((question, index) => (\r\n            <ListGroup.Item key={index} variant={'success'}>\r\n              {`${index + 1}. ${question.title} --> ${question.qText}`}\r\n              <Badge\r\n                variant='danger ml-2'\r\n                onClick={() => {\r\n                  selectedQuestionsHandler(question.id)\r\n                }}\r\n                style={{ cursor: 'pointer' }}\r\n              >\r\n                <FaTimes />\r\n              </Badge>\r\n            </ListGroup.Item>\r\n          ))}\r\n        </ListGroup>\r\n      }\r\n    </ExamCard>\r\n  )\r\n}\r\n\r\nexport default SelectedQuestionsPreview\r\n","import React, { Component } from 'react'\r\nimport {\r\n  Alert,\r\n  Badge,\r\n  Button,\r\n  Col,\r\n  Form,\r\n  FormCheck,\r\n  ListGroup,\r\n  Modal,\r\n  Row\r\n} from 'react-bootstrap'\r\nimport { FaShoppingBasket } from 'react-icons/fa'\r\nimport { connect } from 'react-redux'\r\nimport { FaRegCheckCircle } from 'react-icons/fa'\r\nimport ExamSpec from '../../components/examBuilder/examSpec'\r\nimport Filter from '../../components/examBuilder/filter'\r\nimport SelectedQuestionsPreview from '../../components/examBuilder/selectedQuestionsPreview'\r\nimport Pagination from '../../components/pagination/pagination'\r\nimport MetaInfo from '../../components/seo/metainfo'\r\nimport { RoutesConfig } from '../../config/routes.config'\r\nimport { fetchCategory } from '../../store/category'\r\nimport { fetchCourseLoader } from '../../store/courses'\r\nimport {\r\n  getQuestionByCategoryLoader,\r\n  getQuestionLoader\r\n} from '../../store/question'\r\nimport { paginate } from '../../utils/paginate'\r\n\r\nclass ExamPaper extends Component {\r\n  state = {\r\n    show: false,\r\n    selectedQuestions: [],\r\n    massQIds: [],\r\n    pageSize: 10,\r\n    currentPage: 1,\r\n    qTypeState: 'all'\r\n  }\r\n  componentDidMount() {\r\n    this.props.onFetchCategoryLoader()\r\n    this.props.onFetchCoursesLoader()\r\n    this.props.onGetQuestionLoader()\r\n  }\r\n\r\n  componentDidUpdate(preProps) {\r\n    if (preProps.editExam !== this.props.editExam) {\r\n      // a very bad and resource consuming computing\r\n      const editQuestions = this.props.editExam.questions.map((e) => {\r\n        const [question] = this.props.question.questions.filter((q) => {\r\n          return q.id.toString() === e\r\n        })\r\n\r\n        this.setState({\r\n          [e]: {\r\n            checked: true,\r\n            id: +e,\r\n            title: question && question.title,\r\n            qText: question && question.qText\r\n          }\r\n        })\r\n\r\n        return {\r\n          checked: true,\r\n          id: +e,\r\n          title: question && question.title,\r\n          qText: question && question.qText\r\n        }\r\n      })\r\n\r\n      this.setState({\r\n        selectedQuestions: editQuestions\r\n      })\r\n    }\r\n  }\r\n\r\n  handleShow = () => {\r\n    //control modal show state\r\n    this.setState({ show: true })\r\n  }\r\n  handleClose = () => {\r\n    //control modal show state\r\n    this.setState({ show: false })\r\n  }\r\n\r\n  checkHandleChange = (e, question) => {\r\n    const isChecked = e.target.checked\r\n    const value = e.target.value\r\n\r\n    if (isChecked) {\r\n      this.setState({\r\n        [value]: {\r\n          checked: true,\r\n          id: question.id,\r\n          title: question.title,\r\n          qText: question.qText\r\n        }\r\n      })\r\n    } else {\r\n      this.setState({\r\n        [value]: {\r\n          checked: false\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  actionHandleChange = (e) => {\r\n    e = e.target\r\n    const v = e.value\r\n\r\n    switch (v) {\r\n      case 'mAll':\r\n        this.props.question.questions.forEach((e) => {\r\n          this.setState({\r\n            [e.id]: { checked: true, id: e.id, title: e.title, qText: e.qText }\r\n          })\r\n        })\r\n        break\r\n      case 'uAll':\r\n        this.props.question.questions.forEach((e) => {\r\n          this.setState({ [e.id]: { checked: false } })\r\n        })\r\n        break\r\n      case 'mPQ':\r\n        paginate(\r\n          this.props.question.questions,\r\n          this.state.currentPage,\r\n          this.state.pageSize\r\n        ).forEach((e) => {\r\n          this.setState({\r\n            [e.id]: { checked: true, id: e.id, title: e.title, qText: e.qText }\r\n          })\r\n        })\r\n        break\r\n      case 'uPQ':\r\n        paginate(\r\n          this.props.question.questions,\r\n          this.state.currentPage,\r\n          this.state.pageSize\r\n        ).forEach((e) => {\r\n          this.setState({\r\n            [e.id]: { checked: false }\r\n          })\r\n        })\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  selectedQuestionsHandler = (id) => {\r\n    this.setState({\r\n      selectedQuestions: this.state.selectedQuestions.filter(\r\n        (question) => question.id != id\r\n      ),\r\n      [id]: { checked: false }\r\n    })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    // the category controller\r\n    e = e.target\r\n    this.props.onGetQuestionByCategoryLoader(e.value)\r\n    this.setState({\r\n      id: e.value,\r\n      currentPage: 1\r\n    })\r\n  }\r\n\r\n  handleSwitch = (e) => {\r\n    if (e.target.name === 'sbaOnly') {\r\n      if (e.target.checked) {\r\n        this.setState({ qTypeState: 'sba' })\r\n      } else {\r\n        this.setState({ qTypeState: 'all' })\r\n      }\r\n    } else {\r\n      if (e.target.checked) {\r\n        this.setState({ qTypeState: 'matrix' })\r\n      } else {\r\n        this.setState({ qTypeState: 'all' })\r\n      }\r\n    }\r\n  }\r\n\r\n  onPageHandler = (page) => {\r\n    // for pagination\r\n    this.setState({ currentPage: page })\r\n  }\r\n\r\n  render() {\r\n    const quesByQType =\r\n      this.state.qTypeState === 'sba'\r\n        ? this.props.question.questions.filter((ques) => ques.qType === 'sba')\r\n        : this.state.qTypeState === 'matrix'\r\n        ? this.props.question.questions.filter(\r\n            (ques) => ques.qType === 'matrix'\r\n          )\r\n        : this.props.question.questions\r\n\r\n    const questions = paginate(\r\n      quesByQType,\r\n      this.state.currentPage,\r\n      this.state.pageSize\r\n    )\r\n\r\n    const checkedQuestionIds = Object.keys(this.state).filter(\r\n      (key) => !isNaN(key) && this.state[key].checked\r\n    )\r\n\r\n    return (\r\n      <>\r\n        <MetaInfo {...RoutesConfig.ExamBuilder.metaInfo} />\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Selected Questions Preview</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <SelectedQuestionsPreview\r\n              selectedQuestions={this.state.selectedQuestions}\r\n              selectedQuestionsHandler={this.selectedQuestionsHandler}\r\n            />\r\n          </Modal.Body>\r\n\r\n          <Modal.Footer>\r\n            <Button variant='secondary' onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        {/* Preview questions cart */}\r\n        <div\r\n          style={{\r\n            position: 'fixed',\r\n            bottom: '50px',\r\n            right: '20px',\r\n            width: '50px',\r\n            height: '35px',\r\n            zIndex: '99'\r\n          }}\r\n        >\r\n          <Button onClick={this.handleShow} title='Questions Busket'>\r\n            <FaShoppingBasket size={'2rem'} />\r\n          </Button>\r\n          <span\r\n            className='bg-danger text-white p-1 text-center'\r\n            style={{ position: 'absolute', top: '-15px', right: '-10px' }}\r\n          >\r\n            {this.state.selectedQuestions.length}\r\n          </span>\r\n        </div>\r\n\r\n        <Row>\r\n          <Col lg={4}>\r\n            <Alert variant={'primary'} className='text-center mt-3'>\r\n              Total number of Question is :{quesByQType.length}\r\n            </Alert>\r\n\r\n            <Filter\r\n              handleChange={this.handleChange}\r\n              categories={this.props.category.categories}\r\n              handleSwitch={this.handleSwitch}\r\n              qTypeState={this.qTypeState}\r\n            />\r\n            <ExamSpec\r\n              categories={this.props.category.categories}\r\n              courses={this.props.courses.courses}\r\n              selectedQuestionIds={this.state.selectedQuestions.map(\r\n                (q) => q.id\r\n              )}\r\n              editExamSpec={this.props.editExam}\r\n            />\r\n          </Col>\r\n          <Col lg={8}>\r\n            <FormCheck>\r\n              <ListGroup className='my-2'>\r\n                {questions.length < 1 && (\r\n                  <p className='text-danger'>No Question in this category.</p>\r\n                )}\r\n                {questions.map((question, index) => (\r\n                  <ListGroup.Item\r\n                    key={question.id}\r\n                    variant={index % 2 === 0 ? 'dark' : 'light'}\r\n                  >\r\n                    {\r\n                      <Form.Check\r\n                        //ref={this.state.input}\r\n                        inline\r\n                        type='checkbox'\r\n                        value={question.id}\r\n                        onChange={(e) => {\r\n                          this.checkHandleChange(e, question)\r\n                        }}\r\n                        checked={\r\n                          this.state[question.id] &&\r\n                          this.state[question.id].checked\r\n                        }\r\n                      />\r\n                    }\r\n                    <span className='mr-2'>\r\n                      {index +\r\n                        1 +\r\n                        this.state.pageSize * (this.state.currentPage - 1)}\r\n                      .\r\n                    </span>\r\n                    <Badge className='mr-2'>{question.title}</Badge>\r\n                    <span>{question.qText}</span>\r\n                    <Badge className='ml-2'>{question.qType}</Badge>\r\n                    {question.generalFeedback && (\r\n                      <Badge className='ml-2'>\r\n                        GF: <FaRegCheckCircle className='ml-1' color='green' />\r\n                      </Badge>\r\n                    )}\r\n                    {question.stems[0].fbStem && (\r\n                      <Badge className='ml-2'>\r\n                        FbStem:{' '}\r\n                        <FaRegCheckCircle className='ml-1' color='green' />\r\n                      </Badge>\r\n                    )}\r\n                    <Badge className='ml-2'>Id No. {question.id}</Badge>\r\n                  </ListGroup.Item>\r\n                ))}\r\n              </ListGroup>\r\n            </FormCheck>\r\n            <p className='text-muted'>\r\n              ** Please add checked questions to{' '}\r\n              <Badge variant='info'>Preview Cart</Badge>. Otherwise no questions\r\n              will be avaiable in exam.\r\n            </p>\r\n            <Pagination\r\n              itemsCount={quesByQType.length}\r\n              pageSize={this.state.pageSize}\r\n              currentPage={this.state.currentPage}\r\n              onPageHandler={this.onPageHandler}\r\n            />\r\n\r\n            <div className='my-3'>\r\n              <Form>\r\n                <Form.Group controlId='massQIds'>\r\n                  <Form.Label>\r\n                    Enter Question's Ids (Comma seperated Values)\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type='text'\r\n                    name=' massQIds'\r\n                    placeholder='12,3,25,103,...'\r\n                    onChange={(e) => {\r\n                      this.setState({\r\n                        massQIds: e.target.value.split(',').map((e) => +e)\r\n                      })\r\n                    }}\r\n                  />\r\n                </Form.Group>\r\n              </Form>\r\n            </div>\r\n\r\n            <div className='d-flex justify-content-center align-items-center'>\r\n              <Button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    selectedQuestions: [\r\n                      ...checkedQuestionIds.map((id) => this.state[id]),\r\n                      ...this.state.massQIds\r\n                    ]\r\n                  })\r\n                }}\r\n                className='mr-5 mb-2 mb-sm-0'\r\n              >\r\n                Add Questions to Preview Cart\r\n              </Button>\r\n\r\n              <Form.Group controlId='formGridParent'>\r\n                <Form.Label>Actions</Form.Label>\r\n                <Form.Control\r\n                  as='select'\r\n                  name='action'\r\n                  onChange={this.actionHandleChange}\r\n                >\r\n                  <option>Select...</option>\r\n                  <option value='mAll'>Mark All</option>\r\n                  <option value='uAll'>UnMark All</option>\r\n                  <option value='mPQ'>Mark The On Page's Questiones </option>\r\n                  <option value='uPQ'>UnMark The On Page's Questiones</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </div>\r\n            <div className='my-3'>\r\n              <Alert\r\n                className='d-flex justify-content-between'\r\n                variant='success'\r\n              >\r\n                <span className='mr-3 overflow-auto'>\r\n                  {this.state.selectedQuestions.map((q) => q.id).join(',')}\r\n                </span>\r\n                <Button\r\n                  variant='primary'\r\n                  onClick={() => {\r\n                    navigator.clipboard.writeText(\r\n                      this.state.selectedQuestions.map((q) => q.id).join(',')\r\n                    )\r\n                  }}\r\n                >\r\n                  Copy\r\n                </Button>\r\n              </Alert>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchCategoryLoader: () => dispatch(fetchCategory()),\r\n    onFetchCoursesLoader: () => dispatch(fetchCourseLoader()),\r\n    onGetQuestionLoader: () => dispatch(getQuestionLoader()),\r\n    onGetQuestionByCategoryLoader: (id) =>\r\n      dispatch(getQuestionByCategoryLoader(id))\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.auth,\r\n    question: state.question,\r\n    category: state.category,\r\n    api: state.api,\r\n    courses: state.courses\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExamPaper)\r\n","import Axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport ExamBuilder from './examBuilder'\r\n\r\nexport default function EditExam({ editExamId, editExamHandleClose }) {\r\n  const [exam, setExam] = useState(null)\r\n  useEffect(() => {\r\n    Axios.get(`${process.env.REACT_APP_SITE_URL}/exams/${editExamId}`)\r\n      .then((res) => {\r\n        setExam(res.data)\r\n      })\r\n      .catch((e) => console.log(e))\r\n  }, [editExamId])\r\n  return (\r\n    <div>\r\n      <Modal show={editExamId} onHide={editExamHandleClose} size='xl'>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <ExamBuilder editExam={exam} />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={editExamHandleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}