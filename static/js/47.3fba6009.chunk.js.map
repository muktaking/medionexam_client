{"version":3,"sources":["components/exams/gallary/examCatBadges.js","container/exams/component/examByCat.js","container/exams/examListsByCatShower.js"],"names":["ExamCatBadges","categoryType","map","category","key","name","pill","variant","categoryTypeVariant","className","duration","require","relativeTime","ExamByCat","exam","courseId","useState","showModal","setShowModal","dispatch","useDispatch","coursesEnrolledByStu","useSelector","state","courses","isAuthenticated","auth","token","isFree","filter","cat","length","isEnrolledStu","course","id","indexOf","handleCloseModal","style","width","show","onHide","Header","closeButton","Title","Body","to","Footer","onClick","title","examTypeToString","type","size","description","resetExamResultLoader","defaultMessage","disabled","moment","startDate","fromNow","ExamListsByCatShower","useParams","idA","split","exams","setExams","loading","setLoading","useEffect","axios","get","process","then","response","data","catch","e","console","log"],"mappings":"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","file":"static/js/47.3fba6009.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Badge } from 'react-bootstrap'\r\n\r\nexport default function ExamCatBadges({ categoryType }) {\r\n  return (\r\n    categoryType &&\r\n    categoryType.map((category) => (\r\n      <Badge\r\n        key={category.name}\r\n        pill\r\n        variant={categoryTypeVariant(category.name)}\r\n        className='mr-1'\r\n      >\r\n        {category.name}\r\n      </Badge>\r\n    ))\r\n  )\r\n}\r\n\r\nconst categoryTypeVariant = (name) => {\r\n  let variant = 'primary'\r\n  switch (name) {\r\n    case 'Featured':\r\n      variant = 'warning'\r\n      break\r\n    case 'Free':\r\n      variant = 'secondary'\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n  return variant\r\n}\r\n","//import moment from 'moment'\r\nimport * as moment from 'dayjs'\r\nimport React, { useState } from 'react'\r\nimport { Badge, Button, Modal } from 'react-bootstrap'\r\nimport { BsFileText } from 'react-icons/bs'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport ExamCatBadges from '../../../components/exams/gallary/examCatBadges'\r\nimport { resetExamResultLoader } from '../../../store/exams'\r\nimport { examTypeToString } from '../../../utils/faculty'\r\nimport { FaLock } from 'react-icons/fa'\r\nconst duration = require('dayjs/plugin/duration')\r\nconst relativeTime = require('dayjs/plugin/relativeTime')\r\nmoment.extend(relativeTime)\r\nmoment.extend(duration)\r\n\r\nexport default function ExamByCat({ exam, courseId = null }) {\r\n  const [showModal, setShowModal] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const coursesEnrolledByStu = useSelector(\r\n    (state) => state.courses.coursesEnrolledByStu\r\n  )\r\n  const isAuthenticated = useSelector((state) => state.auth.token !== null)\r\n\r\n  const isFree =\r\n    exam.categoryType.filter((cat) => cat.name === 'Free').length > 0\r\n  const isEnrolledStu =\r\n    coursesEnrolledByStu.map((course) => course.id).indexOf(+courseId) !== -1\r\n\r\n  const handleCloseModal = () => setShowModal(false)\r\n\r\n  return (\r\n    <div\r\n      className='mb-2 ml-2 pt-3 px-2 border border-secondary' // bg-secondary text-white\r\n      style={{ width: '350px' }}\r\n    >\r\n      <div>\r\n        <Modal show={showModal} onHide={handleCloseModal}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title className='text-warning'>\r\n              {isAuthenticated ? 'Enrollment Required' : 'Login Required'}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <span>To continue the exam, you have to</span>{' '}\r\n            {isAuthenticated ? (\r\n              <Link to={`/courses/${courseId ? courseId : ''}`}>\r\n                <Button>Enroll the course</Button>\r\n              </Link>\r\n            ) : (\r\n              <Link to='/login'>\r\n                <Button>Login</Button>\r\n              </Link>\r\n            )}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant='secondary' onClick={handleCloseModal}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        <h4 className=''>\r\n          {/* <BsLayersFill size='1.5rem' /> */}\r\n          <span className=''>{exam.title}</span>\r\n        </h4>\r\n        <div className='d-flex justify-content-between'>\r\n          <div>\r\n            <ExamCatBadges categoryType={exam.categoryType} />\r\n            <span>{!isEnrolledStu && !isFree && <FaLock />}</span>\r\n          </div>\r\n          <div>\r\n            <Badge variant='dark' className='px-2 py-1'>\r\n              {examTypeToString(exam.type)}\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='mt-1'>\r\n        <p className=''>\r\n          <BsFileText size='1.5rem' className='m-1' />\r\n          <span className='ml-2'>{exam.description}</span>\r\n        </p>\r\n        <hr />\r\n        <div className='d-flex justify-content-center'>\r\n          <Link\r\n            className='text-white'\r\n            // First get array of coursesEnrolledByStuIds, then finds in them the course id\r\n            // , then check the free status\r\n            to={\r\n              isEnrolledStu\r\n                ? '/exams/' + exam.id + '_' + courseId\r\n                : isFree && '/exams/free/' + exam.id\r\n            }\r\n          >\r\n            <Button\r\n              variant='outline-primary'\r\n              onClick={() => {\r\n                dispatch(resetExamResultLoader())\r\n                setShowModal(true)\r\n              }}\r\n            >\r\n              <FormattedMessage id='btn.start' defaultMessage='Start Exam' />\r\n            </Button>\r\n          </Link>\r\n          {isAuthenticated && courseId && (\r\n            <Link\r\n              className='text-white'\r\n              to={'/result/rank/' + (courseId + '_' + exam.id)}\r\n            >\r\n              <Button\r\n                onClick={() => {\r\n                  dispatch(resetExamResultLoader())\r\n                }}\r\n                variant='outline-primary'\r\n                className='ml-2'\r\n                disabled={!isEnrolledStu && !isFree}\r\n              >\r\n                <FormattedMessage id='btn.rank' defaultMessage='Rank' />\r\n              </Button>\r\n            </Link>\r\n          )}\r\n        </div>\r\n        <hr />\r\n        <p className='text-center text-muted'>\r\n          Start: {moment(exam.startDate).fromNow()}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Badge } from 'react-bootstrap'\r\nimport { useParams } from 'react-router'\r\nimport CircleLoader from '../../components/customSpinner/circleLoader/circleLoader'\r\nimport ExamByCat from './component/examByCat'\r\n\r\nexport default function ExamListsByCatShower() {\r\n  const { id } = useParams()\r\n  let [name, idA] = [null, null]\r\n  if (id) [name, idA] = id.split('-')\r\n  const [exams, setExams] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/exams/category/' + idA)\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setExams(response.data)\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false)\r\n        console.log(e)\r\n      })\r\n  }, [idA])\r\n  return (\r\n    <div className=''>\r\n      {loading && <CircleLoader />}\r\n      <h2 className='text-center'>\r\n        <span className='mr-2'>Available Exams Under</span>\r\n        <Badge variant='warning'>{name}</Badge>\r\n      </h2>\r\n      {!loading && (\r\n        <p className='text-center text-danger'>\r\n          {exams.length < 1 && 'NO Exam is avaiable.'}\r\n        </p>\r\n      )}\r\n      <div className='d-flex justify-content-center flex-wrap'>\r\n        {exams.map((exam) => (\r\n          <ExamByCat key={exam.title} exam={exam} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}