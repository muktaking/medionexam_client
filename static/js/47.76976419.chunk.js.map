{"version":3,"sources":["components/pagination/pagination.jsx","components/navbar/subNavBar.js","components/exams/paper/question/stem.jsx","components/exams/paper/question/question.jsx","container/exams/component/preExamNotification.js","container/exams/examTaker.js"],"names":["pagination","itemsCount","pageSize","onPageHandler","currentPage","pageCount","Math","ceil","items","number","push","Item","key","onClick","active","className","style","width","height","connect","state","isAuthenticated","auth","token","props","pages","as","to","pathname","toUpperCase","map","value","QuestionStemView","id","qType","stem","index","handleChange","defaultChecked","isAnswerRestricted","disableQuestions","useSelector","exams","Row","Col","xs","Form","Group","controlId","Check","type","Input","disabled","includes","name","onChange","Label","toString","QuestionForm","question","console","log","ListGroup","Badge","variant","remarkPlugins","remarkGfm","components","table","node","children","Table","bordered","responsive","img","src","alt","Image","fluid","qText","stems","PreExamNotification","examStartDialogueHandler","history","useHistory","useState","show","setShow","showRules","setShowRules","handleClose","Modal","onHide","Header","closeButton","Title","Body","questions","length","singleQuestionMark","timeLimit","penaltyMark","striped","filter","q","Button","Alert","Footer","goBack","Completionist","renderer","hours","minutes","seconds","completed","fontSize","ExamTaker","loading","date","Date","now","timeExpired","modalShow","arrowState","showPagination","examStartDialogue","timeTakenToComplete","answers","answerIds","Set","setState","modalHide","page","onHandleChange","e","target","onDisableQuestionsAddLoader","split","preState","add","onSwithchHandleChange","checked","onSubmitHandler","examId","match","params","courseId","forEach","_","find","o","free","onPostFreeExamByIdLoader","toFixed","questionIdsByOrder","onPostExamByIdLoader","this","onResetExamLoader","onGetFreeExamByIdLoader","onGetExamByIdLoader","paginate","Helmet","examResult","error","examError","onComplete","intl","formatMessage","defaultMessage","size","Switch","label","onTick","lg","ind","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","itemClass","linkClass","prevPageText","nextPageText","Component","injectIntl","dispatch","getExamByIdLoader","getFreeExamByIdLoader","data","postExamByIdLoader","postFreeExamByIdLoader","resetExamError","disableQuestionsAdd","payload","withRouter"],"mappings":"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","file":"static/js/47.76976419.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\n\r\nconst pagination = ({ itemsCount, pageSize, onPageHandler, currentPage }) => {\r\n  const pageCount = Math.ceil(itemsCount / pageSize)\r\n  if (pageCount === 1) return null\r\n  const items = []\r\n  for (let number = 1; number <= pageCount; number++) {\r\n    items.push(\r\n      <Pagination.Item\r\n        key={number}\r\n        onClick={() => {\r\n          onPageHandler(number)\r\n        }}\r\n        active={number === currentPage}\r\n        className='my-2 mr-2 text-center'\r\n        style={{ width: '40px', height: '30px' }}\r\n      >\r\n        {number}\r\n      </Pagination.Item>\r\n    )\r\n  }\r\n  return (\r\n    <Pagination className='justify-content-start align-content-start flex-wrap'>\r\n      {items}\r\n    </Pagination>\r\n  )\r\n}\r\n\r\nexport default pagination\r\n","import React from 'react'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst subNavBar = (props) => {\r\n  const pages = props.isAuthenticated\r\n    ? ['dashboard', 'courses', 'exams', 'logout', 'help']\r\n    : ['courses', 'exams', 'signup', 'login', 'help']\r\n\r\n  return (\r\n    <Nav className='bg-light'>\r\n      <Nav.Item as='li' className='mr-3'>\r\n        <NavLink to={{ pathname: '/' }} className='nav-link link-hover'>\r\n          {'Home'.toUpperCase()}\r\n        </NavLink>\r\n      </Nav.Item>\r\n      {pages.map((value) => (\r\n        <Nav.Item key={value} as='li' className='mr-3'>\r\n          <NavLink\r\n            // href={\"/\" + value}\r\n            to={{ pathname: '/' + value }}\r\n            className='nav-link link-hover'\r\n          >\r\n            {value.toUpperCase()}\r\n          </NavLink>\r\n        </Nav.Item>\r\n      ))}\r\n      <Nav.Item as='li' className='mr-3'>\r\n        <NavLink to='/#contact' className='nav-link link-hover'>\r\n          {'Contact'.toUpperCase()}\r\n        </NavLink>\r\n      </Nav.Item>\r\n    </Nav>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthenticated: state.auth.token !== null\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(subNavBar)\r\n","import React from 'react'\r\nimport { Col, Form, Row } from 'react-bootstrap'\r\nimport { useSelector } from 'react-redux'\r\nconst QuestionStemView = ({\r\n  id,\r\n  qType,\r\n  stem,\r\n  index,\r\n  handleChange,\r\n  defaultChecked,\r\n  isAnswerRestricted\r\n}) => {\r\n  //const dispatch = useDispatch();\r\n  const disableQuestions = useSelector((state) => state.exams.disableQuestions)\r\n\r\n  // const disableQuestionsAddLoader = (name)=>{\r\n  //   dispatch({type: disableQuestionsAdd.type, payload: name})\r\n  /*\r\n   *  disabled = true make exam to restrict answering only one time (residency, diploma and bcs)\r\n   * For fcps it should be false to let student try more than once\r\n   *  retrive a feild as isRestrictedToOneTimeTry from backend\r\n   */\r\n  return (\r\n    <Row className='px-md-4 px-xs-2'>\r\n      <Col xs='9'>{index + '. ' + stem}</Col>\r\n      <Form.Group as={Col} controlId='formGroupQuestionStemAnswer'>\r\n        {qType === 'matrix' ? (\r\n          <>\r\n            <Form.Check type='radio'>\r\n              <Form.Check.Input\r\n                //inline\r\n                disabled={\r\n                  isAnswerRestricted\r\n                    ? disableQuestions &&\r\n                      disableQuestions.includes(id + '_' + index)\r\n                    : false\r\n                }\r\n                type='radio'\r\n                //label=\"True\"\r\n                name={id + '_' + index}\r\n                id='formHorizontalRadios1'\r\n                value={1}\r\n                defaultChecked={defaultChecked === '1'}\r\n                onChange={handleChange}\r\n                // onClick={(e)=>{\r\n                //   disableQuestionsAddLoader(id + \"_\" + index);\r\n                // }}\r\n                className='mb-0'\r\n              />\r\n              <Form.Check.Label>True</Form.Check.Label>\r\n            </Form.Check>\r\n            <Form.Check type='radio'>\r\n              <Form.Check.Input\r\n                //inline\r\n                disabled={\r\n                  isAnswerRestricted\r\n                    ? disableQuestions &&\r\n                      disableQuestions.includes(id + '_' + index)\r\n                    : false\r\n                }\r\n                type='radio'\r\n                //label=\"False\"\r\n                name={id + '_' + index}\r\n                id='formHorizontalRadios2'\r\n                value={0}\r\n                defaultChecked={defaultChecked === '0'}\r\n                onChange={handleChange}\r\n                // onClick={(e)=>{\r\n                //   disableQuestionsAddLoader(id + \"_\" + index);\r\n                // }}\r\n                className='mb-0'\r\n              />\r\n              <Form.Check.Label>False</Form.Check.Label>\r\n            </Form.Check>\r\n          </>\r\n        ) : (\r\n          <Form.Check>\r\n            <Form.Check.Input\r\n              disabled={\r\n                isAnswerRestricted\r\n                  ? disableQuestions && disableQuestions.includes(id.toString())\r\n                  : false\r\n              }\r\n              type='radio'\r\n              name={id}\r\n              id='formHorizontalRadios1'\r\n              value={index}\r\n              defaultChecked={defaultChecked == index}\r\n              onChange={handleChange}\r\n              className='mb-0'\r\n            />\r\n          </Form.Check>\r\n        )}\r\n      </Form.Group>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default QuestionStemView\r\n","import React from 'react'\r\nimport { Badge, Image, ListGroup, Table } from 'react-bootstrap'\r\nimport { LazyLoadComponent } from 'react-lazy-load-image-component'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport remarkGfm from 'remark-gfm'\r\nimport Stem from './stem'\r\n\r\nconst QuestionForm = ({\r\n  question,\r\n  handleChange,\r\n  defaultChecked,\r\n  index,\r\n  isAnswerRestricted\r\n}) => {\r\n  console.log(index)\r\n  return (\r\n    <ListGroup as='ul' className='mt-3'>\r\n      <ListGroup.Item className='lead' as='li' active>\r\n        <Badge variant='danger'>Question No. {index}</Badge>\r\n\r\n        <ReactMarkdown\r\n          remarkPlugins={[remarkGfm]}\r\n          components={{\r\n            table: ({ node, children, ...props }) => (\r\n              <Table\r\n                bordered\r\n                responsive\r\n                className='text-white w-50'\r\n                children={children}\r\n              />\r\n            ),\r\n\r\n            img: ({ node, src, alt, ...props }) => (\r\n              <LazyLoadComponent>\r\n                <Image src={src} alt={alt} width={350} fluid />\r\n              </LazyLoadComponent>\r\n            )\r\n          }}\r\n        >\r\n          {question.qText}\r\n        </ReactMarkdown>\r\n        {/* <FaFlag color='red' /> */}\r\n      </ListGroup.Item>\r\n\r\n      {question.stems.map((stem, index) => (\r\n        <ListGroup.Item as='li' key={index}>\r\n          <Stem\r\n            qType={question.qType}\r\n            stem={stem}\r\n            index={index + 1}\r\n            id={question.id}\r\n            handleChange={handleChange}\r\n            defaultChecked={\r\n              defaultChecked\r\n                ? question.qType === 'matrix'\r\n                  ? defaultChecked[index]\r\n                  : defaultChecked[0]\r\n                : null\r\n            }\r\n            isAnswerRestricted={isAnswerRestricted}\r\n          />\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n\r\nexport default QuestionForm\r\n","import React, { useState } from 'react'\r\nimport { Alert, Badge, Button, ListGroup, Modal, Table } from 'react-bootstrap'\r\nimport { useHistory } from 'react-router'\r\n\r\nexport default function PreExamNotification({\r\n  examStartDialogueHandler,\r\n  exams\r\n}) {\r\n  const history = useHistory()\r\n  const [show, setShow] = useState(true)\r\n  const [showRules, setShowRules] = useState(false)\r\n  const handleClose = () => {\r\n    examStartDialogueHandler()\r\n    setShow(false)\r\n  }\r\n  return (\r\n    <div>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Do You want to Proceed to Exam?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>Exam's Stats</p>\r\n          {exams && (\r\n            <ListGroup>\r\n              <ListGroup.Item>\r\n                Total Questions:{' '}\r\n                <Badge>{exams.questions && exams.questions.length}</Badge>\r\n              </ListGroup.Item>\r\n              {/* <ListGroup.Item>\r\n              Single Question's Mark:{' '}\r\n              <Badge>\r\n                {exams.singleQuestionMark && exams.singleQuestionMark}\r\n              </Badge>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              Single Stem Mark:{' '}\r\n              <Badge>{exams.singleStemMark && exams.singleStemMark}</Badge>\r\n            </ListGroup.Item> */}\r\n              <ListGroup.Item>\r\n                Total Mark:{' '}\r\n                <Badge>\r\n                  {exams.questions &&\r\n                    exams.singleQuestionMark &&\r\n                    exams.questions.length * exams.singleQuestionMark}\r\n                </Badge>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                Time Limit: <Badge>{exams.timeLimit && exams.timeLimit}</Badge>{' '}\r\n                Mins\r\n              </ListGroup.Item>\r\n              {exams.penaltyMark && (\r\n                <ListGroup.Item>\r\n                  Penalty Mark:{' '}\r\n                  <Badge variant='danger'>{exams.penaltyMark}</Badge> (for each\r\n                  wrong stem)\r\n                  {/* or{' '}\r\n                  <Badge variant='danger'>{exams.penaltyMark * 5}</Badge> (for \r\n                  wrong SBA ) */}\r\n                </ListGroup.Item>\r\n              )}\r\n            </ListGroup>\r\n          )}\r\n          <Table striped bordered className='mt-3'>\r\n            <thead>\r\n              <tr>\r\n                <th>Question Type</th>\r\n                <th>Number</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>True/False questions</td>\r\n                <td>\r\n                  {exams.questions.filter((q) => q.qType === 'matrix').length}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>SBA questions</td>\r\n                <td>\r\n                  {exams.questions.filter((q) => q.qType === 'sba').length}\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n          <Button\r\n            onClick={() => {\r\n              setShowRules(!showRules)\r\n            }}\r\n            variant='dark'\r\n          >\r\n            Exam's Ruless\r\n          </Button>\r\n\r\n          {showRules && (\r\n            <Alert variant='warning' className='mt-3'>\r\n              <p>\r\n                1. First{' '}\r\n                {exams.questions.filter((q) => q.qType === 'matrix').length}{' '}\r\n                questions are True/False type. Rest{' '}\r\n                {exams.questions.filter((q) => q.qType === 'sba').length}{' '}\r\n                questions are SBA type.\r\n              </p>\r\n              <p>2. You can not modify your answer after clicking an option.</p>\r\n              <p>\r\n                3. After timelimit you will push to result page or you can\r\n                submit your answer anytime.\r\n              </p>\r\n            </Alert>\r\n          )}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant='secondary'\r\n            onClick={() => {\r\n              history.goBack()\r\n            }}\r\n          >\r\n            Go Back\r\n          </Button>\r\n          <Button variant='primary' onClick={handleClose}>\r\n            Proceed\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n","/* eslint-disable prettier/prettier */\r\n/* eslint-disable no-undef */\r\n/* eslint-disable react/prop-types */\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Alert,\r\n  Badge,\r\n  Button,\r\n  Col, Form,\r\n  Modal,\r\n  Row\r\n} from \"react-bootstrap\";\r\nimport Countdown from \"react-countdown\";\r\nimport { Helmet } from \"react-helmet\";\r\n//import { FaRegArrowAltCircleDown, FaRegArrowAltCircleUp} from 'react-icons/fa';\r\nimport { injectIntl } from 'react-intl';\r\nimport Pagination from \"react-js-pagination\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Redirect } from \"react-router-dom\";\r\n//import { Link as LinkScroll } from \"react-scroll\";\r\nimport CircleLoader from \"../../components/customSpinner/circleLoader/circleLoader\";\r\nimport QuestionView from \"../../components/exams/paper/question/question\";\r\nimport SubNavBar from \"../../components/navbar/subNavBar\";\r\nimport PaginationCustom from \"../../components/pagination/pagination\";\r\nimport {\r\n  disableQuestionsAdd,\r\n  getExamByIdLoader,\r\n  getFreeExamByIdLoader,\r\n  postExamByIdLoader,\r\n  postFreeExamByIdLoader,\r\n  resetExamError\r\n} from \"../../store/exams\";\r\nimport { paginate } from \"../../utils/paginate\";\r\nimport PreExamNotification from \"./component/preExamNotification\";\r\n\r\n// Random component\r\nconst Completionist = () => (\r\n  <span className=\"text-danger\">Your Time is Finished</span>\r\n);\r\n\r\n// Renderer callback with condition\r\nconst renderer = ({ hours, minutes, seconds, completed }) => {\r\n  if (completed) {\r\n    // Render a completed state\r\n    return <Completionist />;\r\n  } else {\r\n    // Render a countdown\r\n    return (\r\n      <span>\r\n        <Badge\r\n          variant={(hours < 1) & (minutes < 5) ? \"danger\" : \"success\"}\r\n          style={{ fontSize: \"2rem\" }}\r\n        >\r\n          {hours + \" H\"}\r\n        </Badge>\r\n        <Badge variant=\"light\" style={{ fontSize: \"1.5rem\" }}>\r\n          :\r\n        </Badge>\r\n        <Badge\r\n          variant={(hours < 1) & (minutes < 5) ? \"danger\" : \"success\"}\r\n          style={{ fontSize: \"2rem\" }}\r\n        >\r\n          {minutes + \" M\"}\r\n        </Badge>\r\n        <Badge variant=\"light\" style={{ fontSize: \"1.5rem\" }}>\r\n          :\r\n        </Badge>\r\n        <Badge\r\n          variant={(hours < 1) & (minutes < 5) ? \"danger\" : \"success\"}\r\n          style={{ fontSize: \"2rem\" }}\r\n        >\r\n          {seconds + \" S\"}\r\n        </Badge>\r\n      </span>\r\n    );\r\n  }\r\n};\r\n\r\nclass ExamTaker extends Component {\r\n  state = {\r\n    loading: false,\r\n    //For Pagination\r\n    pageSize: 1,\r\n    currentPage: 1,\r\n    //For Main Answer Sheet React CountDown\r\n    date: Date.now(),\r\n    //use in ending exam\r\n    timeExpired: false,\r\n    modalShow: false,\r\n    arrowState: true,\r\n    showPagination: true,\r\n    examStartDialogue: true,\r\n  };\r\n\r\n  timeTakenToComplete = 0;\r\n  answers = [];\r\n  answerIds = new Set();\r\n\r\n  modalShow = () => {\r\n    this.setState({ modalShow: true });\r\n  };\r\n  modalHide = () => {\r\n    this.setState({ modalShow: false });\r\n  };\r\n\r\n  examStartDialogueHandler = ()=>{\r\n    this.setState({ examStartDialogue: false });\r\n  }\r\n\r\n\r\n\r\n  //For paination\r\n  onPageHandler = (page) => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  onHandleChange = (e) => {\r\n        \r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    \r\n    this.props.onDisableQuestionsAddLoader(name);\r\n\r\n    if (name.includes(\"_\")) {\r\n      const [id, index] = name.split(\"_\");\r\n      this.setState((preState) => {\r\n        if (!preState[id]) preState[id] = [];\r\n        preState[id][index - 1] = value;\r\n        this.answerIds.add(id);\r\n      });\r\n    } else {\r\n      this.setState((preState) => {\r\n        preState[name] = [value];\r\n        this.answerIds.add(name);\r\n      });\r\n    }\r\n  };\r\n\r\n  onSwithchHandleChange = (e) => {\r\n    const checked = e.target.checked;\r\n    if(checked) {\r\n      this.setState({pageSize: this.props.exams.questions.length, currentPage: 1 , showPagination: false});\r\n    }\r\n    else{\r\n      this.setState({pageSize: 1, showPagination: true});\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  // for submitting Answer Sheet\r\n  onSubmitHandler = () => {\r\n    const examId = this.props.match.params.id.split('_')[0];\r\n    const courseId = this.props.match.params.id.split('_')[1]\r\n    this.setState({ loading: true });\r\n\r\n    this.answerIds.forEach((id) => {\r\n      this.answers.push({\r\n        id: id,\r\n        stems: this.state[id],\r\n        type: _.find(this.props.exams.questions, (o) => o.id === +id).qType,\r\n      });\r\n    });\r\n    if (this.props.free) {\r\n      this.props.onPostFreeExamByIdLoader({\r\n        examId,\r\n        timeTakenToComplete: (this.timeTakenToComplete / 60).toFixed(4),\r\n        answers: this.answers,\r\n        questionIdsByOrder: this.props.exams.questionIdsByOrder,\r\n      });\r\n    } else {\r\n      this.props.onPostExamByIdLoader({\r\n        examId,\r\n        courseId,\r\n        timeTakenToComplete: Math.ceil(this.timeTakenToComplete / 60).toFixed(\r\n          4\r\n        ),\r\n        answers: this.answers,\r\n        questionIdsByOrder: this.props.exams.questionIdsByOrder,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.onResetExamLoader();\r\n    if (!this.props.free) {\r\n      this.props.onGetExamByIdLoader(this.props.match.params.id);\r\n    } else {\r\n      this.props.onGetFreeExamByIdLoader(this.props.match.params.id);\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const questions = paginate(\r\n      this.props.exams.questions,\r\n      this.state.currentPage,\r\n      this.state.pageSize\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <title>Exam- test your knowledge</title>\r\n        </Helmet>\r\n        {(this.props.exams.examResult || this.props.exams.error) && (\r\n          <Redirect to=\"/result\" />\r\n        )}\r\n\r\n        {(this.props.exams.questions.length < 1 && !this.props.exams.examError) && (\r\n          <CircleLoader />\r\n        )}\r\n\r\n        \r\n        {/* Modal tests are you want submit or time expired*/}\r\n        <Modal show={this.state.modalShow} onHide={this.modalHide}>\r\n          {this.state.loading ? \r\n\r\n          <p className=\"lead mt-5 text-center\">Your submitted Exam is processing...</p>\r\n          \r\n          : this.state.timeExpired ? (\r\n            <>\r\n              <Modal.Header>\r\n                <Modal.Title className=\"text-danger\">Time Expired</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div>\r\n                  <p className=\"lead\">You will Taken To Result Page.</p>\r\n                  <Countdown\r\n                    date={Date.now() + 5 * 1000}\r\n                    renderer={({ seconds }) => (\r\n                      <p\r\n                        className=\"text-center text-danger\"\r\n                        style={{ fontSize: \"2rem\" }}\r\n                      >\r\n                        {seconds}\r\n                      </p>\r\n                    )}\r\n                    onComplete={this.onSubmitHandler}\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                {this.props.intl.formatMessage({id: 'btn.sas', defaultMessage: \"Submit Answer Sheet\"})}\r\n                </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div>\r\n                  <p className=\"lead\">\r\n                    {this.props.intl.formatMessage({id: 'et.agree', defaultMessage: \"Are You Sure ? You will Taken To Result Page. \"})}\r\n                  You do no answer<span className=\"text-danger\"> {this.props.exams.questions.length - this.answerIds.size} </span> questions.\r\n                  </p>\r\n                  {/* countdown to proceed for result after clicking the submit button */}\r\n                  <Countdown\r\n                    date={Date.now() + 10 * 1000}\r\n                    renderer={({ seconds }) => (\r\n                      <p\r\n                        className=\"text-center text-danger\"\r\n                        style={{ fontSize: \"2rem\" }}\r\n                      >\r\n                        {seconds}\r\n                      </p>\r\n                    )}\r\n                    onComplete={this.onSubmitHandler}\r\n                  />\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.modalHide}>\r\n                {this.props.intl.formatMessage({id: 'et.no', defaultMessage: \"Go Back\"})}\r\n                  \r\n                </Button>\r\n                <Button variant=\"primary\" onClick={\r\n                  this.onSubmitHandler\r\n                  }>\r\n                {this.props.intl.formatMessage({id: 'et.yes', defaultMessage: \"Yes, I Want.\"})}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </>\r\n          )}\r\n        </Modal>\r\n        {this.props.exams.examError ? (\r\n          <>\r\n            <Alert variant=\"danger\" className=\"text-center mt-5\">\r\n              <h2>{this.props.exams.examError}</h2>\r\n              <h4>Possible Solution</h4>\r\n              {\r\n                this.props.auth.token\r\n                ? <p>You may not enrolled for the course. Please enroll first.</p> \r\n                :<p> You are not logged in. So you can not participate exams other\r\n                than free. So login or participate free exam only.\r\n              </p>\r\n              }\r\n              \r\n            </Alert>\r\n            <SubNavBar />\r\n          </>\r\n        ) :\r\n          this.props.exams.timeLimit && (\r\n            this.state.examStartDialogue ? <PreExamNotification exams={this.props.exams} examStartDialogueHandler={this.examStartDialogueHandler} /> :\r\n            // !window.confirm('Are You Sure.\\n Exam Rules: 1) For True-false based question select true or false for each stem. \\n 2) For multiple choice question, select the correct answer only.') ? this.props.history.goBack() :\r\n            \r\n            <>\r\n              <div className=\"text-dark text-center px-2 pt-3 pb-2 mt-1 bg-light sticky-top\">\r\n                <div className=\"d-flex justify-content-around mb-2\">\r\n                  <Form.Switch\r\n                  id=\"custom-switch\"\r\n                  label={this.props.intl.formatMessage({id: 'btn.aqv', defaultMessage: \"Switch to All Questions View\"})}\r\n                  className=\"mr-2\"\r\n                  onChange={this.onSwithchHandleChange}\r\n                  > \r\n\r\n                  </Form.Switch>\r\n                  <Button onClick={this.modalShow} className=\"btn-md\">\r\n                    {this.props.intl.formatMessage({id: 'btn.sas', defaultMessage: \"Submit Answer Sheet\"})}\r\n                  </Button>\r\n                </div>\r\n                <Countdown\r\n                  date={this.state.date + this.props.exams.timeLimit * 60 * 1000}\r\n                  renderer={renderer}\r\n                  onTick={() => {\r\n                    this.timeTakenToComplete++;\r\n                  }}\r\n                  onComplete={() => {\r\n                    this.setState({ timeExpired: true, modalShow: true });\r\n                  }}\r\n                />\r\n                \r\n              </div>\r\n                          \r\n              {/* <div className=\"scroll-container d-flex justify-content-center flex-wrap\">\r\n                <LinkScroll\r\n                  to={\"et-top\"}\r\n                  spy={true}\r\n                  smooth={true}\r\n                  offset={-50}\r\n                  duration={500}\r\n                >\r\n                  <FaRegArrowAltCircleUp size={\"1.2rem\"} />\r\n                  \r\n                </LinkScroll>\r\n\r\n                <LinkScroll\r\n                  to={\"qNavigator\"}\r\n                  spy={true}\r\n                  smooth={true}\r\n                  offset={-50}\r\n                  duration={500}\r\n                >\r\n                  <FaRegArrowAltCircleDown size={\"1.2rem\"}/>\r\n\r\n                </LinkScroll>\r\n              </div> */}\r\n              \r\n            <Row id=\"et-top\">  \r\n              <Col lg={9}>\r\n                {questions.map((question, ind) => (\r\n                  <QuestionView\r\n                    key={question.id}\r\n                    question={question}\r\n                    handleChange={this.onHandleChange}\r\n                    defaultChecked={\r\n                      this.state[question.id] ? this.state[question.id] : null\r\n                    }\r\n                    index={this.state.showPagination ? (this.state.currentPage * this.state.pageSize) : (ind + 1)}\r\n                    isAnswerRestricted = {this.props.exams.isAnswerRestricted}\r\n                  />\r\n                ))}\r\n                <div className=\"mt-2 d-flex justify-content-center\">\r\n                  {this.state.showPagination && <Pagination\r\n                    activePage={this.state.currentPage}\r\n                    itemsCountPerPage={1}\r\n                    totalItemsCount={this.props.exams.questions.length}\r\n                    pageRangeDisplayed={1}\r\n                    onChange={this.onPageHandler}\r\n                    itemClass=\"page-item\"\r\n                    linkClass=\"page-link\"\r\n                    prevPageText=\"Previous\"\r\n                    nextPageText=\"Next\"\r\n                  /> }\r\n                  \r\n                </div>\r\n              </Col>\r\n              <Col lg={3} className=\"mt-3\" id=\"qNavigator\">\r\n              {this.state.showPagination && <PaginationCustom\r\n                  itemsCount={this.props.exams.questions.length}\r\n                  pageSize={this.state.pageSize}\r\n                  currentPage={this.state.currentPage}\r\n                  onPageHandler={this.onPageHandler}\r\n                />}\r\n              </Col>\r\n          </Row>\r\n          </>\r\n          )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onGetExamByIdLoader: (id) => dispatch(getExamByIdLoader(id)),\r\n    onGetFreeExamByIdLoader: (id) => dispatch(getFreeExamByIdLoader(id)),\r\n    onPostExamByIdLoader: (data) => dispatch(postExamByIdLoader(data)),\r\n    onPostFreeExamByIdLoader: (data) => dispatch(postFreeExamByIdLoader(data)),\r\n    onResetExamLoader: () => dispatch({ type: resetExamError.type }),\r\n    onDisableQuestionsAddLoader: (name) => dispatch({type: disableQuestionsAdd.type, payload: name})\r\n  };\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    exams: state.exams,\r\n    auth: state.auth,\r\n    //   category: state.category,\r\n    //   api: state.api,\r\n  };\r\n};\r\n\r\nexport default injectIntl(connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(ExamTaker)));\r\n"],"sourceRoot":""}