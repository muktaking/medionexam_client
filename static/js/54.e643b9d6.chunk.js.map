{"version":3,"sources":["container/exams/component/startExamBtn.js","container/exams/component/examByCat.js","container/exams/examListsByCatShower.js"],"names":["StartExamBtn","exam","courseId","children","useState","showModal","setShowModal","dispatch","useDispatch","isAuthenticated","useSelector","state","auth","token","coursesEnrolledByStu","courses","isFree","categoryType","filter","cat","name","length","isEnrolledStu","map","course","id","indexOf","handleCloseModal","show","onHide","Header","closeButton","Title","className","Body","to","Footer","variant","onClick","resetExamResultLoader","defaultMessage","disabled","duration","require","relativeTime","ExamByCat","style","width","title","size","description","moment","startDate","fromNow","ExamListsByCatShower","useParams","idA","split","exams","setExams","loading","setLoading","useEffect","axios","get","process","then","response","data","catch","e","console","log","key"],"mappings":"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","file":"static/js/54.e643b9d6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Modal, Button, Badge } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { FaLock } from 'react-icons/fa'\r\nimport { resetExamResultLoader } from '../../../store/exams'\r\n\r\nexport default function StartExamBtn({ exam, courseId, children }) {\r\n  const [showModal, setShowModal] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const isAuthenticated = useSelector((state) => state.auth.token !== null)\r\n  const coursesEnrolledByStu = useSelector(\r\n    (state) => state.courses.coursesEnrolledByStu\r\n  )\r\n  const isFree =\r\n    exam.categoryType.filter((cat) => cat.name === 'Free').length > 0\r\n  const isEnrolledStu = coursesEnrolledByStu\r\n    ? coursesEnrolledByStu.map((course) => course.id).indexOf(+courseId) !== -1\r\n    : null\r\n\r\n  const handleCloseModal = () => setShowModal(false)\r\n\r\n  return (\r\n    <div>\r\n      <Modal show={showModal} onHide={handleCloseModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title className=''>\r\n            {isAuthenticated ? 'Enrollment Required' : 'Login Required'}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {isAuthenticated ? (\r\n            children ? (\r\n              children\r\n            ) : (\r\n              <div>\r\n                <span>To continue the exam, you have to</span>{' '}\r\n                <Link to={`/courses/${courseId ? courseId : ''}`}>\r\n                  <Button>Enroll the course</Button>\r\n                </Link>\r\n              </div>\r\n            )\r\n          ) : (\r\n            <div>\r\n              <span>To continue the exam, you have to</span>{' '}\r\n              <Link to='/login'>\r\n                <Button>Login</Button>\r\n              </Link>\r\n            </div>\r\n          )}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={handleCloseModal}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <div className='d-flex justify-content-center align-items-center'>\r\n        <div className='d-flex justify-content-center mr-2'>\r\n          <div>\r\n            <Badge variant='success'>\r\n              {!isEnrolledStu && isFree && (\r\n                <>\r\n                  <span className='px-2 py-1'>Free</span>\r\n                </>\r\n              )}\r\n            </Badge>\r\n            <Badge variant='dark' className='p-1'>\r\n              {!isEnrolledStu && !isFree && (\r\n                <>\r\n                  <span className='px-2 py-1'>Locked</span> <FaLock />\r\n                </>\r\n              )}\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='d-flex justify-content-center'>\r\n          <Link\r\n            className='text-white'\r\n            // First get array of coursesEnrolledByStuIds, then finds in them the course id\r\n            // , then check the free status\r\n            to={\r\n              isEnrolledStu\r\n                ? '/exams/' + exam.id + '_' + courseId\r\n                : isFree && '/exams/free/' + exam.id\r\n            }\r\n          >\r\n            <Button\r\n              variant='outline-primary'\r\n              onClick={() => {\r\n                dispatch(resetExamResultLoader())\r\n                setShowModal(true)\r\n              }}\r\n            >\r\n              <FormattedMessage id='btn.start' defaultMessage='Start Exam' />\r\n            </Button>\r\n          </Link>\r\n          {isAuthenticated && courseId && (\r\n            <Link\r\n              className='text-white'\r\n              to={'/result/rank/' + (courseId + '_' + exam.id)}\r\n            >\r\n              <Button\r\n                onClick={() => {\r\n                  dispatch(resetExamResultLoader())\r\n                }}\r\n                variant='outline-primary'\r\n                className='ml-2'\r\n                disabled={!isEnrolledStu && !isFree}\r\n              >\r\n                <FormattedMessage id='btn.rank' defaultMessage='Rank' />\r\n              </Button>\r\n            </Link>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","//import moment from 'moment'\r\nimport * as moment from 'dayjs'\r\nimport React from 'react'\r\nimport { BsFileText } from 'react-icons/bs'\r\n\r\nimport StartExamBtn from './startExamBtn'\r\nconst duration = require('dayjs/plugin/duration')\r\nconst relativeTime = require('dayjs/plugin/relativeTime')\r\nmoment.extend(relativeTime)\r\nmoment.extend(duration)\r\n\r\nexport default function ExamByCat({ exam, courseId = null }) {\r\n  return (\r\n    <div\r\n      className='mb-2 ml-2 pt-3 px-2 border border-secondary' // bg-secondary text-white\r\n      style={{ width: '350px' }}\r\n    >\r\n      <div>\r\n        <h4 className=''>\r\n          {/* <BsLayersFill size='1.5rem' /> */}\r\n          <span className=''>{exam.title}</span>\r\n        </h4>\r\n      </div>\r\n      <div className='mt-1'>\r\n        <p className=''>\r\n          <BsFileText size='1.5rem' className='m-1' />\r\n          <span className='ml-2'>{exam.description}</span>\r\n        </p>\r\n        <hr />\r\n        <StartExamBtn exam={exam} courseId={courseId} />\r\n        <hr />\r\n        <p className='text-center text-muted'>\r\n          Start: {moment(exam.startDate).fromNow()}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Badge } from 'react-bootstrap'\r\nimport { useParams } from 'react-router'\r\nimport CircleLoader from '../../components/customSpinner/circleLoader/circleLoader'\r\nimport ExamByCat from './component/examByCat'\r\n\r\nexport default function ExamListsByCatShower() {\r\n  const { id } = useParams()\r\n  let [name, idA] = [null, null]\r\n  if (id) [name, idA] = id.split('-')\r\n  const [exams, setExams] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + '/exams/category/' + idA)\r\n      .then((response) => {\r\n        setLoading(false)\r\n        setExams(response.data)\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false)\r\n        console.log(e)\r\n      })\r\n  }, [idA])\r\n  return (\r\n    <div className=''>\r\n      {loading && <CircleLoader />}\r\n      <h2 className='text-center'>\r\n        <span className='mr-2'>Available Exams Under</span>\r\n        <Badge variant='warning'>{name}</Badge>\r\n      </h2>\r\n      {!loading && (\r\n        <p className='text-center text-danger'>\r\n          {exams.length < 1 && 'NO Exam is avaiable.'}\r\n        </p>\r\n      )}\r\n      <div className='d-flex justify-content-center flex-wrap'>\r\n        {exams.map((exam) => (\r\n          <ExamByCat key={exam.title} exam={exam} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}