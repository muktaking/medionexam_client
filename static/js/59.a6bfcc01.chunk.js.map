{"version":3,"sources":["utils/queryRouter.js","container/reports/actions/showQuestions.js"],"names":["useQuery","search","useLocation","React","useMemo","URLSearchParams","ShowQuestions","useState","questions","setQuestions","errorMsg","setErrorMsg","token","useSelector","state","auth","query","examId","get","courseId","isAnswers","useEffect","Axios","process","then","res","data","catch","e","message","className","variant","style","overflow","map","ques","ind","Item","qText","canActivate","rolePermitted","coordinator","to","id","qType","stems","stem","index","aStem","toString","qStem","fbStem","generalFeedback","remarkPlugins","remarkGfm","rehypePlugins","rehypeRaw","components","table","node","children","bordered","responsive","img","src","alt","width","fluid","trim"],"mappings":"6GAAA,6DAGO,SAASA,IAAY,IAClBC,EAAWC,cAAXD,OACR,OAAOE,IAAMC,SAAQ,kBAAM,IAAIC,gBAAgBJ,KAAS,CAACA,M,iQCQ5C,SAASK,IAAiB,IAAD,EACJC,mBAAS,IADL,mBAC/BC,EAD+B,KACpBC,EADoB,OAENF,mBAAS,MAFH,mBAE/BG,EAF+B,KAErBC,EAFqB,KAGhCC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,SAC5CI,EAAQhB,cACNiB,EAASD,EAAME,IAAI,UACnBC,EAAWH,EAAME,IAAI,YACrBE,EAAYJ,EAAME,IAAI,WAc5B,OAZAG,qBAAU,WACRC,IAAMJ,IAAN,UACKK,iCADL,oCAC+DN,EAD/D,YACyEE,EADzE,oBAC6FC,IAE1FI,MAAK,SAACC,GACLhB,EAAagB,EAAIC,KAAKlB,cAEvBmB,OAAM,SAACC,GACNjB,EAAYiB,EAAEC,cAEjB,CAACV,EAAUF,EAAQG,IAGpB,6BACE,wBAAIU,UAAU,eACG,MAAdV,EAAoB,YAAc,0BAEpCV,GAAY,kBAAC,IAAD,CAAOqB,QAAQ,UAAUrB,GACtC,yBAAKsB,MAAO,CAAEC,SAAU,SACrBzB,EAAU0B,KAAI,SAACC,EAAMC,GAAP,OACb,kBAAC,IAAD,CAAWN,UAAU,QACnB,kBAAC,IAAUO,KAAX,KACE,kBAAC,IAAD,CAAON,QAAQ,UAAUD,UAAU,YAAnC,gBACgBM,EAAM,GAEtB,8BAAOD,EAAKG,OACX1B,GAAS2B,YAAYC,IAAcC,YAAa7B,IAC/C,kBAAC,OAAD,CAAM8B,GAAI,wBAA0BP,EAAKQ,GAAIb,UAAU,QACrD,kBAAC,IAAD,OAGJ,6BACA,kBAAC,IAAD,CAAOC,QAAQ,QACG,QAAfI,EAAKS,MAAkB,qBAAuB,eAGpC,MAAdxB,EACCe,EAAKU,MAAMX,KAAI,SAACY,EAAMC,GAAP,OACb,kBAAC,IAAUV,KAAX,KAAiBU,EAAQ,EAAI,KAAOD,MAGtC,oCACGX,EAAKU,MAAMX,KAAI,SAACY,EAAMC,GAAP,OACd,kBAAC,IAAUV,KAAX,CAAgBP,UAAU,IACxB,yBACEA,UACE,8BACgB,WAAfK,EAAKS,MACa,MAAfE,EAAKE,MACH,UACA,SACFb,EAAKU,MAAM,GAAGG,SAAWD,EAAQ,GAAGE,WACpC,UACA,oBAGN,8BAAOF,EAAQ,EAAI,MACnB,8BAAOD,EAAKI,OACZ,6BACA,8BACGJ,EAAKK,QAAU,gBAAkBL,EAAKK,aAK9ChB,EAAKiB,iBACJ,kBAAC,IAAUf,KAAX,KACE,kBAAC,IAAD,CACEgB,cAAe,CAACC,KAChBC,cAAe,CAACC,KAChBC,WAAY,CACVC,MAAO,cAAGC,KAAH,IAASC,EAAT,EAASA,SAAT,0CACL,kBAAC,IAAD,CACEC,UAAQ,EACRC,YAAU,EACVhC,UAAU,OACV8B,SAAUA,MAIdG,IAAK,cAAGJ,KAAH,IAASK,EAAT,EAASA,IAAKC,EAAd,EAAcA,IAAd,2CACH,kBAAC,oBAAD,KACE,kBAAC,IAAD,CAAOD,IAAKA,EAAKC,IAAKA,EAAKC,MAAO,IAAKC,OAAK,SAKjD,gBAAkBhC,EAAKiB,gBAAgBgB","file":"static/js/59.a6bfcc01.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useLocation } from 'react-router'\r\n\r\nexport function useQuery() {\r\n  const { search } = useLocation()\r\n  return React.useMemo(() => new URLSearchParams(search), [search])\r\n}\r\n","import Axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Alert, Badge, Image, ListGroup, Table } from 'react-bootstrap'\r\nimport { useQuery } from '../../../utils/queryRouter'\r\nimport { useSelector } from 'react-redux'\r\nimport { canActivate, rolePermitted } from '../../../utils/canActivate'\r\nimport { Link } from 'react-router-dom'\r\nimport { FaEdit } from 'react-icons/fa'\r\nimport { ReactMarkdown } from 'react-markdown/lib/react-markdown'\r\nimport remarkGfm from 'remark-gfm'\r\nimport rehypeRaw from 'rehype-raw'\r\nimport { LazyLoadComponent } from 'react-lazy-load-image-component'\r\n\r\nexport default function ShowQuestions() {\r\n  const [questions, setQuestions] = useState([])\r\n  const [errorMsg, setErrorMsg] = useState(null)\r\n  const token = useSelector((state) => state.auth.token)\r\n  let query = useQuery()\r\n  const examId = query.get('examId')\r\n  const courseId = query.get('courseId')\r\n  const isAnswers = query.get('answers')\r\n\r\n  useEffect(() => {\r\n    Axios.get(\r\n      `${process.env.REACT_APP_SITE_URL}/exams/reports/questions/${examId}_${courseId}?answers=${isAnswers}`\r\n    )\r\n      .then((res) => {\r\n        setQuestions(res.data.questions)\r\n      })\r\n      .catch((e) => {\r\n        setErrorMsg(e.message)\r\n      })\r\n  }, [courseId, examId, isAnswers])\r\n\r\n  return (\r\n    <div>\r\n      <h3 className='text-center'>\r\n        {isAnswers === '0' ? 'Questions' : 'Questions With Answers'}\r\n      </h3>\r\n      {errorMsg && <Alert variant='danger'>{errorMsg}</Alert>}\r\n      <div style={{ overflow: 'auto' }}>\r\n        {questions.map((ques, ind) => (\r\n          <ListGroup className='mb-2'>\r\n            <ListGroup.Item>\r\n              <Badge variant='primary' className='p-1 mr-2'>\r\n                Question No. {ind + 1}\r\n              </Badge>\r\n              <span>{ques.qText}</span>\r\n              {token && canActivate(rolePermitted.coordinator, token) && (\r\n                <Link to={'/question?questionId=' + ques.id} className='ml-2'>\r\n                  <FaEdit />\r\n                </Link>\r\n              )}\r\n              <br />\r\n              <Badge variant='info'>\r\n                {ques.qType === 'sba' ? 'Single Best Answer' : 'True/False'}\r\n              </Badge>\r\n            </ListGroup.Item>\r\n            {isAnswers === '0' ? (\r\n              ques.stems.map((stem, index) => (\r\n                <ListGroup.Item>{index + 1 + '. ' + stem}</ListGroup.Item>\r\n              ))\r\n            ) : (\r\n              <>\r\n                {ques.stems.map((stem, index) => (\r\n                  <ListGroup.Item className=''>\r\n                    <div\r\n                      className={\r\n                        'rounded p-1 text-white bg-' +\r\n                        (ques.qType === 'matrix'\r\n                          ? stem.aStem === '1'\r\n                            ? 'success'\r\n                            : 'danger'\r\n                          : ques.stems[0].aStem === (index + 1).toString()\r\n                          ? 'success'\r\n                          : ' text-secondary')\r\n                      }\r\n                    >\r\n                      <span>{index + 1 + '. '}</span>\r\n                      <span>{stem.qStem}</span>\r\n                      <br />\r\n                      <span>\r\n                        {stem.fbStem && 'Explanation: ' + stem.fbStem}\r\n                      </span>\r\n                    </div>\r\n                  </ListGroup.Item>\r\n                ))}\r\n                {ques.generalFeedback && (\r\n                  <ListGroup.Item>\r\n                    <ReactMarkdown\r\n                      remarkPlugins={[remarkGfm]}\r\n                      rehypePlugins={[rehypeRaw]}\r\n                      components={{\r\n                        table: ({ node, children, ...props }) => (\r\n                          <Table\r\n                            bordered\r\n                            responsive\r\n                            className='w-50'\r\n                            children={children}\r\n                          />\r\n                        ),\r\n\r\n                        img: ({ node, src, alt, ...props }) => (\r\n                          <LazyLoadComponent>\r\n                            <Image src={src} alt={alt} width={350} fluid />\r\n                          </LazyLoadComponent>\r\n                        )\r\n                      }}\r\n                    >\r\n                      {'Explanation: ' + ques.generalFeedback.trim()}\r\n                    </ReactMarkdown>\r\n                  </ListGroup.Item>\r\n                )}\r\n              </>\r\n            )}\r\n          </ListGroup>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}