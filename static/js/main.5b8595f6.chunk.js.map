{"version":3,"sources":["components/scrollToTopPage/scrollToTopPage.js","App.jsx","store/index.js","index.js","store/middleware/index.js","utils/canActivate.js","store/auth.js","store/api.js","store/notification.js","store/question.js","store/courses.js","store/exams.js","store/user.js","store/category.js","store/dashboard.js","store/examPaper.js","utils/errorHandler.js","container/routePages.jsx","utils/setAuthorizationToken.js"],"names":["ScrollToTopPage","pathname","useLocation","useEffect","window","scrollTo","App","this","props","onTryAutologin","Component","connect","dispatch","checkAuthState","appReducer","combineReducers","api","apiReducer","auth","authReducer","user","userReducer","category","categoryReducer","question","questionReducer","examPaper","examPaperReducer","exams","examsReducer","dashboard","dashboardReducer","courses","coursesReducer","notification","notificationReducer","rootReducer","state","action","type","undefined","store","configureStore","reducer","rootReducers","middleware","getDefaultMiddleware","getState","next","a","async","apiCallBegun","payload","url","method","data","config","onStart","onSuccess","onError","sendToken","setAuthorizationToken","token","axios","request","baseURL","process","response","apiCallSuccess","authSuccess","expirationDate","Date","getTime","expireIn","localStorage","setItem","accessToken","id","checkAuthTimeOut","getNotification","fetchFreshNotification","errorHandler","apiCallFail","ReactDOM","hydrate","locale","defaultLocale","messages","document","getElementById","rolePermitted","guest","student","mentor","moderator","coordinator","admin","roleArray","roleToString","num","identityStatusToString","loginProviderToString","canActivate","role","jwtDecode","slice","createSlice","name","initialState","loading","userId","error","reducers","authStart","authEnd","authFail","authReset","logout","actions","username","password","authData","expirationTime","setTimeout","logoutLoader","getItem","removeItem","result","apiCallReset","freshNoti","getFreshNotification","loadingStart","fetchNotificationLoader","nStore","JSON","parse","noti","expiry","filter","n","value","includes","questions","getQuestions","getResponse","resetResponse","resetResponseLoader","getQuestionLoader","getQuestionByCategoryLoader","createQuestionLoader","questionData","FormData","Object","keys","forEach","key","append","headers","editQuestionLoader","deleteQuestionLoader","coursesEnrolledByStu","expectedEnrolledStuIds","getCourses","getCoursesEnrolledByStu","courseError","courseReset","fetchCourseLoader","fetchCourseByFilterLoader","pgCourseType","faculty","search","console","log","fetchCourseEnrolledByStuLoader","courseResetLoader","questionIdsByOrder","examId","singleQuestionMark","singleStemMark","penaltyMark","timeLimit","isAnswerRestricted","examResult","totalMark","totalScore","totalPenaltyMark","totalScorePercentage","timeTakenToComplete","rankLoading","rank","exam","examError","disableQuestions","resetExamResult","getAllExams","getExamById","e","push","getFreeExamById","getExamError","resetExamError","postExamById","resultArray","examRankStart","examRankById","postExamError","disableQuestionsAdd","resetDisableQuestions","getAllExamsLoader","getExamByIdLoader","getFreeExamByIdLoader","postExamByIdLoader","postFreeExamByIdLoader","examRankByIdLoader","courseId","resetExamResultLoader","firstName","lastName","userName","email","mobile","userFrom","now","address","avatar","gender","institution","getUser","createdAt","getUserLoader","categories","catHierarchy","getCategory","fetchCategory","createCategory","featuredExams","userExamInfo","totalExam","upcomingExam","userExamStat","dashboardStudent","userExamStatLoader","ids","success","selectedQuestions","onLoading","onLoadingLoader","postExamProfile","examSpec","responseData","statusCode","message","NotFoundPage","lazy","pMinDelay","Landing","InnerContent","Login","LogoutPage","Signup","Reset","override","css","StickyBottomContext","createContext","isAuthenticated","useState","stickyState","setStickyState","routes","Provider","fallback","path","component","exact","render","to","defaults","common"],"mappings":"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","file":"static/js/main.5b8595f6.chunk.js","sourcesContent":["import { useEffect } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nexport default function ScrollToTopPage() {\r\n  const { pathname } = useLocation()\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [pathname])\r\n\r\n  return null\r\n}\r\n\r\n/*\r\nHow to use:\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  );\r\n}\r\n*/\r\n","/* eslint-disable no-undef */\r\n/* eslint-disable react/prop-types */\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport './assets/scss/style.scss'\r\nimport ScrollToTopPage from './components/scrollToTopPage/scrollToTopPage'\r\nimport RoutePages from './container/routePages'\r\nimport { checkAuthState } from './store/auth'\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onTryAutologin()\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <BrowserRouter>\r\n          <ScrollToTopPage />\r\n          <RoutePages />\r\n        </BrowserRouter>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onTryAutologin: () => {\r\n      dispatch(checkAuthState())\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(App)\r\n","import { combineReducers } from 'redux'\r\nimport apiReducer from './api'\r\nimport authReducer from './auth'\r\nimport categoryReducer from './category'\r\nimport coursesReducer from './courses'\r\nimport dashboardReducer from './dashboard'\r\nimport examPaperReducer from './examPaper'\r\nimport examsReducer from './exams'\r\nimport notificationReducer from './notification'\r\nimport questionReducer from './question'\r\nimport userReducer from './user'\r\n\r\nconst appReducer = combineReducers({\r\n  api: apiReducer,\r\n  auth: authReducer,\r\n  user: userReducer,\r\n  category: categoryReducer,\r\n  question: questionReducer,\r\n  examPaper: examPaperReducer,\r\n  exams: examsReducer,\r\n  dashboard: dashboardReducer,\r\n  courses: coursesReducer,\r\n  notification: notificationReducer\r\n})\r\n\r\nexport const rootReducer = (state, action) => {\r\n  if (action.type === 'RESET_APP') {\r\n    state = undefined\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n\r\nexport default rootReducer\r\n","/* eslint-disable prettier/prettier */\r\n/* eslint-disable no-undef */\r\n\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { IntlProvider } from \"react-intl\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport Bangla from \"./lang/bn.json\";\r\nimport rootReducers from \"./store\";\r\nimport { api } from \"./store/middleware/index\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducers,\r\n  middleware: [...getDefaultMiddleware(), api],\r\n});\r\n\r\nReactDOM.hydrate(\r\n  <Provider store={store}>\r\n    <IntlProvider locale={process.env.REACT_APP_LANG} defaultLocale={process.env.REACT_APP_DEFAULT_LANG}  messages={process.env.REACT_APP_LANG === 'bn' && Bangla}>\r\n      <App />\r\n    </IntlProvider>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n","/*\r\n\r\nit is an simple api middleware to generalize get and send data to server\r\n\r\n\r\n\r\n*/\r\n\r\nimport axios from 'axios'\r\nimport errorHandler from '../../utils/errorHandler'\r\nimport setAuthorizationToken from '../../utils/setAuthorizationToken'\r\nimport { apiCallBegun, apiCallFail, apiCallSuccess } from '../api'\r\nimport { authSuccess, checkAuthTimeOut } from '../auth'\r\nimport { fetchFreshNotification, getNotification } from '../notification'\r\n\r\n//api middleware function\r\n\r\nexport const api =\r\n  ({ getState, dispatch }) =>\r\n  (next) =>\r\n  async (action) => {\r\n    if (action.type !== apiCallBegun.type) return next(action)\r\n\r\n    const {\r\n      url,\r\n      method,\r\n      data,\r\n      config,\r\n      onStart,\r\n      onSuccess,\r\n      onError,\r\n      sendToken\r\n    } = action.payload\r\n\r\n    if (onStart) dispatch({ type: onStart })\r\n    next(action)\r\n\r\n    try {\r\n      if (sendToken) {\r\n        setAuthorizationToken(getState().auth.token)\r\n      }\r\n      // let imageData;\r\n      // if (data && data.image) {\r\n      //   imageData = new FormData();\r\n      //   Object.keys().forEach((e) => {\r\n      //     imageData.append(e, data[e]);\r\n      //   });\r\n      //   console.log(imageData);\r\n      //   data = imageData;\r\n      // }\r\n\r\n      const response = await axios.request({\r\n        baseURL: process.env.REACT_APP_SITE_URL,\r\n        url,\r\n        method,\r\n        data: data,\r\n        config\r\n      })\r\n\r\n      dispatch(apiCallSuccess(response.data))\r\n\r\n      if (onSuccess) {\r\n        if (onSuccess === authSuccess.type) {\r\n          const expirationDate = new Date(\r\n            new Date().getTime() + response.data.expireIn * 1000\r\n          )\r\n          localStorage.setItem('jwtToken', response.data.accessToken)\r\n          localStorage.setItem('expirationDate', expirationDate)\r\n          localStorage.setItem('userId', response.data.id)\r\n          dispatch(checkAuthTimeOut(response.data.expireIn))\r\n          dispatch({ type: authSuccess.type, payload: response.data })\r\n        } else if (onSuccess === getNotification.type) {\r\n          dispatch({ type: getNotification.type, payload: response.data })\r\n          dispatch(fetchFreshNotification())\r\n        } else dispatch({ type: onSuccess, payload: response.data })\r\n      }\r\n    } catch (error) {\r\n      const response = errorHandler(error)\r\n      dispatch(apiCallFail(response))\r\n      if (onError) dispatch({ type: onError, payload: response })\r\n    }\r\n  }\r\n","import jwtDecode from 'jwt-decode'\r\n\r\nexport const rolePermitted = {\r\n  guest: 0,\r\n  student: 1,\r\n  mentor: 2,\r\n  moderator: 3,\r\n  coordinator: 4,\r\n  admin: 5\r\n}\r\n\r\nexport const roleArray = [\r\n  'Student',\r\n  'Mentor',\r\n  'Moderator',\r\n  'Coordinator',\r\n  'Admin'\r\n]\r\n\r\nexport function roleToString(num) {\r\n  switch (num) {\r\n    case 1:\r\n      return 'Student'\r\n    case 2:\r\n      return 'Mentor'\r\n    case 3:\r\n      return 'Modarator'\r\n    case 4:\r\n      return 'Coordinator'\r\n    case 5:\r\n      return 'Admin'\r\n\r\n    default:\r\n      return 'Guest'\r\n  }\r\n}\r\n\r\nexport function identityStatusToString(num) {\r\n  switch (num) {\r\n    case 0:\r\n      return 'Unchecked'\r\n    case 1:\r\n      return 'Checked'\r\n    case 2:\r\n      return 'Unrequired'\r\n    default:\r\n      return 'Unrequired'\r\n  }\r\n}\r\n\r\nexport function loginProviderToString(num) {\r\n  switch (num) {\r\n    case 0:\r\n      return 'Local'\r\n    case 1:\r\n      return 'Facebook'\r\n    default:\r\n      return 'Local'\r\n  }\r\n}\r\n\r\nexport const canActivate = (role, token) => {\r\n  const tokenRole = token ? jwtDecode(token).role : -1\r\n  return tokenRole >= role\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegun } from './api'\r\n\r\nconst slice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    loading: false,\r\n    token: null,\r\n    userId: null,\r\n    role: null,\r\n    error: null\r\n  },\r\n  reducers: {\r\n    authStart: (auth) => {\r\n      auth.loading = true\r\n    },\r\n    authEnd: (auth) => {\r\n      auth.loading = false\r\n    },\r\n    authSuccess: (auth, action) => {\r\n      auth.loading = false\r\n      auth.token = action.payload.accessToken\r\n      auth.userId = action.payload.id\r\n      auth.role = action.payload.role\r\n      auth.expireIn = action.payload.expireIn\r\n      auth.error = null\r\n    },\r\n    authFail: (auth, action) => {\r\n      auth.loading = false\r\n      auth.error = action.payload\r\n    },\r\n    authReset: (auth) => {\r\n      auth.error = null\r\n    },\r\n    logout: (auth) => {\r\n      auth.token = null\r\n      auth.userId = null\r\n      auth.expireIn = null\r\n    }\r\n  }\r\n})\r\n\r\nexport const { authStart, authEnd, authSuccess, authFail, authReset, logout } =\r\n  slice.actions\r\n\r\nexport default slice.reducer\r\n\r\n//declaring some variable\r\n\r\nconst url = '/auth/login'\r\nconst method = 'post'\r\n\r\nexport const auth = (username, password) => (dispatch) => {\r\n  const authData = {\r\n    username,\r\n    password\r\n  }\r\n  dispatch(\r\n    apiCallBegun({\r\n      url,\r\n      method,\r\n      data: authData,\r\n      onStart: authStart.type,\r\n      onSuccess: authSuccess.type,\r\n      onError: authFail.type\r\n    })\r\n  )\r\n}\r\nexport const autoAuth = () => (dispatch) => {\r\n  const token = localStorage.getItem('jwtToken')\r\n  if (token) {\r\n    dispatch(\r\n      authSuccess({\r\n        token\r\n      })\r\n    )\r\n  }\r\n}\r\n\r\nexport const checkAuthTimeOut = (expirationTime) => (dispatch) => {\r\n  setTimeout(() => {\r\n    dispatch(logoutLoader())\r\n  }, expirationTime * 1000)\r\n}\r\n\r\nexport const checkAuthState = () => (dispatch) => {\r\n  const token = localStorage.getItem('jwtToken')\r\n  if (!token) {\r\n    dispatch(logout())\r\n  } else {\r\n    const expirationDate = new Date(localStorage.getItem('expirationDate'))\r\n    if (expirationDate > new Date()) {\r\n      const userId = localStorage.getItem('userId')\r\n      dispatch(authSuccess({ accessToken: token, id: userId }))\r\n      dispatch(\r\n        checkAuthTimeOut(\r\n          (expirationDate.getTime() - new Date().getTime()) / 1000\r\n        )\r\n      )\r\n    } else {\r\n      dispatch(logoutLoader())\r\n    }\r\n  }\r\n}\r\n\r\nexport const logoutLoader = () => (dispatch) => {\r\n  localStorage.removeItem('expirationDate')\r\n  localStorage.removeItem('userId')\r\n  localStorage.removeItem('jwtToken')\r\n  dispatch(logout())\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst slice = createSlice({\r\n  name: 'api',\r\n  initialState: { result: null, error: null },\r\n  reducers: {\r\n    apiCallBegun: (api, action) => {\r\n      //api.loading = true;\r\n    },\r\n    apiCallSuccess: (api, action) => {\r\n      //api.loading = false;\r\n      api.result = action.payload\r\n    },\r\n    apiCallFail: (api, action) => {\r\n      api.error = action.payload\r\n    },\r\n    apiCallReset: (api) => {\r\n      api.result = null\r\n      api.error = null\r\n    }\r\n  }\r\n})\r\n\r\nexport const { apiCallBegun, apiCallSuccess, apiCallFail, apiCallReset } =\r\n  slice.actions\r\n\r\nexport default slice.reducer\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegun } from './api'\r\n\r\nconst slice = createSlice({\r\n  name: 'Notification',\r\n  initialState: {\r\n    loading: false,\r\n    notification: [],\r\n    freshNoti: []\r\n  },\r\n  reducers: {\r\n    getNotification: (state, action) => {\r\n      state.notification = action.payload\r\n      state.loading = false\r\n    },\r\n    //fresh notification means that is not untracked by user\r\n    getFreshNotification: (state, action) => {\r\n      state.freshNoti = action.payload\r\n    },\r\n    loadingStart: (state, action) => {\r\n      state.loading = true\r\n    }\r\n  }\r\n})\r\nexport const { getNotification, getFreshNotification, loadingStart } =\r\n  slice.actions\r\nexport default slice.reducer\r\n\r\nconst url = '/notification'\r\nconst method = 'get'\r\n\r\nexport const fetchNotificationLoader = () => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url,\r\n      method,\r\n      onStart: loadingStart.type,\r\n      onSuccess: getNotification.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const fetchFreshNotification = () => (dispatch, getState) => {\r\n  const nStore = JSON.parse(localStorage.getItem('noti'))\r\n  const noti = getState().notification.notification\r\n  let freshNoti = []\r\n  //console.log(typeof nStore.value)\r\n  if (nStore) {\r\n    if (new Date().getTime() > nStore.expiry) {\r\n      localStorage.removeItem('noti')\r\n      dispatch(getFreshNotification(noti))\r\n    } else {\r\n      freshNoti = noti.filter((n) =>\r\n        nStore.value.includes(n.id) ? false : true\r\n      )\r\n      dispatch(getFreshNotification(freshNoti))\r\n    }\r\n  } else {\r\n    dispatch(getFreshNotification(noti))\r\n  }\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegun } from './api'\r\n\r\nconst slice = createSlice({\r\n  name: 'Question',\r\n  initialState: {\r\n    questions: [],\r\n    error: null,\r\n    response: null,\r\n    loading: false\r\n  },\r\n  reducers: {\r\n    getQuestions: (state, action) => {\r\n      state.questions = action.payload\r\n    },\r\n    loadingStart: (state, action) => {\r\n      state.loading = true\r\n    },\r\n    getResponse: (state, action) => {\r\n      state.response = action.payload\r\n      state.loading = false\r\n    },\r\n    resetResponse: (state, action) => {\r\n      state.response = null\r\n      state.loading = false\r\n    }\r\n  }\r\n})\r\n\r\nexport const { getQuestions, loadingStart, getResponse, resetResponse } =\r\n  slice.actions\r\n\r\nexport default slice.reducer\r\n\r\nexport const resetResponseLoader = () => (dispatch) => {\r\n  dispatch({\r\n    type: resetResponse.type\r\n  })\r\n}\r\n\r\nexport const getQuestionLoader = () => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/questions',\r\n      method: 'get',\r\n      //sendToken: true,\r\n      //data,\r\n      //config,\r\n      onSuccess: getQuestions.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const getQuestionByCategoryLoader = (id) => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/questions/category/' + id,\r\n      method: 'get',\r\n      onSuccess: getQuestions.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const createQuestionLoader = (data) => (dispatch) => {\r\n  const config = { headers: { 'Content-Type': 'multipart/form-data' } }\r\n  const questionData = new FormData()\r\n  Object.keys(data).forEach((key) => {\r\n    data[key] && questionData.append(key, data[key])\r\n  })\r\n\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/questions',\r\n      method: 'post',\r\n      sendToken: true,\r\n      data,\r\n      config,\r\n      onStart: loadingStart.type,\r\n      onSuccess: getResponse.type,\r\n      onError: getResponse.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const uploadQuestionLoader = (data) => (dispatch) => {\r\n  const config = { headers: { 'Content-Type': 'multipart/form-data' } }\r\n  const questionData = new FormData()\r\n  Object.keys(data).forEach((key) => {\r\n    data[key] && questionData.append(key, data[key])\r\n  })\r\n\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/questions/files',\r\n      method: 'post',\r\n      sendToken: true,\r\n      data,\r\n      config\r\n    })\r\n  )\r\n}\r\n\r\nexport const editQuestionLoader = (id, data) => (dispatch) => {\r\n  const config = { headers: { 'Content-Type': 'multipart/form-data' } }\r\n  const questionData = new FormData()\r\n  Object.keys(data).forEach((key) => {\r\n    data[key] && questionData.append(key, data[key])\r\n  })\r\n\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/questions/' + id,\r\n      method: 'patch',\r\n      sendToken: true,\r\n      data,\r\n      config,\r\n      onStart: loadingStart.type,\r\n      onSuccess: getResponse.type,\r\n      onError: getResponse.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const deleteQuestionLoader = (id) => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/questions/' + id,\r\n      method: 'delete',\r\n      sendToken: true,\r\n      onStart: loadingStart.type,\r\n      onSuccess: getResponse.type,\r\n      onError: getResponse.type\r\n    })\r\n  )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegun } from './api'\r\n\r\nconst slice = createSlice({\r\n  name: 'Courses',\r\n  initialState: {\r\n    loading: false,\r\n    courses: null,\r\n    coursesEnrolledByStu: null,\r\n    expectedEnrolledStuIds: null,\r\n    error: null\r\n  },\r\n  reducers: {\r\n    getCourses: (state, action) => {\r\n      state.courses = action.payload\r\n      state.loading = false\r\n    },\r\n    getCoursesEnrolledByStu: (state, action) => {\r\n      state.coursesEnrolledByStu = action.payload\r\n      state.loading = false\r\n    },\r\n    loadingStart: (state, action) => {\r\n      state.loading = true\r\n    },\r\n    courseError: (state, action) => {\r\n      state.loading = false\r\n      state.error = action.payload\r\n    },\r\n    courseReset: (state, action) => {\r\n      state.loading = false\r\n      state.error = null\r\n    }\r\n  }\r\n})\r\nexport const {\r\n  getCourses,\r\n  getCoursesEnrolledByStu,\r\n  loadingStart,\r\n  courseError,\r\n  courseReset\r\n} = slice.actions\r\nexport default slice.reducer\r\n\r\nconst url = '/courses'\r\nconst method = 'get'\r\n\r\nexport const fetchCourseLoader = () => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url,\r\n      method,\r\n      onStart: loadingStart.type,\r\n      onSuccess: getCourses.type,\r\n      onError: courseError.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const fetchCourseByFilterLoader =\r\n  (pgCourseType, faculty, search) => (dispatch) => {\r\n    console.log(search)\r\n    dispatch(\r\n      apiCallBegun({\r\n        url:\r\n          url +\r\n          '/filter?' +\r\n          (pgCourseType ? 'pgCourseType=' + pgCourseType + '&' : '') +\r\n          (faculty ? 'faculty=' + faculty + '&' : ' ') +\r\n          (search ? '&search=' + search : ''),\r\n        method,\r\n        onStart: loadingStart.type,\r\n        onSuccess: getCourses.type,\r\n        onError: courseError.type\r\n      })\r\n    )\r\n  }\r\n\r\nexport const fetchCourseEnrolledByStuLoader = () => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/courses/enrolled/courses/',\r\n      method,\r\n      onStart: loadingStart.type,\r\n      onSuccess: getCoursesEnrolledByStu.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const courseResetLoader = () => (dispatch) => {\r\n  dispatch(courseReset())\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegun } from './api'\r\n\r\nconst slice = createSlice({\r\n  name: 'Exams',\r\n  initialState: {\r\n    id: null,\r\n    questions: [],\r\n    questionIdsByOrder: [],\r\n    examId: null,\r\n    singleQuestionMark: null,\r\n    singleStemMark: null,\r\n    penaltyMark: null,\r\n    timeLimit: null,\r\n    type: null,\r\n    isAnswerRestricted: true,\r\n    examResult: null,\r\n    totalMark: null,\r\n    totalScore: null,\r\n    totalPenaltyMark: null,\r\n    totalScorePercentage: null,\r\n    timeTakenToComplete: null,\r\n    rankLoading: false,\r\n    rank: null,\r\n    exam: null, // store the individual exam\r\n    error: null,\r\n    examError: null,\r\n    exams: [], // store the all exam lists\r\n    disableQuestions: []\r\n  },\r\n  reducers: {\r\n    resetExamResult: (state) => {\r\n      state.examId = null\r\n      state.examResult = null\r\n      state.totalMark = null\r\n      state.totalScore = null\r\n      state.totalPenaltyMark = null\r\n      state.totalScorePercentage = null\r\n      state.timeTakenToComplete = null\r\n      state.timeLimit = null\r\n      state.type = null\r\n      state.isAnswerRestricted = true\r\n      state.rankLoading = false\r\n      state.rank = null\r\n      state.exam = null\r\n      state.error = null\r\n      state.questionIdsByOrder = []\r\n      state.disableQuestions = []\r\n    },\r\n    getAllExams: (state, action) => {\r\n      state.exams = action.payload\r\n    },\r\n    getExamById: (state, action) => {\r\n      state.questions = action.payload.questions\r\n      action.payload.questions.forEach((e) => {\r\n        state.questionIdsByOrder.push(e.id)\r\n      })\r\n      state.id = action.payload.exam.id\r\n      state.singleQuestionMark = action.payload.exam.singleQuestionMark\r\n      state.singleStemMark = action.payload.exam.singleStemMark\r\n      state.timeLimit = action.payload.exam.timeLimit\r\n      state.type = action.payload.exam.type\r\n      state.penaltyMark = action.payload.exam.penaltyMark\r\n      state.isAnswerRestricted = action.payload.exam.isAnswerRestricted\r\n    },\r\n    getFreeExamById: (state, action) => {\r\n      state.questions = action.payload.questions\r\n      action.payload.questions.forEach((e) => {\r\n        state.questionIdsByOrder.push(e.id)\r\n      })\r\n      state.id = action.payload.exam.id\r\n      state.singleQuestionMark = action.payload.exam.singleQuestionMark\r\n      state.singleStemMark = action.payload.exam.singleStemMark\r\n      state.timeLimit = action.payload.exam.timeLimit\r\n      state.penaltyMark = action.payload.exam.penaltyMark\r\n    },\r\n    getExamError: (state, action) => {\r\n      state.examError = action.payload\r\n    },\r\n    resetExamError: (state) => {\r\n      state.examError = null\r\n    },\r\n    postExamById: (state, action) => {\r\n      state.examId = action.payload.examId\r\n      state.examResult = action.payload.resultArray\r\n      state.totalMark = action.payload.totalMark\r\n      state.totalScore = action.payload.totalScore\r\n      state.totalPenaltyMark = action.payload.totalPenaltyMark\r\n      state.totalScorePercentage = action.payload.totalScorePercentage\r\n      state.timeTakenToComplete = action.payload.timeTakenToComplete\r\n    },\r\n    examRankStart: (state) => {\r\n      state.rankLoading = true\r\n    },\r\n    examRankById: (state, action) => {\r\n      state.rankLoading = false\r\n      state.rank = action.payload.rank\r\n      state.exam = action.payload.exam\r\n    },\r\n    postExamError: (state, action) => {\r\n      state.rankLoading = false\r\n      state.error = action.payload\r\n    },\r\n    disableQuestionsAdd: (state, action) => {\r\n      state.disableQuestions.push(action.payload)\r\n    },\r\n    resetDisableQuestions: (state) => {\r\n      state.disableQuestions = []\r\n    }\r\n  }\r\n})\r\n\r\nexport const {\r\n  resetExamResult,\r\n  getAllExams,\r\n  getExamById,\r\n  getFreeExamById,\r\n  getExamError,\r\n  resetExamError,\r\n  postExamById,\r\n  examRankStart,\r\n  examRankById,\r\n  postExamError,\r\n  disableQuestionsAdd,\r\n  resetDisableQuestions\r\n} = slice.actions\r\n\r\nexport default slice.reducer\r\n\r\nexport const getAllExamsLoader = () => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/exams/',\r\n      method: 'get',\r\n      sendToken: true,\r\n      onSuccess: getAllExams.type,\r\n      onError: getExamError.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const getAllFreeExamsLoader = () => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/exams/free',\r\n      method: 'get',\r\n      onSuccess: getAllExams.type,\r\n      onError: getExamError.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const getExamByIdLoader = (id) => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/exams/questions/' + id,\r\n      method: 'get',\r\n      sendToken: true,\r\n      onSuccess: getExamById.type,\r\n      onError: getExamError.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const getFreeExamByIdLoader = (id) => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/exams/free/questions/' + id,\r\n      method: 'get',\r\n      sendToken: true,\r\n      onSuccess: getFreeExamById.type,\r\n      onError: getExamError.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const postExamByIdLoader = (data) => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/postexams',\r\n      method: 'post',\r\n      data: data,\r\n      sendToken: true,\r\n      onSuccess: postExamById.type,\r\n      onError: postExamError.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const postFreeExamByIdLoader = (data) => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/postexams/free',\r\n      method: 'post',\r\n      data: data,\r\n      onSuccess: postExamById.type,\r\n      onError: postExamError.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const examRankByIdLoader = (id, courseId) => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url: '/postexams/rank/' + id,\r\n      data: { id, courseId },\r\n      method: 'post',\r\n      onStart: examRankStart.type,\r\n      onSuccess: examRankById.type,\r\n      onError: postExamError.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const resetExamResultLoader = () => (dispatch) => {\r\n  dispatch({ type: resetExamResult.type })\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegun } from './api'\r\n\r\nconst slice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    id: null,\r\n    firstName: null,\r\n    lastName: null,\r\n    userName: null,\r\n    email: null,\r\n    role: null,\r\n    mobile: null,\r\n    userFrom: Date.now(),\r\n    address: null,\r\n    avatar: null,\r\n    gender: null,\r\n    faculty: null,\r\n    institution: null\r\n  },\r\n  reducers: {\r\n    getUser: (user, action) => {\r\n      user.id = action.payload.id\r\n      user.firstName = action.payload.firstName\r\n      user.lastName = action.payload.lastName\r\n      user.userName = action.payload.userName\r\n      user.email = action.payload.email\r\n      user.mobile = action.payload.mobile\r\n      user.userFrom = action.payload.createdAt\r\n      user.role = action.payload.role\r\n      user.address = action.payload.address\r\n      user.avatar = action.payload.avatar\r\n      user.gender = action.payload.gender\r\n      user.faculty = action.payload.faculty\r\n      user.institution = action.payload.institution\r\n    }\r\n  }\r\n})\r\nexport const { getUser } = slice.actions\r\nexport default slice.reducer\r\n\r\nconst url = '/users'\r\nconst method = 'get'\r\n\r\nexport const getUserLoader = () => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url,\r\n      method,\r\n      onSuccess: getUser.type,\r\n      sendToken: true\r\n    })\r\n  )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegun } from './api'\r\n\r\nconst slice = createSlice({\r\n  name: 'Category',\r\n  initialState: { categories: [], catHierarchy: [] },\r\n  reducers: {\r\n    getCategory: (state, action) => {\r\n      state.categories = action.payload.categories\r\n      state.catHierarchy = action.payload.catHierarchy\r\n    }\r\n  }\r\n})\r\n\r\nexport const { getCategory } = slice.actions\r\nexport default slice.reducer\r\n\r\nconst url = '/categories'\r\nconst method = 'get'\r\nexport const fetchCategory = () => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url,\r\n      method,\r\n      onSuccess: getCategory.type\r\n    })\r\n  )\r\n}\r\n\r\nexport const createCategory = (data) => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url,\r\n      method: 'post',\r\n      data,\r\n      sendToken: true\r\n    })\r\n  )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegun } from './api'\r\n\r\nconst slice = createSlice({\r\n  name: 'dashboard',\r\n  initialState: {\r\n    featuredExams: [],\r\n    userExamInfo: {\r\n      totalExam: [0, 0],\r\n      rank: [1, 100],\r\n      upcomingExam: ['No Exam', '01-02-03', null],\r\n      result: [0.0, 100]\r\n    },\r\n    userExamStat: null\r\n  },\r\n  reducers: {\r\n    dashboardStudent: (state, action) => {\r\n      state.featuredExams = action.payload.featuredExams\r\n      state.userExamInfo = action.payload.userExamInfo\r\n      state.userExamStat = action.payload.userExamStat\r\n    },\r\n    userExamStat: (state, action) => {\r\n      state.userExamStat = action.payload.userExamStat\r\n    }\r\n  }\r\n})\r\n\r\nexport const { dashboardStudent, userExamStat } = slice.actions\r\n\r\nexport default slice.reducer\r\n\r\nconst url = '/dashboard/examstat'\r\nconst method = 'get'\r\n\r\nexport const userExamStatLoader = () => (dispatch) => {\r\n  dispatch(\r\n    apiCallBegun({\r\n      url,\r\n      method,\r\n      onSuccess: userExamStat.type,\r\n      sendToken: true\r\n    })\r\n  )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { apiCallBegun } from './api'\r\n\r\nconst slice = createSlice({\r\n  name: 'ExamPaper',\r\n  initialState: {\r\n    loading: false,\r\n    questions: [],\r\n    ids: [],\r\n    success: null,\r\n    error: null\r\n  },\r\n  reducers: {\r\n    selectedQuestions: (state, action) => {\r\n      state.questions = action.payload.questions\r\n      state.ids = action.payload.ids\r\n    },\r\n    onLoading: (state) => {\r\n      state.loading = true\r\n    },\r\n    onSuccess: (state, action) => {\r\n      state.success = action.payload\r\n      state.loading = false\r\n    },\r\n    onError: (state, action) => {\r\n      state.error = action.payload\r\n      state.loading = false\r\n    }\r\n  }\r\n})\r\n\r\nexport const { selectedQuestions, onSuccess, onError, onLoading } =\r\n  slice.actions\r\n\r\nexport default slice.reducer\r\n\r\nexport const selectedQuestionsLoader = (questions, ids) => (dispatch) => {\r\n  dispatch(selectedQuestions({ questions, ids }))\r\n}\r\n\r\nexport const onLoadingLoader = () => (dispatch) => {\r\n  dispatch({ type: onLoading.type })\r\n}\r\n\r\nexport const postExamProfile =\r\n  (examSpec, questions, id = null) =>\r\n  (dispatch) => {\r\n    dispatch(\r\n      apiCallBegun({\r\n        url: id ? `/exams/${id}` : '/exams',\r\n        method: id ? 'patch' : 'post',\r\n        data: { ...examSpec, questions },\r\n        onSuccess: onSuccess.type,\r\n        onError: onError.type,\r\n        sendToken: true\r\n      })\r\n    )\r\n  }\r\n","export default function errorHandler(e) {\r\n  if (e.response) {\r\n    // checking if server is down, no response will occur\r\n    const responseData = e.response.data\r\n\r\n    if (responseData.statusCode === 400) {\r\n      // server validation error\r\n      // let message = ''\r\n      // try {\r\n      //   responseData.message.forEach((v) => {\r\n      //     message += `${v.value} is not valid in [ ${\r\n      //       v.property\r\n      //     } ] field due to \" ${Object.values(v.constraints).toString()} \"`\r\n      //   })\r\n      // } catch (error) {\r\n      //   message = responseData.error\r\n      // }\r\n\r\n      return responseData.message\r\n    } else {\r\n      //for other errors\r\n      return responseData.message\r\n    }\r\n  } else {\r\n    // if server has no any response\r\n    return 'Server may be down. Please try sometime later'\r\n  }\r\n}\r\n","import { css } from '@emotion/core'\r\nimport pMinDelay from 'p-min-delay'\r\nimport React, { createContext, lazy, Suspense, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport ClimbingBoxLoader from 'react-spinners/ClimbingBoxLoader'\r\nimport { canActivate, rolePermitted } from '../utils/canActivate'\r\n//import NotFoundPage from \"./404\";\r\nconst mDelay = 500\r\n\r\nconst NotFoundPage = lazy(() => pMinDelay(import('./404'), mDelay))\r\n//import Landing from \"./landing/landing\";\r\nlet Landing = lazy(() => pMinDelay(import('./landing/landing'), mDelay))\r\n//import InnerContent from \"./layout\";\r\nlet InnerContent = lazy(() => pMinDelay(import('./layout'), mDelay))\r\n//import Login from \"./registration/login\";\r\nconst Login = lazy(() => pMinDelay(import('./registration/login'), mDelay))\r\n//import LogoutPage from \"./registration/logout\";\r\nconst LogoutPage = lazy(() =>\r\n  pMinDelay(import('./registration/logout'), mDelay)\r\n)\r\n//import Signup from \"./registration/signup\";\r\nconst Signup = lazy(() => pMinDelay(import('./registration/signup'), mDelay))\r\n\r\nconst Reset = lazy(() => pMinDelay(import('./registration/reset'), mDelay))\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 45vh auto;\r\n  bordeClimbingBoxLoader\r\n  r-color: red;\r\n`\r\nexport const StickyBottomContext = createContext()\r\n\r\nconst RoutePages = (props) => {\r\n  const [stickyState, setStickyState] = useState(true)\r\n\r\n  let routes = (\r\n    <StickyBottomContext.Provider value={{ stickyState, setStickyState }}>\r\n      <Suspense fallback={<ClimbingBoxLoader css={override} />}>\r\n        <Switch>\r\n          <Route path='/login' component={Login} />\r\n          <Route path='/signup' component={Signup} />\r\n          <Route path='/reset/:id' component={Reset} />\r\n          <Route path='/exams' exact component={InnerContent} />\r\n          <Route path='/exams/courses/:id' component={InnerContent} />\r\n          <Route path='/exams/:id' component={InnerContent} />\r\n          {/* <Route path='/exams/:id' exact component={InnerContent} /> */}\r\n          <Route path='/courses' exact component={InnerContent} />\r\n          <Route path='/courses/:id' exact component={InnerContent} />\r\n          <Route path='/exams/category/:id' exact component={InnerContent} />\r\n          <Route path='/exams/free/:id' component={InnerContent} />\r\n          <Route path='/result' component={InnerContent} />\r\n          <Route path='/result/rank/:id' component={InnerContent} />\r\n          <Route path='/print' component={InnerContent} />\r\n          <Route path='/help' component={InnerContent} />\r\n          <Route path='/payment' component={InnerContent} />\r\n          <Route path='/terms' component={InnerContent} />\r\n          <Route\r\n            path='/error'\r\n            render={(props) => <NotFoundPage {...props} />}\r\n          />\r\n          {/* change to display on langing page */}\r\n          <Route path='/' exact component={Landing} />\r\n          <Route render={(props) => <NotFoundPage {...props} />} />\r\n        </Switch>\r\n      </Suspense>\r\n    </StickyBottomContext.Provider>\r\n  )\r\n  if (\r\n    props.isAuthenticated &&\r\n    canActivate(rolePermitted.student, props.token)\r\n  ) {\r\n    routes = (\r\n      <Suspense fallback={<ClimbingBoxLoader css={override} />}>\r\n        <Switch>\r\n          <Route path='/dashboard' component={InnerContent} />\r\n          <Route path='/courses' component={InnerContent} />\r\n          <Route path='/courses/:id' exact component={InnerContent} />\r\n          <Route path='/reports' component={InnerContent} />\r\n          <Route path='/reports/actions' component={InnerContent} />\r\n          <Route path='/profile' component={InnerContent} />\r\n          <Route path='/exams' component={InnerContent} />\r\n          <Route path='/exams/courses/:id' component={InnerContent} />\r\n          <Route path='/notification' component={InnerContent} />\r\n          <Route path='/exams/:id' component={InnerContent} />\r\n          <Route path='/exams/free/:id' component={InnerContent} />\r\n          <Route path='/result' component={InnerContent} />\r\n          <Route path='/rank' component={InnerContent} />\r\n          <Route path='/settings' component={InnerContent} />\r\n          <Route path='/print' component={InnerContent} />\r\n          <Route path='/logout' component={LogoutPage} />\r\n          <Route path='/help' component={InnerContent} />\r\n          <Route path='/payment' component={InnerContent} />\r\n          <Route path='/terms' component={InnerContent} />\r\n          {/* change to display on langing page */}\r\n          <Route path='/' exact component={Landing} />\r\n          <Redirect to='/dashboard' />\r\n        </Switch>\r\n      </Suspense>\r\n    )\r\n  }\r\n\r\n  if (canActivate(rolePermitted.mentor, props.token)) {\r\n    routes = (\r\n      <Suspense fallback={<ClimbingBoxLoader css={override} />}>\r\n        <Switch>\r\n          <Route path='/dashboard' component={InnerContent} />\r\n          <Route path='/profile' component={InnerContent} />\r\n          <Route path='/question' component={InnerContent} />\r\n          {/* <Route path='/exambuilder' component={InnerContent} /> */}\r\n          <Route path='/settings' component={InnerContent} />\r\n          <Route path='/print' component={InnerContent} />\r\n          <Route path='/logout' component={LogoutPage} />\r\n          <Route path='/help' component={InnerContent} />\r\n          <Route path='/payment' component={InnerContent} />\r\n          <Route path='/terms' component={InnerContent} />\r\n          {/* change to display on langing page */}\r\n          <Route path='/' exact component={Landing} />\r\n          <Redirect to='/dashboard' />\r\n        </Switch>\r\n      </Suspense>\r\n    )\r\n  }\r\n\r\n  if (canActivate(rolePermitted.moderator, props.token)) {\r\n    routes = (\r\n      <Suspense fallback={<ClimbingBoxLoader css={override} />}>\r\n        <Switch>\r\n          <Route path='/dashboard' component={InnerContent} />\r\n          <Route path='/profile' component={InnerContent} />\r\n          <Route path='/category' component={InnerContent} />\r\n          <Route path='/question' component={InnerContent} />\r\n          <Route path='/reports' component={InnerContent} />\r\n          <Route path='/reports/user/:id' component={InnerContent} />\r\n          <Route path='/reports/actions' component={InnerContent} />\r\n          <Route path='/routine' exact component={InnerContent} />\r\n          <Route path='/exambuilder' component={InnerContent} />\r\n          <Route path='/settings' component={InnerContent} />\r\n          <Route path='/print' component={InnerContent} />\r\n          <Route path='/logout' component={LogoutPage} />\r\n          <Route path='/help' component={InnerContent} />\r\n          <Route path='/payment' component={InnerContent} />\r\n          <Route path='/terms' component={InnerContent} />\r\n          {/* change to display on langing page */}\r\n          <Route path='/' exact component={Landing} />\r\n          <Redirect to='/dashboard' />\r\n        </Switch>\r\n      </Suspense>\r\n    )\r\n  }\r\n\r\n  if (canActivate(rolePermitted.coordinator, props.token)) {\r\n    routes = (\r\n      <Suspense fallback={<ClimbingBoxLoader css={override} />}>\r\n        <Switch>\r\n          <Route path='/dashboard' component={InnerContent} />\r\n          <Route path='/profile' component={InnerContent} />\r\n          <Route path='/category' component={InnerContent} />\r\n          <Route path='/routine' exact component={InnerContent} />\r\n          <Route path='/reports' component={InnerContent} />\r\n          <Route path='/reports/actions' component={InnerContent} />\r\n          <Route path='/question' component={InnerContent} />\r\n          <Route path='/coursebuilder' component={InnerContent} />\r\n          <Route path='/exambuilder' component={InnerContent} />\r\n          <Route path='/examedit' component={InnerContent} />\r\n          <Route path='/settings' component={InnerContent} />\r\n          <Route path='/print' component={InnerContent} />\r\n          <Route path='/logout' component={LogoutPage} />\r\n          <Route path='/help' component={InnerContent} />\r\n          <Route path='/payment' component={InnerContent} />\r\n          <Route path='/terms' component={InnerContent} />\r\n          <Route path='/notificationbuilder' component={InnerContent} />\r\n          {/* change to display on langing page */}\r\n          <Route path='/' exact component={Landing} />\r\n          <Redirect to='/dashboard' />\r\n        </Switch>\r\n      </Suspense>\r\n    )\r\n  }\r\n\r\n  return routes\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    isAuthenticated: state.auth.token !== null\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(RoutePages)\r\n//export default RoutePages;\r\n","import axios from 'axios'\r\n\r\nexport default function setAuthorizationToken(token) {\r\n  if (token) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\r\n  } else {\r\n    delete axios.defaults.headers.common['Authorization']\r\n  }\r\n}\r\n"],"sourceRoot":""}